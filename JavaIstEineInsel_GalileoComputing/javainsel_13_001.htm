<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 13 Datenstrukturen und Algorithmen</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 13 Datenstrukturen und Algorithmen">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 13 Datenstrukturen und Algorithmen">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_12_007.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_13_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="#mj245f5f8d5a858b46462d64e9b9c0786b" class="navh">13 Datenstrukturen und Algorithmen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj6ccdb9587d160efa70d8ec6e341ed18d" class="navh">13.1 Datenstrukturen und die Collection-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj1f6e6f95ae58be78d8c7c33d5ec49eb9" class="navh">13.1.1 Designprinzip mit Schnittstellen, abstrakten und konkreten Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj93c1c1e6b86c74945bc9929e635b50ed" class="navh">13.1.2 Die Basis-Schnittstellen Collection und Map</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj7a79efaff3ac0ccbf8d02255a3aaeb21" class="navh">13.1.3 Das erste Programm mit Container-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj2026369214f78e117bc4014be1b17b42" class="navh">13.1.4 Die Schnittstelle Collection und Kernkonzepte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj09ef8eba4417ef39ea4188a48e2b4fe7" class="navh">13.1.5 Schnittstellen, die Collection erweitern, und Map</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj8a76d089e7c9ff06b5403c9e8cb0dbd5" class="navh">13.1.6 Konkrete Container-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj20c3f4b9802e0f1a9aee25c67327fe8c" class="navh">13.1.7 Welche Container-Klasse nehmen?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj4eefaa341178c745bfceae42501036bb" class="navh">13.1.8 Generische Datentypen in der Collection-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mje5050a5669fd9b4900809aa4e1d34308" class="navh">13.1.9 Die Schnittstelle »Iterable« und das erweiterte »for«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_002.htm#mj6a20dd38f9c93abb1c32b6f2f56357af" class="navnav">13.2 Mit einem Iterator durch die Daten wandern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mj45b286662ec7b5715ef9c802f6c3513a" class="navnav">13.2.1 Die Schnittstellen Enumeration und Iterator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mja7762290bb6067a0fbd05b8f3464f59d" class="navnav">13.2.2 Iteratoren von Sammlungen und das erweiterte »for«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mj30dd8d057bfa61a6525e9269b03019c0" class="navnav">13.2.3 Fail-Fast-Iterator und die ConcurrentModificationException</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_003.htm#mjf4178c97cb04d7bdd4be130334579516" class="navnav">13.3 Listen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj924ffbfcb5de21fdf1a47f32930e42ce" class="navnav">13.3.1 Auswahlkriterium ArrayList oder LinkedList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mja4d1641a6292a2df6e31df7304ee0c9b" class="navnav">13.3.2 Die Schnittstelle List</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj63d4129737eb19c28d378dc37e103df2" class="navnav">13.3.3 ListIterator *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj10f6167ad1bdfb44e9b980a4a744a0c0" class="navnav">13.3.4 ArrayList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj6144fdfaf67c663736500be97c6834aa" class="navnav">13.3.5 LinkedList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj28bdf78da3eae580db1861dbf88c91e3" class="navnav">13.3.6 Der Feld-Adapter »Arrays.asList()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj1f8103e31724ff7e2fceb8bcb60aa67d" class="navnav">13.3.7 »toArray()« von Collection verstehen &#8211; die Gefahr einer Falle erkennen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mja85bfc5d8a94f925335e5488e8a3e81c" class="navnav">13.3.8 Primitive Elemente in den Collection-Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_004.htm#mje7632b0de42c17693defeebd48736c7f" class="navnav">13.4 Datenstrukturen mit Ordnung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj71f45ecb57e5f607156239ebc8ee1c86" class="navnav">13.4.1 Algorithmen mit Such- und Sortiermöglichkeiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj7a8c8fc5d6d143c1438c20607bff376f" class="navnav">13.4.2 Den größten und kleinsten Wert einer Collection finden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj7a4c4509ffe85c1968d541492369c412" class="navnav">13.4.3 Sortieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_005.htm#mj45263b87fd44c62f2cde668164897a93" class="navnav">13.5 Mengen (Sets)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj3aa70559d61c305035645bb81b8d2469" class="navnav">13.5.1 HashSet</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj5eea6a1f66c7382900fdecd6e5865d3b" class="navnav">13.5.2 TreeSet &#8211; die Menge durch Bäume</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj41ba16b6b9fd82b4ea19fa31e73fe365" class="navnav">13.5.3 LinkedHashSet</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_006.htm#mje2d6ca56ec06f93d3b2c8a18b73fde6e" class="navnav">13.6 Stack (Kellerspeicher, Stapel)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_006.htm#mj99b21bfdc1d5b5e12b826848170d6fc6" class="navnav">13.6.1 Die Methoden von »Stack«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_006.htm#mj0c9a4bc09c3ca7bb4407a33d4270d2b4" class="navnav">13.6.2 Ein »Stack« ist ein »Vector« &#8211; aha!</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_007.htm#mj0cdc7b3eb6a6b4dcdd7ac41f265dad03" class="navnav">13.7 Queues (Schlangen) und Deques</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mj490b2d33f4c96d064299bf581dd127af" class="navnav">13.7.1 Die Schnittstelle »Queue«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mjea3134c093b3ea42696ef5d64da7fe21" class="navnav">13.7.2 Blockierende Queues und Prioritätswarteschlangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mj716e961cbb2ed8dabc4e62745bf8907a" class="navnav">13.7.3 »Deque«-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_008.htm#mj836f3979bc516dee7023f5bc030ad627" class="navnav">13.8 Assoziative Speicher</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj6251e23375a9e2c3e729ddc747e1f2ed" class="navnav">13.8.1 Die Klassen »HashMap« und »TreeMap«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj748c34d0cdfc13971e9638ab713d6eff" class="navnav">13.8.2 Einfügen und Abfragen der Datenstruktur</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj3dc1756cf378db77cc9c38a682281404" class="navnav">13.8.3 Über die Bedeutung von »equals()«, »hashCode()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mje58b19cabdd91545346c9160bbf456fa" class="navnav">13.8.4 IdentityHashMap</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj4c0fb480d9f5dca8b0ac98ca26a8c0c3" class="navnav">13.8.5 Das Problem von veränderten Elementen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj03374baa89cf87ef02349f703180bd14" class="navnav">13.8.6 Aufzählungen und Ansichten des Assoziativspeichers</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj02c989d784a59defc8cb239a494d2b42" class="navnav">13.8.7 Der Gleichheitstest, Hash-Wert und Klon einer Hash-Tabelle*</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj5260d04d10949c0ec2c9122090ea613a" class="navnav">13.8.8 Die Arbeitsweise einer Hash-Tabelle *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_009.htm#mj3caf7868aebd71a657cac5c47c87cec9" class="navnav">13.9 Die Properties-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj182eaee2a4ca8f8b458ab3d60d50537c" class="navnav">13.9.1 Properties setzen und lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj24463d6c9d1783930fb460cb62ff3921" class="navnav">13.9.2 Properties verketten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj604807f32ff53197c8b3667285c5f39c" class="navnav">13.9.3 Hierarchische Eigenschaften</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj72243719024672251cb31a808440771d" class="navnav">13.9.4 Eigenschaften ausgeben *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mjf8ebe35d4f4fd0199f37e99984e7f732" class="navnav">13.9.5 Properties laden und speichern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_010.htm#mj31b29f3f7c1152bc2f6997ab29af14b7" class="navnav">13.10 Algorithmen in Collections</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mjf5b4df2039dbfb4fc4e44f5e4ee93747" class="navnav">13.10.1 Nicht-änderbare Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mj7b5e23e879a8b82fc7967e3134b020a7" class="navnav">13.10.2 Null Object Pattern und leere Sammlungen zurückgeben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mjc40940722b422ff38ddc02f6e4f223a8" class="navnav">13.10.3 Mit der Halbierungssuche nach Elementen fahnden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mj71789a9023a966258b7e3c417cc967c4" class="navnav">13.10.4 Ersetzen, Kopieren, Füllen, Umdrehen, Rotieren, Durchmischen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mj0ef664400e5bb7afaf45f07bc99fb342" class="navnav">13.10.5 Häufigkeit eines Elements *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mjb2c1c49f74f26c58e17bfca0a558f725" class="navnav">13.10.6 nCopies() *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mj87b606bd070a3fe065d9e3235aa42215" class="navnav">13.10.7 Singletons *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_011.htm#mj0ff161e9620174964e86be55a40f1eff" class="navnav">13.11 Synchronisation der Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mjb7c8b7760ff21e6e5bb0ad40f4f29968" class="navnav">13.11.1 Lock-free-Algorithmen aus java.util.concurrent</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mjf1ac096770848daaaf781e0d6c15b8a0" class="navnav">13.11.2 Wrapper zur Synchronisation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mj587b04b2fa3737ce40a9118e27d1f818" class="navnav">13.11.3 »CopyOnWriteArrayList« und »CopyOnWriteArraySet«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_012.htm#mjbfcd83b3541482d2f9c2c4faee3b7013" class="navnav">13.12 Die Klasse »BitSet« für Bitmengen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mje31079a72ad10f37120efe1808f08c38" class="navnav">13.12.1 Ein »BitSet« anlegen, füllen und erfragen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjebe1a504ea1a65bd97894c79caae5b6f" class="navnav">13.12.2 Mengenorientierte Operationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjf275d8829b6e2f0bc03919159b7b96a8" class="navnav">13.12.3 Methodenübersicht</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjb5daec6a05d52b553339ade302571692" class="navnav">13.12.4 Primzahlen in einem BitSet verwalten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_013.htm#mjc65ac117dfc6f17596056e9184d73038" class="navnav">13.13 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main">
<p class="anleser"><em>»Überlege einmal, bevor du gibst,
zweimal, bevor du annimmst,
und tausendmal, bevor du verlangst.«
&#8211; Marie von Ebner-Eschenbach (1830&#8211;1916)</em></p><a id="mj245f5f8d5a858b46462d64e9b9c0786b" name="mj245f5f8d5a858b46462d64e9b9c0786b"></a><h1 class="t1"><span class="cfett">13</span> Datenstrukturen und Algorithmen</h1>
<p>Algorithmen [Das Wort »Algorithmus« geht auf den persisch-arabischen Mathematiker Ibn Mûsâ Al-Chwârismî zurück, der im 9. Jahrhundert lebte.
]  sind ein zentrales Thema der Informatik. Ihre Erforschung und Untersuchung nimmt dort einen bedeutenden Platz ein. Algorithmen operieren nur dann effektiv mit Daten, wenn diese geeignet strukturiert sind. Schon das Beispiel Telefonbuch zeigt, wie wichtig die Ordnung der Daten nach einem Schema ist. Die Suche nach einer Telefonnummer bei gegebenem Namen gelingt schnell, während die Suche nach einem Namen bei bekannter Telefonnummer ein mühseliges Unterfangen darstellt. Datenstrukturen und Algorithmen sind also eng miteinander verbunden, und die Wahl der richtigen Datenstruktur entscheidet über effiziente Laufzeiten; beide erfüllen allein nie ihren Zweck. Leider ist die Wahl der »richtigen« Datenstruktur nicht so einfach, wie es sich anhört, und eine Reihe von schwierigen Problemen in der Informatik ist wohl deswegen noch nicht gelöst, weil eine passende Datenorganisation bis jetzt nicht gefunden wurde.</p>
<p>Die wichtigsten Datenstrukturen, wie Listen, Mengen, Kellerspeicher und Assoziativspeicher, sollen in diesem Kapitel vorgestellt werden. In der zweiten Hälfte des Kapitels wollen wir uns dann stärker den Algorithmen widmen, die auf diesen Datenstrukturen operieren.</p><a id="mj6ccdb9587d160efa70d8ec6e341ed18d" name="mj6ccdb9587d160efa70d8ec6e341ed18d"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">13.1</span> Datenstrukturen und die Collection-API  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Dynamische Datenstrukturen passen ihre Größe der Anzahl der Daten an, die sie aufnehmen. Schon in Java 1.0 brachte die Standard-Bibliothek fundamentale Datenstrukturen mit, aber erst mit Java 1.2 wurde mit der Collection-API der Umgang mit Datenstrukturen und Algorithmen auf eine gute Basis gestellt. In Java 5 gab es große Anpassungen durch Einführung der Generics.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Sprachweise   </span>Ein Container ist ein Objekt, das wiederum Objekte aufnimmt und die Verantwortung für die Elemente übernimmt. Wir werden die Begriffe »Container«, »Sammlung« und »Collection« synonym verwenden.</p>
</td>
</tr>
</table><br><a id="mj1f6e6f95ae58be78d8c7c33d5ec49eb9" name="mj1f6e6f95ae58be78d8c7c33d5ec49eb9"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">13.1.1</span> Designprinzip mit Schnittstellen, abstrakten und konkreten Klassen  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Das Design der Collection-Klassen folgt vier Prinzipien:</p>
<ul class="gp">
<li>Schnittstellen legen Gruppen von Operationen für die verschiedenen Behältertypen fest. So gibt es zum Beispiel mit <span class="clisting">List</span> eine Schnittstelle für Sequenzen (Listen) und mit <span class="clisting">Map</span> eine Schnittstelle für Assoziativspeicher, die Schlüssel-Werte-Paare verbinden.</li>
</ul>
<ul class="gp">
<li>Abstrakte Basisklassen führen die Operationen der Schnittstellen auf eine minimale Zahl von als abstrakt deklarierten Grundoperationen zurück, etwa <span class="clisting">addAll()</span> auf <span class="clisting">add()</span> oder <span class="clisting">isEmpty()</span> auf <span class="clisting">getSize()</span>. (Mit den abstrakten Basisimplementierungen wollen wir uns nicht weiter beschäftigen. Sie sind interessanter, wenn eigene Datenstrukturen auf der Basis der Grundimplementierung entworfen werden.)</li>
</ul>
<ul class="gp">
<li>Konkrete Klassen für bestimmte Behältertypen beerben die entsprechende abstrakte Basisklasse und ergänzen die unbedingt erforderlichen Grundoperationen (und einige die Performance steigernde Abkürzungen gegenüber der allgemeinen Lösung in der Oberklasse). Sie sind in der Nutzung unsere direkten Ansprechpartner. Für eine Liste können wir zum Beispiel die konkrete Klasse <span class="clisting">ArrayList</span> und als Assoziativspeicher die Klasse <span class="clisting">TreeMap</span> nutzen.</li>
</ul>
<ul class="gp">
<li>Algorithmen, wie die Suche nach einem Element, gehören zum Teil zur Schnittstelle der Datenstrukturen. Zusätzlich gibt es mit der Klasse <span class="clisting">Collections</span> eine Utility-Klasse mit weiteren Algorithmen.</li>
</ul><a id="mj93c1c1e6b86c74945bc9929e635b50ed" name="mj93c1c1e6b86c74945bc9929e635b50ed"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">13.1.2</span> Die Basis-Schnittstellen Collection und Map  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Alle Datenstrukturen aus der Collection-API fußen entweder auf der Schnittstelle <span class="clisting">java.util.Collection</span> (für Listen, Mengen, Schlangen) oder <span class="clisting">java.util.Map</span> (für Assoziativspeicher). Durch die gemeinsame Schnittstelle erhalten alle implementierenden Klassen einen gemeinsamen Rahmen. Die Operationen lassen sich grob einteilen in:</p>
<ul class="gp">
<li>Basisoperationen zum Erfragen der Elementanzahl und zum Hinzufügen, Löschen, Selektieren und Finden von Elementen</li>
</ul>
<ul class="gp">
<li>Mengenoperationen, um etwa andere Sammlungen einzufügen</li>
</ul>
<ul class="gp">
<li>Feldoperationen bei <span class="clisting">Collection</span>, um die Sammlung in ein Array zu konvertieren, und bei <span class="clisting">Map</span> Operationen, um alternative Ansichten von Schlüsseln oder Werten zu bekommen.</li>
</ul><a id="mj7a79efaff3ac0ccbf8d02255a3aaeb21" name="mj7a79efaff3ac0ccbf8d02255a3aaeb21"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">13.1.3</span> Das erste Programm mit Container-Klassen  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Bis auf Assoziativspeicher implementieren alle Container-Klassen das Interface <span class="clisting">Collection</span> und haben dadurch schon wichtige Methoden, um Daten aufzunehmen, zu manipulieren und auszulesen. Das folgende Programm erzeugt als Datenstruktur eine <span class="ckursiv">verkettete Liste</span>, fügt Strings ein und gibt zum Schluss die Sammlung auf der Standardausgabe aus:</p>
<p class="tabunter"><strong>Listing 13.1    </strong>com/tutego/insel/util/MyFirstCollection.java, MyFirstCollection</p>
<div class="listing"><pre class="prettyprint">public class MyFirstCollection
{
  private static void fill(<span class="cfett"> Collection&lt;String&gt; c</span> )
  {
   <span class="cfett"> c.add( "Juvy" );</span>
   <span class="cfett"> c.add( "Tina" );</span>
   <span class="cfett"> c.add( "Joy" );</span>
  }

  public static void main( String[] args )
  {
   <span class="cfett"> List&lt;String&gt; c = new LinkedList&lt;String&gt;();</span>
    fill( c );
    System.out.println( c );     // [Juvy, Tina, Joy]
   <span class="cfett"> Collections.sort( c );</span>
    System.out.println( c );     // [Joy, Juvy, Tina]
  }
}</pre></div>
<p>Das Beispiel zeigt unterschiedliche Aspekte der Collection-API:</p>
<ul class="gp">
<li>Seit Java 5 sind alle Datenstrukturen generisch deklariert. Statt <span class="clisting">new LinkedList()</span> schreiben wir <span class="clisting">new LinkedList&lt;String&gt;()</span>.</li>
</ul>
<ul class="gp">
<li>Unserer eigenen statischen Methode <span class="clisting">fill()</span> ist es egal, welche <span class="clisting">Collection</span> wir ihr geben. Sie arbeitet nicht nur auf der <span class="clisting">LinkedList</span>, sondern genauso auf einer <span class="clisting">ArrayList</span> und auf Mengen (<span class="clisting">Set</span>-Objekte), denn <span class="clisting">Set</span>-Klassen implementieren ebenfalls <span class="clisting">Collection</span>.</li>
</ul>
<ul class="gp">
<li>Einer Liste lässt sich mit <span class="clisting">add()</span> füllen. Die Methode schreibt die Schnittstelle <span class="clisting">Collection</span> vor und <span class="clisting">LinkedList</span> realisiert die Operation aus der Schnittstelle.</li>
</ul>
<ul class="gp">
<li>Während <span class="clisting">Collection</span> eine Schnittstelle ist, die von unterschiedlichen Datenstrukturen implementiert wird, ist <span class="clisting">Collections</span> eine Utililty-Klasse mit vielen Hilfsmethoden, etwa zum sortieren mit <span class="clisting">Collections.sort()</span>.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Nutze immer den kleinstnötigen Typ! Wir haben das an zwei Stellen getan. Statt <span class="clisting">fill(</span><span class="cfett">LinkedList</span><span class="clisting">&lt;String&gt; c)</span> deklariert das Programm <span class="clisting">fill(</span><span class="cfett">Collection</span><span class="clisting">&lt;String&gt; c)</span> und statt <span class="cfett">LinkedList</span><span class="clisting">&lt;String&gt; c = new LinkedList&lt;String&gt;()</span> nutzt es <span class="cfett">List</span><span class="clisting">&lt;String&gt; c = new LinkedList&lt;String&gt;()</span>. Mit dieser Schreibweise lassen sich unter softwaretechnischen Gesichtspunkten leicht die konkreten Datenstrukturen ändern, aber etwa die Methodensignatur ändert sich nicht und ist breiter aufgestellt. Es ist immer schön, wenn wir &#8211; etwa aus Gründen der Geschwindigkeit oder Speicherplatzbeschränkung &#8211; auf diese Weise leicht die Datenstruktur ändern können und der Rest des Programms unverändert bleibt. Das ist die Idee der schnittstellenorientierten Programmierung, und es ist in Java selten nötig, den konkreten Typ einer Klasse direkt anzugeben.</p>
</td>
</tr>
</table><br><a id="mj2026369214f78e117bc4014be1b17b42" name="mj2026369214f78e117bc4014be1b17b42"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">13.1.4</span> Die Schnittstelle Collection und Kernkonzepte  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Unterschnittstellen erweitern <span class="clisting">Collection</span> und schreiben Verhalten vor, ob etwa der Container die Reihenfolge des Einfügens beachtet, Werte doppelt beinhalten darf oder die Werte sortiert hält; <span class="clisting">List</span>, <span class="clisting">Set</span>, <span class="clisting">Queue</span>, <span class="clisting">Deque</span> und <span class="clisting">NavigableSet</span> sind dabei die wichtigsten.</p>
<div class="bildbox">
<p><a name="IDAA20D"></a><a onClick="OpenWin('bilder/collectionuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleincollectionuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p><span class="clisting">interface java.util.</span><span class="cfett">Collection</span><span class="clisting">&lt;E&gt;
extends Iterable&lt;E&gt;</span></p>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean add( E o )</span>
Optional. Fügt dem Container ein Element hinzu und gibt <span class="clisting">true</span> zurück, falls sich das Element einfügen lässt. Gibt <span class="clisting">false</span> zurück, wenn schon ein Objekt gleichen Werts vorhanden ist und doppelte Werte nicht erlaubt sind. Diese Semantik gilt etwa bei Mengen. Erlaubt der Container das Hinzufügen grundsätzlich nicht, löst er eine <span class="clisting">UnsupportedOperationException</span> aus.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean addAll( Collection&lt;? extends E&gt; c )</span>
Fügt alle Elemente der Collection <span class="clisting">c</span> dem Container hinzu.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void clear()</span>
Optional. Löscht alle Elemente im Container. Wird dies vom Container nicht unterstützt, wird eine <span class="clisting">UnsupportedOperationException</span> ausgelöst.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean contains( Object o )</span>
Liefert <span class="clisting">true</span>, falls der Container ein inhaltlich gleiches Element enthält.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean containsAll( Collection&lt;?&gt; c )</span>
Liefert <span class="clisting">true</span>, falls der Container alle Elemente der Collection <span class="clisting">c</span> enthält.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isEmpty()</span>
Liefert <span class="clisting">true</span>, falls der Container keine Elemente enthält.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Iterator&lt;E&gt; iterator()</span>
Liefert ein <span class="clisting">Iterator</span>-Objekt über alle Elemente des Containers.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean remove( Object o )</span>
Optional. Entfernt das angegebene Objekt aus dem Container, falls es vorhanden ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean removeAll( Collection&lt;?&gt; c )</span>
Optional. Entfernt alle Objekte der Collection <span class="clisting">c</span> aus dem Container.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean retainAll( Collection&lt;?&gt; c )</span>
Optional. Entfernt alle Objekte, die nicht in der Collection <span class="clisting">c</span> vorkommen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int size()</span>
Gibt die Anzahl der Elemente im Container zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Object[] toArray()</span>
Gibt ein Array mit allen Elementen des Containers zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">&lt;T&gt; T[] toArray( T[] a )</span>
Gibt ein Array mit allen Elementen des Containers zurück. Verwendet das als Argument übergebene Array als Zielcontainer, wenn es groß genug ist. Sonst wird ein Array passender Größe angelegt, dessen Laufzeittyp <span class="clisting">a</span> entspricht.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean equals( Object o )</span>
Prüft a) ob das angegebene Objekt <span class="clisting">o</span> ein kompatibler Container ist und b) alle Elemente aus dem eigenen Container <span class="clisting">equals()</span>-gleich der Elemente des anderen Containers sind und c) &#8211; falls vorhanden &#8211; die gleiche Ordnung haben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int hashCode()</span>
Liefert den Hash-Wert des Containers. Dies ist wichtig, wenn der Container als Schlüssel in Hash-Tabellen verwendet wird. Dann darf der Inhalt aber nicht mehr geändert werden, da der Hash-Wert von allen Elementen des Containers abhängt.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Der Basistyp <span class="clisting">Collection</span> ist typisiert, genauso wie die Unterschnittstellen und im-plementierenden Klassen. Auffällig sind die Methoden <span class="clisting">remove(Object)</span> und <span class="clisting">contains(Object)</span>, die gerade nicht mit dem generischen Typ <span class="clisting">E</span> versehen sind, was zur Konsequenz hat, dass diese Methoden mit beliebigen Objekten aufgerufen werden können. Fehler schleichen sich schnell ein, wenn der Typ der eingefügten Objekte ein anderer ist als der beim Löschversuch, etwa bei <span class="clisting">HashSet&lt;Long&gt; set</span> mit anschließendem <span class="clisting">set.add(1L)</span> und <span class="clisting">remove(1)</span>.</p>
</td>
</tr>
</table><br><h4 class="t4">Anzeige der Veränderungen durch boolesche Rückgaben</h4>
<p>Der Rückgabewert einiger Methoden wie <span class="clisting">add()</span> oder <span class="clisting">remove()</span> ist ein <span class="clisting">boolean</span> und könnte natürlich auch <span class="clisting">void</span> sein. Doch die Collection-API signalisiert über die Rückgabe, ob eine Änderung der Datenstruktur erfolgte oder nicht. Bei Mengen liefert <span class="clisting">add()</span> etwa <span class="clisting">false</span>, wenn ein gleiches Element schon in der Menge ist; <span class="clisting">add()</span> ersetzt das alte nicht durch das neue.</p>
<h4 class="t4">Optionale Methoden und UnsupportedOperationException</h4>
<p>Einige Methoden aus der Schnittstelle <span class="clisting">Collection</span> sind optional, weil konkrete Container oder Realisierungen die Operationen nicht realisieren wollen oder können. Da eine Schnittstellenimplementierung aber auf jeden Fall die Operation als Methode implementieren muss, lösen die Methoden eine <span class="clisting">UnsupportedOperationException</span> aus. Den Grund, warum Container nicht verändert werden dürfen, kann das folgende Beispiel erläutern:</p>
<p class="tabunter"><strong>Listing 13.2    </strong>com/tutego/insel/util/UnsupportedOperationExceptionDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">Collection&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();
Collection&lt;Integer&gt; set2 = Collections.unmodifiableCollection( set );
set2.add( 1 ); // Exception in thread "main" <img src="common/umbruch.gif" border="0" alt="Umbruch">
               // java.lang.UnsupportedOperationException</pre></div>
<p>Die vielen Optional-Anmerkungen erschrecken zunächst und lassen die Klassen beziehungsweise Schnittstellen irgendwie unzuverlässig oder nutzlos erscheinen. Die konkreten Standard-implementierungen der Collection-API bieten diese Operationen jedoch vollständig an, nur die Spezial-Wrapper für Nur-Lese-Container lassen sie weg. Das Konzept der optionalen Operationen ist umstritten, wenn Methoden zur Laufzeit eine Exception auslösen. Besser wären natürlich kleinere separate Schnittstellen, die nur die Leseoperationen enthalten und zur Übersetzungszeit überprüft werden können; dann gäbe es jedoch deutlich mehr Schnittstellen im <span class="clisting">java.util</span>-Paket.</p>
<h4 class="t4">Vergleiche im Allgemeinen auf Basis von »equals()«</h4>
<p>Der Methode <span class="clisting">equals()</span> kommt bei den Elementen, die in die Datenstrukturen wandern, eine besondere Rolle zu. Jedes Objekt, welches eine <span class="clisting">ArrayList</span>, <span class="clisting">LinkedList</span>, <span class="clisting">HashSet</span> und alle anderen Datenstrukturen [Lassen wir die besondere Klasse <span class="clisting">IdentityHashMap</span> außen vor.
]  aufnehmen soll, muss zwingend <span class="clisting">equals()</span> implementieren. Denn Methoden wie <span class="clisting">contains()</span>, <span class="clisting">remove()</span> vergleichen die Elemente mit <span class="clisting">equals()</span> auf Gleichheit und nicht mit <span class="clisting">==</span> auf Identität.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Ein neues Punkt-Objekt kommt in die Datenstruktur. Nun wird es mit einem anderen <span class="clisting">equals()</span>-gleichen Objekt auf das Vorkommen in der <span class="clisting">Collection</span> geprüft und gelöscht:</p>
<div class="listing"><pre class="prettyprint">Collection&lt;Point&gt; list = new ArrayList&lt;Point&gt;();
list.add(<span class="cfett"> new Point(47, 11)</span> );
System.out.println( list.size() );                        // 1
System.out.println( list.contains(<span class="cfett"> new Point(47, 11)</span> ) ); // true
list.remove(<span class="cfett"> new Point(47, 11)</span> );
System.out.println( list.size() );                        // 0</pre></div>
</td>
</tr>
</table><br><p>Eigene Klassen müssen folglich <span class="clisting">equals()</span> aus der absoluten Oberklasse <span class="clisting">Object</span> überschreiben. Umgekehrt heißt das auch, dass Objekte, die kein sinnvolles <span class="clisting">equals()</span> besitzen, nicht von den Datenstrukturen aufgenommen werden können; ein Beispiel hierfür ist <span class="clisting">StringBuilder</span>/<span class="clisting">StringBuffer</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Besonderheit   </span>Die Datenstrukturen selbst deklarieren eine <span class="clisting">equals()</span>-Methode. Zwei Datenstrukturen sind <span class="clisting">equals()</span>-gleich, wenn sie die gleichen Elemente &#8211; gleich nach der <span class="clisting">equals()</span>-Relation &#8211; besitzen und die gleiche Ordnung haben. Ein Detail in der Implementierung überrascht jedoch. Exemplarisch:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">LinkedList&lt;String&gt; l1</span> = new LinkedList&lt;String&gt;( Arrays.asList( "" ) );<span class="cfett">
ArrayList&lt;String&gt;</span>  <span class="cfett">l2</span> = new ArrayList&lt;String&gt;( Arrays.asList( "" ) );
System.out.println( <span class="cfett">l1.equals( l2 )</span> );          // <span class="cfett">true</span></pre></div>
<p class="BStandard">Die beiden Datenstrukturen sind gleich, obwohl ihre Typen unterschiedlich sind. Das ist einmalig in der Java-API. Dahinter steht, dass die <span class="clisting">equals()</span>-Implementierung von etwa <span class="clisting">ArrayList</span>, <span class="clisting">LinkedList</span> nur betrachtet, ob das an <span class="clisting">equals()</span> übergebene Objekt vom Typ <span class="clisting">List</span> ist. Das Gleiche gilt im Übrigen auch für <span class="clisting">Set</span> und <span class="clisting">Map</span>. Nach dem Typtest folgend die Tests auf die Gleichheit der Elemente.</p>
</td>
</tr>
</table><br><a id="mj09ef8eba4417ef39ea4188a48e2b4fe7" name="mj09ef8eba4417ef39ea4188a48e2b4fe7"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">13.1.5</span> Schnittstellen, die Collection erweitern, und Map  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Es gibt einige elementare Schnittstellen, die einen Container weiter untergliedern, etwa in der Art, wie Elemente gespeichert werden.</p>
<div class="bildbox">
<p><a name="IDA3E1D"></a><a onClick="OpenWin('bilder/collectionapiuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleincollectionapiuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 13.1    </strong>Zentrale Schnittstellen und Klassen der Collection-API</p>
<h4 class="t4">Die Schnittstelle List für Sequenzen</h4>
<p>Die Schnittstelle <span class="clisting">List</span> [Wie in der Collection-Design-FAQ unter <span class="ckursiv">http://java.sun.com/javase/6/docs/technotes/guides/collections/designfaq.html#11</span> nachzulesen, hätte die Schnittstelle durchaus <span class="clisting">Sequence</span> heißen können.
] , die die <span class="clisting">Collection</span>-Schnittstelle erweitert, enthält zusätzliche Operationen für eine geordnete Liste (auch <span class="ckursiv">Sequenz</span> genannt) von Elementen. Auf die Elemente einer Liste lässt sich über einen ganzzahligen Index zugreifen, und es kann linear nach Elementen gesucht werden. Doppelte Elemente sind erlaubt, auch beliebig viele <span class="clisting">null</span>-Einträge.</p>
<p>Zwei bekannte implementierende Klassen sind <span class="clisting">LinkedList</span> sowie <span class="clisting">ArrayList</span>. Weil das AWT-Paket eine Klasse mit dem Namen <span class="clisting">List</span> deklariert, muss bei Namenskonflikten der voll qualifizierte Name, also <span class="clisting">java.util.List</span> oder <span class="clisting">java.awt.List</span>, verwendet werden.</p>
<h4 class="t4">Die Schnittstelle »Set« für Mengen</h4>
<p>Ein <span class="clisting">Set</span> ist eine im mathematischen Sinn definierte Menge von Objekten. Wie von mathematischen Mengen bekannt, darf ein <span class="clisting">Set</span> keine doppelten Elemente enthalten. Für zwei nicht identische Elemente <span class="clisting">e1</span> und <span class="clisting">e2</span> eines <span class="clisting">Set</span>-Objekts liefert der Vergleich <span class="clisting">e1.equals(e2)</span> also immer <span class="clisting">false</span>. Genauer gesagt: Aus <span class="clisting">e1.equals(e2)</span> folgt, dass <span class="clisting">e1</span> und <span class="clisting">e2</span> identische Objekt-referenzen sind, sich also auf dasselbe Mengenelement beziehen.</p>
<p>Besondere Beachtung muss Objekten geschenkt werden, die ihren Wert nachträglich ändern, da so zunächst ungleiche Mengenelemente inhaltlich gleich werden können. Dies kann ein <span class="clisting">Set</span> nicht kontrollieren. Als weitere Einschränkung gilt, dass eine Menge sich selbst nicht als Element enthalten darf. Die wichtigste konkrete Mengen-Klasse ist <span class="clisting">HashSet</span>.</p>
<p><span class="clisting">NavigableSet</span> &#8211; beziehungsweise ihre Mutter <span class="clisting">SortedSet</span> &#8211; erweitert <span class="clisting">Set</span> um die Eigenschaft, Elemente sortiert auslesen zu können. Das Sortierkriterium wird durch ein Exemplar der Hilfsklasse <span class="clisting">Comparator</span> bestimmt, oder die Elemente implementieren <span class="clisting">Comparable</span>. <span class="clisting">TreeSet</span> und <span class="clisting">ConcurrentSkipListSet</span> implementieren die Schnittstellen und erlauben mit einem Iterator oder einer Feld-Repräsentation Zugriff auf die sortierten Elemente.</p>
<h4 class="t4">Die Schnittstelle »Queue« für (Warte-)Schlangen</h4>
<p>Eine Queue arbeitet nach dem FIFO-Prinzip (First in, First out); zuerst eingefügte Elemente werden zuerst wieder ausgegeben, getreu nach dem Motto »Wer zuerst kommt, mahlt zuerst«. Die Schnittstelle <span class="clisting">Queue</span> deklariert Operationen für alle Warteschlangen und wird etwa von den Klassen <span class="clisting">LinkedList</span> und <span class="clisting">PriorityQueue</span> implementiert.</p>
<h4 class="t4">Queue mit zwei Enden</h4>
<p>Während die Queue Operationen bietet, um an einem Ende Daten anzuhängen und zu erfragen, bietet die Datenstruktur <span class="clisting">Deque</span> (vom Englischen »<span class="cfett">d</span>ouble-<span class="cfett">e</span>nded <span class="cfett">que</span>ue«) das an beiden Enden. Die Klasse <span class="clisting">LinkedList</span> ist zum Beispiel eine Implementierung von <span class="clisting">Deque</span>. Die Datenstruktur wird wie »Deck« ausgesprochen.</p>
<h4 class="t4">Die Schnittstelle »Map«</h4>
<p>Eine Datenstruktur, die einen <span class="ckursiv">Schlüssel</span> (engl. <span class="ckursiv">key</span>) mit einem <span class="ckursiv">Wert</span> (engl. <span class="ckursiv">value</span>) verbindet, heißt <span class="ckursiv">assoziativer Speicher</span>. Sie erinnert an ein Gedächtnis und ist vergleichbar mit einem Wörterbuch oder Nachschlagewerk. Betrachten wir ein Beispiel: Auf einem Personalausweis findet sich eine eindeutige Nummer, eine ID, die einmalig für jeden Bundesbürger ist. Wenn nun in einem Assoziativspeicher alle Passnummern gespeichert sind, lässt sich leicht über die Passnummer (Schlüssel) die Person (Wert) herausfinden, also den Namen der Person, Gültigkeit des Ausweises usw. In die gleiche Richtung geht ein Beispiel, welches ISB-Nummern mit Büchern verbindet. Ein Assoziativspeicher könnte zu der ISB-Nummer zum Beispiel das Erscheinungsjahr assoziieren, ein anderer Assoziativspeicher eine Liste von Rezensionen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Gerne wird als Beispiel für einen Assoziativspeicher ein Telefonbuch mit einer Assoziation zwischen Namen und Telefonnummern genannt. Wenn das mit einem Assoziativspeicher realisiert werden muss, reicht natürlich der Name alleine nicht aus, sondern der Ort/das Land müssen dazukommen (ich bin zum Beispiel nicht der einzige Christian Ullenboom, in Erlangen wohnt mein Namenspate). Auch weniger ist es ein Problem, dass in einem Familienhaushalt mehrere Personen die gleiche Telefonnummer besitzen, als vielmehr die Tatsache, dass eine Person unterschiedliche Telefonnummern, etwa eine Mobil- und Festnetznummer besitzen kann. Damit das Modell korrekt bleibt, muss eine Assoziation zwischen einem Namen und einer Liste von Telefonnummern bestehen. Ein Assoziativspeicher ist flexibel genug dafür: Der assoziierte Wert muss kein einfacher Wert wie eine Zahl oder String sein, sondern kann eine komplexe Datenstruktur sein.</p>
</td>
</tr>
</table><br><p>In Java schreibt die Schnittstelle <span class="clisting">Map</span> Verhalten für einen Assoziativspeicher vor. <span class="clisting">Map</span> ist ein wenig anders als die anderen Schnittstellen. So erweitert die Schnittstelle <span class="clisting">Map</span> die Schnittstelle <span class="clisting">Collection</span> nicht. Das liegt daran, dass bei einem Assoziativspeicher Schlüssel und Wert immer zusammen vorkommen müssen und die Datenstruktur eine Operation wie <span class="clisting">add(Object)</span> nicht unterstützen kann. Im Gegensatz zu <span class="clisting">List</span> gibt es bei einer <span class="clisting">Map</span> auch keine Position.</p>
<p>Die Schlüssel einer <span class="clisting">Map</span> können mit Hilfe eines Kriteriums sortiert werden. Ist das der Fall, implementieren diese speziellen Klassen die Schnittstelle <span class="clisting">NavigableMap</span> (beziehungsweise die Mutter <span class="clisting">SortedSet</span>), die <span class="clisting">Map</span> direkt erweitert. Das Sortierkriterium wird entweder über ein externes <span class="clisting">Comparator</span>-Objekt festgelegt, oder die Elemente in der <span class="clisting">Map</span> sind vom Typ <span class="clisting">Comparable</span>. Damit kann ein Iterator in einer definierten Reihenfolge einen assoziativen Speicher ablaufen. Bisher implementieren <span class="clisting">TreeMap</span> und <span class="clisting">ConcurrentSkipListMap</span> die Schnittstelle <span class="clisting">NavigableMap</span>.</p><a id="mj8a76d089e7c9ff06b5403c9e8cb0dbd5" name="mj8a76d089e7c9ff06b5403c9e8cb0dbd5"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">13.1.6</span> Konkrete Container-Klassen  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Alle bisher vorgestellten Schnittstellen und Klassen dienen zur Modellierung und dem Programmierer nur als Basistyp. Die folgenden Klassen sind konkrete Klassen und können von uns benutzt werden:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 13.1    </strong>Konkrete Container-Klassen</p>
</caption>
<tr>
<td class="tabellenkopf" rowspan="2"><span class="cfett">Listen (List)</span>
</td>
<td class="tabellentext">
<p><span class="clisting">ArrayList</span></p>
</td>
<td class="tabellentext">
<p>Implementiert Listen-Funktionalität durch die Abbildung auf ein Feld; implementiert die Schnittstelle <span class="clisting">List</span>.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">LinkedList</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">LinkedList</span> ist eine doppelt verkettete Liste, also eine Liste von Einträgen mit einer Referenz auf den jeweiligen Nachfolger und Vorgänger. Das ist nützlich beim Einfügen und Löschen von Elementen an beliebigen Stellen innerhalb der Liste.</p>
</td>
</tr>
<tr>
<td class="tabellenkopf" rowspan="3"><span class="cfett">Mengen (Set)</span>
</td>
<td class="tabellentext">
<p><span class="clisting">HashSet</span></p>
</td>
<td class="tabellentext">
<p>Eine Implementierung der Schnittstelle <span class="clisting">Set</span> durch ein schnelles Hash-Verfahren.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">TreeSet</span></p>
</td>
<td class="tabellentext">
<p>Implementierung von <span class="clisting">Set</span> durch einen Baum, der alle Elemente sortiert hält.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">LinkedHashSet</span></p>
</td>
<td class="tabellentext">
<p>Eine schnelle Mengen-Implementierung, die sich parallel auch die Reihenfolge der eingefügten Elemente merkt.</p>
</td>
</tr>
<tr>
<td class="tabellenkopf" rowspan="4"><span class="cfett">Assoziativspeicher (Map)</span>
</td>
<td class="tabellentext">
<p><span class="clisting">HashMap</span></p>
</td>
<td class="tabellentext">
<p>Implementiert einen assoziativen Speicher durch ein Hash-Verfahren.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">TreeMap</span></p>
</td>
<td class="tabellentext">
<p>Exemplare dieser Klasse halten ihre Elemente in einem Binärbaum sortiert; implementiert <span class="clisting">NavigableMap</span>.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">LinkedHashMap</span></p>
</td>
<td class="tabellentext">
<p>Ein schneller Assoziativspeicher, der sich parallel auch die Reihenfolge der eingefügten Elemente merkt.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">WeakHashMap</span></p>
</td>
<td class="tabellentext">
<p>Verwaltet Elemente mit schwachen Referenzen, sodass die Laufzeitumgebung bei Speicherknappheit Elemente entfernen kann.</p>
</td>
</tr>
<tr>
<td class="tabellenkopf" rowspan="3"><span class="cfett">Schlange (Queue)</span>
</td>
<td class="tabellentext">
<p><span class="clisting">LinkedList</span></p>
</td>
<td class="tabellentext">
<p>Die verkettete Liste implementiert <span class="clisting">Queue</span> und auch <span class="clisting">Deque</span>.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">ArrayBlockingQueue</span></p>
</td>
<td class="tabellentext">
<p>Eine blockierende Warteschlange.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">PriorityQueue</span></p>
</td>
<td class="tabellentext">
<p>Prioritätswarteschlange.</p>
</td>
</tr>
</table><br><p>Alle Datenstrukturen sind serialisierbar und implementieren <span class="clisting">Serializable</span>, die Basisschnittstellen wie <span class="clisting">Set</span>, <span class="clisting">List</span> … machen das nicht!</p><a id="mj20c3f4b9802e0f1a9aee25c67327fe8c" name="mj20c3f4b9802e0f1a9aee25c67327fe8c"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">13.1.7</span> Welche Container-Klasse nehmen?  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Bei der großen Anzahl von Klassen sind Entscheidungskriterien angebracht, nach denen Entwickler Klassen auswählen können. Die folgende Aufzählung soll einige Vorschläge geben:</p>
<ul class="gp">
<li>Ist eine Sequenz, also eine feste Ordnung gefordert? Wenn ja, dann nimm eine Liste.</li>
</ul>
<ul class="gp">
<li>Soll es einen schnellen Zugriff über einen Index geben? Wenn ja, ist die <span class="clisting">ArrayList</span> gegenüber der <span class="clisting">LinkedList</span> im Vorteil.</li>
</ul>
<ul class="gp">
<li>Werden oft am Ende und Anfang Elemente eingefügt? Dann kann <span class="clisting">LinkedList</span> punkten.</li>
</ul>
<ul class="gp">
<li>Wenn eine Reihenfolge der Elemente uninteressant ist, aber schnell entschieden werden soll, ob ein Element Teil einer Menge ist, erweist sich <span class="clisting">HashSet</span> als interessant.</li>
</ul>
<ul class="gp">
<li>Sollen Elemente nur einmal vorkommen und immer sortiert bleiben? Dann ist <span class="clisting">TreeSet</span> eine gute Wahl.</li>
</ul>
<ul class="gp">
<li>Muss es eine Assoziation zwischen Schlüssel und Elementen geben, ist eine <span class="clisting">Map</span> von Vorteil.</li>
</ul><a id="mj4eefaa341178c745bfceae42501036bb" name="mj4eefaa341178c745bfceae42501036bb"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">13.1.8</span> Generische Datentypen in der Collection-API  <a href="#t2t310"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine Eigenschaft der Datenstrukturen besteht darin, dass sie prinzipiell offen für jeden Typ sind. Sie nehmen beim Speichern den allgemeinsten Typ <span class="clisting">Object</span> entgegen (wir nehmen hier die vereinfachte Variante von Java 1.4 an) und liefern diesen auch als Rückgabe, also anschaulich bei der <span class="clisting">List</span>:</p>
<ul class="gp">
<li><span class="clisting">void add(</span> <span class="cfett">Object</span> <span class="clisting">o )</span></li>
</ul>
<ul class="gp">
<li><span class="cfett">Object</span> <span class="clisting">get( int index )</span></li>
</ul>
<p>Wenn eine Liste zum Beispiel aber nur Spieler-Objekte aufnehmen soll, sind dort keine Strings, Flummis und Friseurläden erwünscht &#8211; der Basistyp <span class="clisting">Object</span> kann das nicht verhindern. So werden im Folgenden zwei Elemente in die Liste eingefügt; ein erwünschtes und ein unerwünschtes.</p>
<div class="listing"><pre class="prettyprint">List players = new ArrayList();
Player laraFarm = new Player();
players.<span class="cfett">add( laraFarm )</span>;
players.<span class="cfett">add( "ätsch" )</span>;</pre></div>
<p>Der Fehler fällt beim Einfügen nicht auf, doch bei der Wiederholung der Daten und anschließender Typanpassung folgt die gefürchtete <span class="clisting">ClassCastException</span>.</p>
<div class="listing"><pre class="prettyprint">Player p1 =<span class="cfett"> (Player)</span> players.get( 0 );  //    OK
Player p2 =<span class="cfett"> (Player)</span> players.get( 1 );  // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> BUM!</pre></div>
<h4 class="t4">Generics in der Collection-API</h4>
<p>Seit Java 5 macht die Collection-API massiv Gebrauch von Generics. Das fällt unter anderem dadurch auf, dass die API-Dokumentation einen parametrisierten Typ erwähnt und gerade nicht <span class="clisting">add(Object e)</span> bei der <span class="clisting">Collection</span> steht, sondern <span class="clisting">add(E e)</span>. Generics gewährleisten bessere Typsicherheit, da nur spezielle Objekte in die Datenstruktur kommen. Mit den Generics lässt sich bei der Konstruktion einer Collection-Datenstruktur angeben, welche Typen zum Beispiel in der Datenstruktur-Liste erlaubt sind. In unserem Beispiel wird die Spielerliste <span class="clisting">players</span> deklariert als:</p>
<div class="listing"><pre class="prettyprint">List<span class="cfett">&lt;Player&gt;</span> players = new ArrayList<span class="cfett">&lt;Player&gt;</span>();</pre></div>
<p>So lässt die Liste nur den Typ <span class="clisting">Player</span> beim Hinzufügen und Anfragen zu, nicht aber andere Typen, wie etwa Zeichenketten. Das ist zum einen eine schöne Sicherheit für den Programmierer, hat aber noch einen weiteren Vorteil: die Typanpassungen können entfallen. Wird die Liste ohne den Typ <span class="clisting">Player</span> angelegt, muss für den Zugriff auf das erste Element die explizite Typanpassung von <span class="clisting">Object</span> auf <span class="clisting">Player</span> eingesetzt werden. Mit den Generics kann diese Anpassung entfallen, und es wird kurz:</p>
<div class="listing"><pre class="prettyprint">Player laraFarm = players.get( 0 );</pre></div>
<h4 class="t4">Geschachtelte Generics</h4>
<p>Eine Liste von Strings deklariert <span class="clisting">List&lt;String&gt;</span>. Um eine verkettete Liste aufzubauen, deren Elemente wiederum Listen mit Strings sind, lassen sich die Deklarationen auch zusammenführen: [Das erinnert mich immer unangenehm an C: Ein Feld von Pointern, die auf Strukturen zeigen, die Pointer enthalten.
] </p>
<div class="listing"><pre class="prettyprint">List<span class="cfett">&lt;List&lt;String&gt;&gt;</span> las = new LinkedList<span class="cfett">&lt;List&lt;String&gt;&gt;</span>();</pre></div><a id="mje5050a5669fd9b4900809aa4e1d34308" name="mje5050a5669fd9b4900809aa4e1d34308"></a><a name="t39"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t310"></a><h3 class="t3"><span class="cfett">13.1.9</span> Die Schnittstelle »Iterable« und das erweiterte »for«  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t39"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Das erweiterte <span class="clisting">for</span> erwartet rechts vom Doppelpunkt den Typ <span class="clisting">java.lang.Iterable</span>, um durch die Datenmenge laufen zu können. Praktisch ist, dass alle <span class="clisting">java.util.Collection</span>-Klassen die Schnittstelle <span class="clisting">Iterable</span> implementieren, denn damit kann das erweiterte <span class="clisting">for</span> leicht über diverse Sammlungen laufen.</p>
<p>Von der Datenstruktur nutzt das erweiterte <span class="clisting">for</span> den konkreten generischen Typ, etwa <span class="clisting">String</span>, sodass wir schreiben können:</p>
<div class="listing"><pre class="prettyprint">Collection<span class="cfett">&lt;String&gt;</span> c = new LinkedList<span class="cfett">&lt;String&gt;</span>();
for (<span class="cfett"> String</span> s : c )
  System.out.println( s );</pre></div>
<p>Ist die Sammlung nicht typisiert, wird die lokale Variable vom erweiterten <span class="clisting">for</span> nicht den Typ <span class="clisting">String</span> bekommen können, sondern nur <span class="clisting">Object</span>. Falls keine Typisierung für die Datenstruktur verwendet wurde, muss danach eine Typanpassung im Inneren der Schleife vorgenommen werden:</p>
<p class="tabunter"><strong>Listing 13.3    </strong>com/tutego/insel/util/IterableCollection.java, main()</p>
<div class="listing"><pre class="prettyprint">Collection c = new LinkedList();
for ( String s : "1 2 3 4 5".split(" ") )
  c.add( s );<span class="cfett">
for ( Object elem : c )</span>
  System.out.println( (<span class="cfett">(</span><span class="cfett">String)elem</span>).length() );</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Ist die Datenstruktur <span class="clisting">null</span>, so führt das zu einer <span class="clisting">NullPointerExcpetion</span>:</p>
<div class="listing"><pre class="prettyprint">Collection&lt;String&gt; <span class="cfett">list = null</span>;
for ( String s : <span class="cfett">list</span> )      // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> <span class="clisting">NullPointerExcpetion zur Laufzeit</span></pre></div>
<p class="BStandard">Es wäre interessant, wenn Java dann die Schleife überspringen würde, aber der Grund für die Ausnahme ist, dass die Realisierung vom erweiteren <span class="clisting">for</span> versucht, eine Methode vom <span class="clisting">Iterable</span> aufzurufen, was natürlich bei <span class="clisting">null</span> schiefgeht. Bei Feldern gilt übrigens das Gleiche, auch wenn hier keine Methode aufgerufen wird.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="13 Datenstrukturen und Algorithmen"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_12_007.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_13_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
