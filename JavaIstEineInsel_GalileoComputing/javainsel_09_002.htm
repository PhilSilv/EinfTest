<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 9.2 Wrapper-Klassen und Autoboxing</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 9.2 Wrapper-Klassen und Autoboxing">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 9.2 Wrapper-Klassen und Autoboxing">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_09_001.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_09_003.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137" class="navnav">9 Besondere Klassen der Java SE</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_09_001.htm#mj3ddd02b9666d4fc340fdb6405a0f3616" class="navnav">9.1 Vergleichen von Objekten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_001.htm#mj8a85f5b5aeb1bcd90175fc9455224490" class="navnav">9.1.1 Natürlich geordnet oder nicht?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_001.htm#mj0ed1876a49727c1dc4a281f6818e3a95" class="navnav">9.1.2 Die Schnittstelle Comparable</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_001.htm#mjb229dd3e0c549bc7bf8a2503fbedb9dd" class="navnav">9.1.3 Die Schnittstelle Comparator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_001.htm#mj550f9cf0302921bc2da7e5671447de14" class="navnav">9.1.4 Rückgabewerte kodieren die Ordnung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mje37d90c12874f9ae2898ef61d7f21c97" class="navh">9.2 Wrapper-Klassen und Autoboxing</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjbe1449b7ae820f093f6d98929e07cf8d" class="navh">9.2.1 Wrapper-Objekte erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjfcc9ccd6b164cb6389e2daa620ee7b42" class="navh">9.2.2 Konvertierungen in eine String-Repräsentation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj987a90501851c20bcde7822857b7ab14" class="navh">9.2.3 Die Basisklasse Number für numerische Wrapper-Objekte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjecf5de0c4d43d2ba0f83dfce865d017e" class="navh">9.2.4 Vergleiche durchführen mit »compare()«, »compareTo()« und »equals()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj28ea7d603270b0dd47fceea971440d70" class="navh">9.2.5 Die Klasse Integer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjee10d7cf5077c4f7a00dafb1b58385f6" class="navh">9.2.6 Die Klassen Double und Float für Fließkommazahlen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj3d6f4811d493a0b54aeda9ef7213c8cf" class="navh">9.2.7 Die Boolean-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj9aaef31dce82a3daebaeb79ea69bfab2" class="navh">9.2.8 Autoboxing: Boxing und Unboxing</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_09_003.htm#mj2d86e66e54287fd3a7216ef0e9e70a3c" class="navnav">9.3 Object ist die Mutter aller Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_003.htm#mj23d2063caef590e4f07f8dea2ba81ebf" class="navnav">9.3.1 Klassenobjekte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_003.htm#mjb955c41594d5085cbcc3db2dca6507a1" class="navnav">9.3.2 Objektidentifikation mit »toString()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_003.htm#mj4c33787451c2460c2eb18623b08278d9" class="navnav">9.3.3 Objektgleichheit mit »equals()« und Identität</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_003.htm#mjf4272fd243c9ca882397f284661c5aad" class="navnav">9.3.4 Klonen eines Objekts mit »clone()« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_003.htm#mj7fe8f3d9fd296c97017de07898eebccc" class="navnav">9.3.5 Hashcodes über »hashCode()« liefern *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_003.htm#mj719f4e662e9ffafee33ad5d59fdc0dbb" class="navnav">9.3.6 Aufräumen mit »finalize()« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_003.htm#mjaa2ddfc2bae3f5cf4c8a3427a2ed1555" class="navnav">9.3.7 Synchronisation *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_09_004.htm#mj2f6d324dfd3b9293fe6312045c460ad3" class="navnav">9.4 Die Spezial-Oberklasse Enum</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_004.htm#mjb51623ea831884c57b143981630b06fb" class="navnav">9.4.1 Methoden auf Enum-Objekten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_004.htm#mj83148487d9d7e07f7a117a0a6b4be8c5" class="navnav">9.4.2 »Enum« mit eigenen Konstruktoren und Methoden *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_09_005.htm#mjaedac022d8feb8adeb6b664e81d2e969" class="navnav">9.5 Erweitertes »for« und »Iterable«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_005.htm#mjfc718ed8a1956898dc6f70e8ed9ca1ad" class="navnav">9.5.1 Die Schnittstelle »Iterable«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_09_005.htm#mj71228677e0dcf9d6abaa2b5a84e78c15" class="navnav">9.5.2 Einen eigenen Iterable implementieren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_09_006.htm#mj9a703099ff8a171b1423262b0e4a6d45" class="navnav">9.6 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mje37d90c12874f9ae2898ef61d7f21c97" name="mje37d90c12874f9ae2898ef61d7f21c97"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">9.2</span> Wrapper-Klassen und Autoboxing  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Die Klassenbibliothek bietet für jeden primitiven Datentyp wie <span class="clisting">int</span>, <span class="clisting">double</span>, <span class="clisting">char</span> spezielle Klassen an. Diese so genannten <span class="ckursiv">Wrapper-Klassen</span> (auch <span class="ckursiv">Ummantelungsklassen</span>, <span class="ckursiv">Mantelklassen</span> oder <span class="ckursiv">Envelope Classes</span> genannt) erfüllen zwei wichtige Aufgaben:</p>
<ul class="gp">
<li>Wrapper-Klassen bieten statische Hilfsmethoden zur Konvertierung eines primitiven Datentyps in einen String (Formatierung) und vom String zurück in einen primitiven Datentyp (Parsen).</li>
</ul>
<ul class="gp">
<li>Die Datenstrukturen wie Listen und Mengen, die in Java Verwendung finden, können nur Referenzen aufnehmen. So stellt sich das Problem, wie primitive Datentypen diesen Containern hinzugefügt werden können. Wrapper-Objekte kapseln einen einfachen primitiven Wert in einem Objekt, sodass eine Referenz existiert, die etwa in einer vorgefertigten Datenstruktur gespeichert werden kann.</li>
</ul>
<p>Es existieren Wrapper-Klassen zu allen primitiven Datentypen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 9.1    </strong>Wrapper-Klassen und primitive Datentypen</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Wrapper-Klasse</span>
</td>
<td class="tabellenkopf"><span class="cfett">Primitiver Typ</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Byte</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">byte</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Short</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">short</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Integer</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Long</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">long</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Double</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">double</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Float</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">float</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Boolean</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">boolean</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Character</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">char</span></p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Für <span class="clisting">void</span>, das kein Datentyp ist, existiert die Klasse <span class="clisting">Void</span>. Sie deklariert nur die Konstante <span class="clisting">TYPE</span> vom Typ <span class="clisting">Class&lt;Void&gt;</span> und ist für Reflection (das Auslesen von Eigenschaften einer Klasse) interessanter.</p>
</td>
</tr>
</table><br><p>In diesem Abschnitt wollen wir uns zunächst um das Erzeugen von Wrapper-Objekten kümmern, dann um Methoden, die in allen Wrapper-Klassen vorkommen und schließlich die individuellen Methoden der einzelnen Wrapper-Klassen vorstellen. Der Klasse <span class="clisting">Character</span> haben wir uns schon zu Beginn von Kapitel 4, »Der Umgang mit Zeichenketten«, gewidmet, als es um Zeichen und Zeichenketten ging.</p>
<div class="bildbox">
<p><a name="IDAHSYD"></a><a onClick="OpenWin('bilder/VererbungshierarchieWrapperKlassen.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinVererbungshierarchieWrapperKlassen.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><a id="mjbe1449b7ae820f093f6d98929e07cf8d" name="mjbe1449b7ae820f093f6d98929e07cf8d"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">9.2.1</span> Wrapper-Objekte erzeugen  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wrapper-Objekte lassen sich auf drei Arten aufbauen:</p>
<ul class="gp">
<li>über statische <span class="clisting">valueOf()</span>-Methoden, denen ein primitiver Ausdruck oder ein String übergeben wird</li>
</ul>
<ul class="gp">
<li>über Boxing: Aus einem primitiven Wert erzeugt der Compiler automatisch <span class="clisting">valueOf()</span>-Methodenaufrufe, die das Wrapper-Objekt liefern.</li>
</ul>
<ul class="gp">
<li>über Konstruktoren der Wrapper-Klassen</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Erzeuge einige Wrapper-Objekte:</p>
<div class="listing"><pre class="prettyprint">Integer  int1 = <span class="cfett">Integer.valueOf(</span> "<span class="cfett">30" )</span>;  // valueOf()
Long     lng1 = <span class="cfett">Long.valueOf( 0xC0B0L )</span>;  // valueOf()
Integer  int2 = <span class="cfett">new Integer( 29 )</span>;        // Konstruktor
Long     lng2 = <span class="cfett">new Long( 0xC0B0L )</span>;      // Konstruktor
Double   dobl = <span class="cfett">new Double( 12.3 )</span>;       // Konstruktor
Boolean  bool = true;                     // Boxing
Integer  int3 = 42;                       // Boxing</pre></div>
</td>
</tr>
</table><br><p>Nun gibt es also drei Möglichkeiten, an Wrapper-Objekte zu kommen. Ganz selbstverständlich stellt sich die Frage, ob es eine bevorzugte Variante gibt. Boxing ist vom Schreibaufwand her gesehen die kürzeste und im Allgemeinen die beste, weil kompakteste Variante. Boxing ist allerdings nicht ganz unproblematisch, und daher wird den Problemen ein eigener Abschnitt gewidmet. Da Boxing auf die <span class="clisting">valueOf()</span>-Methoden zugreift, sind die beiden Varianten semantisch identisch und unterscheiden sich nur im Programmcode, aber nicht im Bytecode. Uns bleibt daher die Lösung »Konstruktor versus <span class="clisting">valueOf()</span>«. Eine statische Methode zum Erzeugen von Objekten einzusetzen ist clever, da anders als ein Konstruktor eine statische Methode Objekte nicht immer neu erzeugen muss, sondern auch auf vorkonstruierte Objekte zurückgreifen kann. Und das ist genau das, was <span class="clisting">valueOf()</span> bei den drei Klassen <span class="clisting">Byte</span>, <span class="clisting">Short</span>, <span class="clisting">Integer</span> und <span class="clisting">Long</span> macht: Stammen die Ganzzahlen aus dem Wertebereich &#8211;128 bis +127, so greift <span class="clisting">valueOf()</span> auf vorbereitete Objekte aus einem Cache zurück. Das Ganze klappt natürlich nur, weil Aufrufer von <span class="clisting">valueOf()</span> ein unveränderliches (engl. <span class="ckursiv">immutable</span>) Objekt bekommen &#8211; ein Wrapper-Objekt kann nach dem Aufbau nicht verändert werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>In der Wrapper-Klasse <span class="clisting">Integer</span> gibt es drei statische überladene Methoden <span class="clisting">getInteger(String)</span>, <span class="clisting">getInteger(String, int)</span>, <span class="clisting">getInteger(String, Integer)</span>, die von Sprach-einsteigern wegen der gleichen Rückgabe und Parameter schnell mit der <span class="clisting">valueOf(String)</span>-Methode verwechselt werden können. Allerdings lesen die <span class="clisting">getInteger(String)</span>-Methoden eine Umgebungsvariable aus, und haben somit eine völlig andere Aufgabe als <span class="clisting">value-Of(String)</span>. In der Wrapper-Klasse <span class="clisting">Boolean</span> gibt es mit <span class="clisting">getBoolean(String)</span> Vergleichbares. Die anderen Wrapper-Klassen haben keine Methoden zum Auslesen einer Umgebungsvariable.</p>
</td>
</tr>
</table><br><h4 class="t4">Wrapper-Objekte sind »immutable«</h4>
<p>Ist ein Wrapper-Objekt erst einmal erzeugt, lässt sich der im Wrapper-Objekt gespeicherte Wert nachträglich nicht mehr verändern. Um dies auch wirklich sicherzustellen, sind die konkreten Wrapper-Klassen allesamt final. Die Wrapper-Klassen sind nur als Ummantelung und nicht als vollständiger Datentyp gedacht. Da sich der Wert nicht mehr ändern lässt (er ist immutable), heißen Objekte mit dieser Eigenschaft auch <span class="ckursiv">Werte-Objekte</span>. Wollen wir den Inhalt eines <span class="clisting">Integer</span>-Objekts <span class="clisting">io</span> zum Beispiel um eins erhöhen, so müssen wir ein neues Objekt aufbauen:</p>
<div class="listing"><pre class="prettyprint">int i = 12;
Integer io = Integer.valueOf( i );<span class="cfett">
io = Integer.valueOf( io.intValue() + 1 );</span>
i = io.intValue();</pre></div>
<p>Die Variable <span class="clisting">io</span> referenziert nun ein zweites <span class="clisting">Integer</span>-Objekt, und der Wert vom ersten         <span class="clisting">io</span>-Objekt mit <span class="clisting">12</span> bleibt unangetastet.</p><a id="mjfcc9ccd6b164cb6389e2daa620ee7b42" name="mjfcc9ccd6b164cb6389e2daa620ee7b42"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">9.2.2</span> Konvertierungen in eine String-Repräsentation  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Alle Wrapper-Klassen bieten statische <span class="clisting">toString(value)</span>-Methoden zur Konvertierung des primitiven Elements in einen String an:</p>
<p class="tabunter"><strong>Listing 9.4    </strong>com/tutego/insel/wrapper/WrapperToString.java, main()</p>
<div class="listing"><pre class="prettyprint">String s1 =<span class="cfett"> Integer.toString</span>( 1234567891 ),
       s2 =<span class="cfett"> Long.toString</span>( 123456789123L ),
       s3 =<span class="cfett"> Float.toString</span>( 12.345678912f ),
       s4 =<span class="cfett"> Double.toString</span>( 12.345678912 ),
       s5 =<span class="cfett"> Boolean.toString</span>( true );
System.out.println( s1 );  // 1234567891
System.out.println( s2 );  // 123456789123
System.out.println( s3 );  // 12.345679
System.out.println( s4 );  // 12.345678912
System.out.println( s5 );  // true</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Ein Java-Idiom [Es ist wiederum ein JavaScript-Idiom, mit dem Ausdruck <span class="clisting">s &#8211; 0</span> aus einem String eine Zahl zu machen, wenn denn die Variable <span class="clisting">s</span> eine String-Repräsentation einer Zahl ist.] zur Konvertierung ist auch folgende Anweisung:</p>
<div class="listing"><pre class="prettyprint">String s = "" + number;</pre></div>
</td>
</tr>
</table><br><p>Der String erscheint immer in der englisch geschriebenen Variante. So steht bei den Dezimalzahlen ein Punkt statt des uns vertrauten Kommas.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Bei der Darstellung von Zahlen ist eine landestypische (länderspezifische) Formatierung sinnvoll. Das kann <span class="clisting">printf()</span> leisten:</p>
<div class="listing"><pre class="prettyprint">System.out.printf( "%f", 1000000. );     // 1000000,000000
System.out.printf( "%f", 1234.567 );     // 1234,567000
System.out.printf( "%,.3f", 1234.567 );  // 1.234,567</pre></div>
<p class="BStandard">Der Formatspezifizierer für Fließkommazahlen ist <span class="clisting">%f</span>. Die zusätzliche Angabe mit <span class="clisting">,.3f</span> im letzten Fall führt zum Tausenderpunkt und zu drei Nachkommastellen.</p>
</td>
</tr>
</table><br><h4 class="t4">toString() als Objekt- und Klassenmethode</h4>
<p>Liegt ein Wrapper-Objekt vor, so liefert die Objektmethode <span class="clisting">toString()</span> die String-Repräsentation des Wertes, den das Wrapper-Objekt speichert. Dass es gleichlautende statische Methoden <span class="clisting">toString()</span> und eine Objektmethode <span class="clisting">toString()</span> gibt, sollte uns nicht verwirren; während die Klassenmethode den Arbeitswert zur Konvertierung aus dem Argument zieht, nutzt die Objektmethode den gespeicherten Wert im Wrapper-Objekt.</p>
<p>Anweisungen, die ausschließlich zum Konvertieren über das Wrapper-Objekt gehen, wie <span class="clisting">new Integer(v).toString()</span>, lassen sich problemlos umschreiben in <span class="clisting">Integer</span>.<span class="clisting">toString(v)</span>. Zudem bietet sich auch die überladene statische Methode <span class="clisting">String.valueOf(v)</span> an, die für alle möglichen Datentypen deklariert ist (doch nutzt <span class="clisting">valueOf(v)</span> intern auch nur <span class="clisting">WrapperKlasse.toString(v)</span>).</p><a id="mj987a90501851c20bcde7822857b7ab14" name="mj987a90501851c20bcde7822857b7ab14"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">9.2.3</span> Die Basisklasse Number für numerische Wrapper-Objekte  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Alle numerischen Wrapper-Klassen können den gespeicherten Wert in einem beliebigen anderen numerischen Typ liefern. Die Methodennamen setzen sich &#8211; wie zum Beispiel <span class="clisting">doubleValue()</span> und <span class="clisting">intValue()</span> &#8211; aus dem Namen des gewünschten Typs und <span class="clisting">Value</span> zusammen. Technisch gesehen überschreiben die Wrapper-Klassen <span class="clisting">Byte</span>, <span class="clisting">Short</span>, <span class="clisting">Integer</span>, <span class="clisting">Long</span>, <span class="clisting">Float</span> und <span class="clisting">Double</span> aus einer Klasse <span class="clisting">Number</span> [Zusätzlich erweitern <span class="clisting">BigDecimal</span> und <span class="clisting">BigInteger</span> die Klasse <span class="clisting">Number</span> und haben damit ebenfalls die <span class="clisting">xxxValue()</span>-Methoden. In Java 5 kamen <span class="clisting">AtomicInteger</span> und <span class="clisting">AtomicLong</span> hinzu, die aber nicht immutable sind, wie die anderen Klassen.
]  die <span class="clisting">xxxValue()</span>-Methoden [Nur die Methoden <span class="clisting">byteValue()</span> und <span class="clisting">shortValue()</span> sind nicht abstrakt und müssen nicht überschrieben werden. Diese Methoden rufen <span class="clisting">intValue()</span> auf und konvertieren den Wert über eine Typanpassung auf <span class="clisting">byte</span> und <span class="clisting">short</span>.
] .</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.lang.<span class="cfett">Number</span>
implements Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">byte byteValue()</span>
Liefert den Wert der Zahl als <span class="clisting">byte</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract double doubleValue()</span>
Liefert den Wert der Zahl als <span class="clisting">double</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract float floatValue()</span>
Liefert den Wert der Zahl als <span class="clisting">float</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract int intValue()</span>
Liefert den Wert der Zahl als <span class="clisting">int</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract long longValue()</span>
Liefert den Wert der Zahl als <span class="clisting">long</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">short shortValue()</span>
Liefert den Wert der Zahl als <span class="clisting">short</span>.</li>
</ul>
<div class="bildbox">
<p><a name="IDAW3YD"></a><a onClick="OpenWin('bilder/numberuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinnumberuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Wenn die Operandentypen beim Bedingungsoperator unterschiedlich sind, gibt es ganz automatisch eine Anpassung:</p>
<div class="listing"><pre class="prettyprint">boolean b = true;
System.out.println(  b ? 1 : 0.1 );  // 1.0
System.out.println( !b ? 1 : 0.1 );  // 0.1</pre></div>
<p class="BStandard">Der Ergebnistyp ist <span class="clisting">double</span>, sodass die Ganzzahl 1 als 1.0, also als Fließkommazahl, ausgegeben wird. Die gleiche Anpassung nimmt der Compiler bei Wrapper-Typen vor, die er unboxt und konvertiert:</p>
<div class="listing"><pre class="prettyprint">Integer i = 1;
Double  d = 0.1;
System.out.println(  b ? i : d );   // 1.0
System.out.println( !b ? i : d );   // 0.1</pre></div>
<p class="BStandard">Während diese Ausgabe eigentlich klar ist, kann es zu einem Missverständnis kommen, wenn das Ergebnis nicht einfach ausgegeben, sondern als Verweis auf das resultierende Wrapper-Objekt zwischengespeichert wird. Da der Typ im Beispiel entweder <span class="clisting">Integer</span> oder <span class="clisting">Double</span> ist, kann der Ergebnistyp nur der Obertyp <span class="clisting">Number</span> sein:</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">Number n1 = b ? i : d;
System.out.println( n1 );           // 1.0
System.out.println( n1 == i );      // false</pre></div>
<p class="BStandard">Die Programmlogik und Ausgabe ist natürlich genauso wie vorher, doch Entwickler könnten annehmen, dass der Compiler keine Konvertierung durchführt, sondern entweder das originale <span class="clisting">Integer</span>- oder das <span class="clisting">Double</span>-Objekt referenziert; das macht er aber nicht. Die Variable <span class="clisting">n1</span> referenziert hier ein <span class="clisting">Integer</span>-ungeboxtes-<span class="clisting">double</span>-konvertiertes-<span class="clisting">Double</span>-geboxtes Objekt, und so sind die Referenzen von <span class="clisting">i</span> und <span class="clisting">n2</span> überhaupt nicht identisch. Wenn der Compiler hier wirklich die Originalobjekte zurückliefern soll, muss entweder das <span class="clisting">Integer</span>- oder das <span class="clisting">Double</span>-Objekt explizit auf <span class="clisting">Number</span> gebracht werden, sodass damit das Unboxing ausgeschaltet wird und der Bedingungsoperator nur noch von beliebigen nicht zu interpretierenden Referenzen ausgeht:</p>
<div class="listing"><pre class="prettyprint">Number n2 = b ? (Number) i : d; // oder Number n2 = b ? i : (Number) d;
System.out.println( n2 );           //
System.out.println( n2 == i );      // true</pre></div>
</td>
</tr>
</table><br><a id="mjecf5de0c4d43d2ba0f83dfce865d017e" name="mjecf5de0c4d43d2ba0f83dfce865d017e"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">9.2.4</span> Vergleiche durchführen mit »compare()«, »compareTo()« 
und »equals()«  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Haben wir zwei Ganzzahlen 1 und 2 vor uns, so ist es trivial, zu sagen, dass 1 kleiner als 2 ist. Bei Fließkommazahlen ist das ein wenig komplizierter, da es hier »Sonderzahlen« wie Unendlich oder eine negative beziehungsweise positive 0 gibt. Da insbesondere Vergleichsalgorithmen die Beantwortung der Frage, ob zwei Werte <span class="clisting">a</span> und <span class="clisting">b</span> kleiner, größer oder gleich sind, erwarten, gibt es zwei Typen von Methoden in den Wrapper-Klassen:</p>
<ul class="gp">
<li>Sie implementieren eine Objektmethode <span class="clisting">compareTo()</span>. Die Methode ist nicht zufällig in der Klasse, denn Wrapper-Klassen implementieren die Schnittstelle <span class="clisting">Comparable</span> (wir haben die Schnittstelle schon am Anfang des Kapitels kurz vorgestellt).</li>
</ul>
<ul class="gp">
<li>Wrapper-Klassen besitzen statische <span class="clisting">compare()</span>-Methoden.</li>
</ul>
<p>Die Rückgabe der Methoden ist ein <span class="clisting">int</span>, und es kodiert, ob ein Wert größer, kleiner oder gleich ist.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Teste verschiedene Werte:</p>
<div class="listing"><pre class="prettyprint">System.out.println( <span class="cfett">Integer.compare(1, 2)</span> );        // &#8211;1
System.out.println( <span class="cfett">Integer.compare(1, 1)</span> );        //
System.out.println( <span class="cfett">Integer.compare(2, 1)</span> );        //

System.out.println( <span class="cfett">Double.compare(2.0, 2.1)</span> );     // &#8211;1
System.out.println( <span class="cfett">Double.compare(Double.NaN, 0)</span> );//

System.out.println( <span class="cfett">Boolean.compare(true, false)</span> ); //
System.out.println( <span class="cfett">Boolean.compare(false, true)</span> ); // &#8211;1</pre></div>
<p class="BStandard">Ein <span class="clisting">true</span> ist »größer« als ein <span class="clisting">false</span>.</p>
</td>
</tr>
</table><br><p>Tabelle 9.2 fasst die Methoden der Wrapper-Klassen zusammen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 9.2    </strong>Methoden der Wrapper-Klassen</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Klasse</span>
</td>
<td class="tabellenkopf"><span class="cfett">Methode aus Comparable</span>
</td>
<td class="tabellenkopf"><span class="cfett">Statische Methode »compare()«</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Byte</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compareTo(Byte anotherByte)</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compare(int x, int y)</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Short</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compareTo(Short anotherShort)</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compare(short x, short y)</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Float</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compareTo(Float anotherFloat)</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compare(float f1, float f2)</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Double</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compareTo(Double anotherDouble)</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compare(double d1, double d2)</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Integer</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compareTo(Integer anotherInteger)</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compare(int x, int y)</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Long</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compareTo(Long anotherLong)</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compare(long x, long y)</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Character</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compareTo(Character anotherCharacter)</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compare(char x, char y)</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">Boolean</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compareTo(Boolean b)</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">int compare(boolean x, boolean y)</span></p>
</td>
</tr>
</table><br><p>Die Implementierung einer statischen Methode <span class="clisting">WrapperKlasse.compare()</span> ist äquivalent zu <span class="clisting">WrapperKlasse.valueOf(x).compareTo(WrapperKlasse.valueOf(y))</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Nur die genannten Wrapper-Klassen besitzen eine statische <span class="clisting">compare()</span>-Methode. Es ist kein allgemeingültiges Muster, dass, wenn eine Klasse <span class="clisting">Number</span> erweitert und <span class="clisting">Comparable</span> implementiert, sie dann auch eine statische <span class="clisting">compare()</span>-Methode hat. So erweitern zum Beispiel die Klassen <span class="clisting">BigInteger</span> und <span class="clisting">BigDecimal</span> die Oberklasse <span class="clisting">Number</span> und implementieren <span class="clisting">Comparable</span>, aber eine statische <span class="clisting">compare()</span>-Methode bieten sie trotzdem nicht.</p>
</td>
</tr>
</table><br><h4 class="t4">Gleichheitstest über »equals()«</h4>
<p>Alle Wrapper-Klassen überschreiben aus der Basisklasse <span class="clisting">Object</span> die Methode <span class="clisting">equals()</span>. So lässt sich testen, ob zwei Wrapper-Objekte den gleichen Wert haben, auch wenn die Wrapper-Objekte nicht identisch sind.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Die Ergebnisse einiger Gleichheitstests:</p>
<div class="listing"><pre class="prettyprint"><span class="clisting">Boolean.TRUE.equals( Boolean.TRUE ) true
Integer.valueOf( 1 ).equals( Integer.valueOf( 1 ) ) true
Integer.valueOf( 1 ).equals( Integer.valueOf( 2 ) ) false
Integer.valueOf( 1 ).equals( Long.valueOf( 1 ) ) false
Integer.valueOf( 1 ).equals( 1L ) false</span></pre></div>
<p class="BStandard">Es ist wichtig, zu wissen, dass der Parametertyp von <span class="clisting">equals()</span> immer <span class="clisting">Object</span> ist, aber die Typen gleich sein müssen, da andernfalls schon automatisch der Vergleich falsch ergibt. Das zeigen das vorletzte und das letzte Beispiel. Die <span class="clisting">equals()</span>-Methode aus Zeile 3 und 4 lehnt jeden Vergleich mit einem nicht-<span class="clisting">Integer</span> ab, und ein <span class="clisting">Long</span> ist eben kein <span class="clisting">Integer</span>. In der letzten Zeile kommt Boxing zum Einsatz, daher sieht der Programmcode kürzer aus, aber entspricht dem aus der vorletzten Zeile.</p>
</td>
</tr>
</table><br><p>Die Objektmethode <span class="clisting">equals()</span> der Wrapper-Klassen ist auch eine kurze Alternative zu <span class="clisting">wrapperObject.compareTo(anotherWrapperObjekt) == 0</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Ausblick   </span>Dass die Wrapper-Klassen <span class="clisting">equals()</span> implementieren, ist gut, denn so können Wrapper-Objekte problemlos in Datenstrukturen wie einer <span class="clisting">ArrayList</span> untergebracht und wieder gefunden werden. Und dass Wrapper-Objekte auch <span class="clisting">Comparable</span> sind, ist ebenfalls prima für Datenstrukturen wie <span class="clisting">TreeSet</span>, die &#8211; ohne extern gegebene <span class="clisting">Comparator</span>-Klassen für Vergleiche &#8211; eine natürliche Ordnung der Elemente erwarten.</p>
</td>
</tr>
</table><br><a id="mj28ea7d603270b0dd47fceea971440d70" name="mj28ea7d603270b0dd47fceea971440d70"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">9.2.5</span> Die Klasse Integer  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klasse <span class="clisting">Integer</span> kapselt den Wert einer Ganzzahl vom Typ <span class="clisting">int</span> in einem Objekt und bietet Konstanten statische Methoden zur Konvertierung in einen String und zurück sowie weitere Hilfsmethoden mathematischer Natur an.</p>
<div class="bildbox">
<p><a name="IDACLZD"></a><a onClick="OpenWin('bilder/integeruml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinintegeruml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Um aus dem String eine Zahl zu machen, nutzen wir <span class="clisting">Integer.parseInt(String)</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Konvertiere die Ganzzahl 38.317, die als String vorliegt, in eine Ganzzahl:</p>
<div class="listing"><pre class="prettyprint">String number = "38317";
int integer = 0;
try
{
  integer = <span class="cfett">Integer.parseInt( number )</span>;
}
catch ( NumberFormatException
{
  System.err.println( "Fehler beim Konvertieren von " + number );
}
System.out.println( integer );</pre></div>
<p class="BStandard">Die <span class="clisting">NumberFormatException</span> ist eine nicht-geprüfte Exception &#8211; mehr zu Ausnahmen in Kapitel 6, »Exceptions« &#8211;, muss also nicht zwingend in einem <span class="clisting">try-catch</span>-Block stehen.</p>
</td>
</tr>
</table><br><p>Die statische <span class="clisting">Integer.parseInt(String)</span> konvertiert einen String in <span class="clisting">int</span> und die Umkehrmethode <span class="clisting">Interger.toString(int)</span> liefert einen <span class="clisting">String</span>. Weitere Varianten mit unterschiedlicher Basis wurden schon in Abschnitt 4.3, »Konvertieren zwischen Primitiven und Strings«, vorgestellt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.<span class="cfett">Integer</span>
extends Number
implements Comparable&lt;Integer&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static int parseInt( String s )</span>
Erzeugt aus der Zeichenkette die entsprechende Zahl. Die Basis ist 10.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static int parseInt( String s, int radix )</span>
Erzeugt die Zahl mit der gegebenen Basis.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static String toString( int i )</span>
Konvertiert die Ganzzahl in einen String und liefert sie zurück.</li>
</ul>
<p><span class="clisting">parseInt()</span> erlaubt keine länderspezifischen Tausendertrennzeichen, etwa in Deutschland den Punkt oder im angelsächsischen das Komma.</p><a id="mjee10d7cf5077c4f7a00dafb1b58385f6" name="mjee10d7cf5077c4f7a00dafb1b58385f6"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">9.2.6</span> Die Klassen Double und Float für Fließkommazahlen  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klassen <span class="clisting">Double</span> und <span class="clisting">Float</span> haben wie die anderen Wrapper-Klassen eine Doppelfunktionalität. Sie kapseln zum einen eine Fließkommazahl als Objekt und bieten statische Utility-Methoden. Wir kommen in Kapitel 12, »Bits und Bytes und Mathematisches«, noch genauer auf die mathebezogenen Objekt- und Klassenmethoden zurück.</p>
<div class="bildbox">
<p><a name="IDA5NZD"></a><a onClick="OpenWin('bilder/doublefloatuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleindoublefloatuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><a id="mj3d6f4811d493a0b54aeda9ef7213c8cf" name="mj3d6f4811d493a0b54aeda9ef7213c8cf"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">9.2.7</span> Die Boolean-Klasse  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klasse <span class="clisting">Boolean</span> kapselt den Datentyp <span class="clisting">boolean</span>. Sie deklariert als Konstanten zwei <span class="clisting">Boolean</span>-Objekte: <span class="clisting">TRUE</span> und <span class="clisting">FALSE</span>.</p>
<div class="bildbox">
<p><a name="IDA2OZD"></a><a onClick="OpenWin('bilder/booleanuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinbooleanuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.<span class="cfett">Boolean</span>
implements Serializable, Comparable&lt;Boolean&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static final Boolean FALSE
static final Boolean TRUE</span>
Konstanten für Wahrheitswerte.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Boolean( boolean value )</span>
Erzeugt ein neues <span class="clisting">Boolean</span>-Objekt. Dieser Konstruktor sollte nicht verwendet werden, stattdessen sollten <span class="clisting">Boolean.TRUE</span> oder <span class="clisting">Boolean.FALSE</span> eingesetzt werden. <span class="clisting">Boolean</span>-Objekte sind immutable, und ein <span class="clisting">new Boolean(value)</span> ist unnötig.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Boolean( String s )</span>
Parst den String und liefert ein neues <span class="clisting">Boolean</span>-Objekt zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static Boolean valueOf( String s )</span>
Parst den String und gibt die Wrapper-Typen <span class="clisting">Boolean.TRUE</span> oder <span class="clisting">Boolean.FALSE</span> zurück. Die statische Methode hat gegenüber dem Konstruktor <span class="clisting">Boolean(boolean)</span> den Vorteil, dass sie immer das gleiche immutable Wahr- oder Falsch-Objekt (<span class="clisting">Boolean.TRUE</span> oder <span class="clisting">Boolean.FALSE</span>) zurückgibt, anstatt neue Objekte zu erzeugen. Daher ist es selten nötig, den Konstruktor aufzurufen und immer neue <span class="clisting">Boolean</span>-Objekte aufzubauen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">public static boolean parseBoolean( String s )</span>
Parst den String und liefert entweder <span class="clisting">true</span> oder <span class="clisting">false</span>.</li>
</ul>
<p>Der Konstruktor <span class="clisting">Boolean(String name)</span> beziehungsweise die beiden statischen Methoden <span class="clisting">valueOf(String name)</span> und <span class="clisting">parseBoolean(String name)</span> nehmen Strings entgegen und führen im JDK den Test <span class="clisting">name != null &amp;&amp; name.equalsIgnoreCase("true")</span> durch. Das heißt zum einen, dass die Groß-/Kleinschreibung unwichtig ist, und zum anderen, dass Dinge wie » false « (mit Leerzeichen), »falsch« oder »Ostereier« automatisch <span class="clisting">false</span> ergeben, wobei »TRUE« oder »True« dann <span class="clisting">true</span> liefert.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Würde jeder Entwickler ausschließlich die Konstanten <span class="clisting">Boolean.TRUE</span> und <span class="clisting">Bool-ean.FALSE</span> nutzen, so wären bei lediglich zwei Objekten Vergleiche mit <span class="clisting">==</span> beziehungsweise <span class="clisting">!=</span> in Ordnung. Da es aber einen Konstruktor für <span class="clisting">Boolean</span>-Objekte gibt &#8211; und es ist durchaus diskussionswürdig, warum es überhaupt Konstruktoren für Wrapper-Klassen gibt &#8211;, ist die sicherste Variante ein <span class="clisting">boolean1.equals(boolean2)</span>. Wir können eben nicht wissen, ob eine Bibliotheksmethode wie <span class="clisting">Boolean isNice()</span> auf die zwei Konstanten zurückgreift oder immer wieder neue <span class="clisting">Boolean</span>-Objekte aufbaut.</p>
</td>
</tr>
</table><br><a id="mj9aaef31dce82a3daebaeb79ea69bfab2" name="mj9aaef31dce82a3daebaeb79ea69bfab2"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">9.2.8</span> Autoboxing: Boxing und Unboxing  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Neu seit Java 5 ist das <span class="ckursiv">Autoboxing</span>. Dies bedeutet, dass primitive Datentypen und Wrapper-Objekte bei Bedarf ineinander umgewandelt werden. Ein Beispiel:</p>
<div class="listing"><pre class="prettyprint">int     i = 4711;
Integer j = i;               // steht für  j = Integer.valueOf(i)    (1)
int     k = j;               // steht für  k = j.intValue()          (2)</pre></div>
<p>Die Anweisung in <span class="clisting">(1)</span> nennt sich <span class="ckursiv">Boxing</span> und erstellt automatisch ein Wrapper-Objekt, sofern erforderlich. Schreibweise <span class="clisting">(2)</span> ist das <span class="ckursiv">Unboxing</span> und steht für das Beziehen des Elements aus dem Wrapper-Objekt. Das bedeutet, überall dort, wo der Compiler ein primitives Element erwartet, aber ein Wrapper-Objekt vorhanden ist, entnimmt er den Wert mit einer passenden <span class="clisting">xxxValue()</span>-Methode dem Wrapper.</p>
<div class="bildbox">
<p><a name="IDAGTZD"></a><a onClick="OpenWin('bilder/Boxing.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinBoxing.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 9.1    </strong>Autoboxing von int/Integer</p>
<h4 class="t4">Die Operatoren ++, -- *</h4>
<p>Der Compiler konvertiert nach festen Regeln, und auch die Operatoren <span class="clisting">++</span>, <span class="clisting">--</span> sind erlaubt:</p>
<div class="listing"><pre class="prettyprint">Integer i = 12;
i = i + 1;                   // (1)
i++;                         // (2)
System.out.println( i );     // 14</pre></div>
<p>Wichtig ist, dass weder <span class="clisting">(1)</span> noch <span class="clisting">(2)</span> das Original-<span class="clisting">Integer</span>-Objekt mit der <span class="clisting">12</span> ändern (alle Wrapper-Objekte sind immutable), sondern <span class="clisting">i</span> nur andere Integer-Objekte für 13 und 14 referenziert.</p>
<h4 class="t4">Boxing für dynamische Datenstrukturen (Ausblick)</h4>
<p>Am angenehmsten ist die Schreibweise dann, wenn etwa in Datenstrukturen primitive Elemente abgelegt werden sollen:</p>
<div class="listing"><pre class="prettyprint">List list = new ArrayList();
list.add( Math.sin(Math.PI / 4) );</pre></div>
<p>Allerdings warnt der Compiler hier; er wünscht sich eine typisierte Liste, also:</p>
<div class="listing"><pre class="prettyprint">List<span class="cfett">&lt;Double&gt;</span> list = new ArrayList<span class="cfett">&lt;Double&gt;</span>();</pre></div>
<p>Leider ist es so, dass der Typ der Liste tatsächlich mit dem Wrapper-Typ <span class="clisting">Double</span> festgelegt werden muss und nicht mit dem Primitivtyp <span class="clisting">double</span>. Aber vielleicht ändert sich das ja noch irgendwann …</p>
<h4 class="t4">Keine Konvertierung »null« zu »0«</h4>
<p>Beim Unboxing führt der Compiler beziehungsweise die Laufzeitumgebung keine Konvertierung von <span class="clisting">null</span> auf 0 durch. Mit anderen Worten: Bei der folgenden versuchten Zuweisung gibt es keinen Compilerfehler, aber zur Laufzeit eine <span class="clisting">NullPointerException</span>:</p>
<div class="listing"><pre class="prettyprint">int n = (Integer) null;          // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> java.lang.NullPointerException zur Laufzeit</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>In <span class="clisting">switch</span>-Blöcken sind <span class="clisting">int</span>, Aufzählungen und Strings als Typen erlaubt. Bei Ganzzahlen führt der Compiler automatisch Konvertierungen und Unboxing auf <span class="clisting">int</span> durch. Beim Unboxing gibt es aber die Gefahr einer <span class="clisting">NullPointerException</span>:</p>
<div class="listing"><pre class="prettyprint">Integer integer = null;
switch ( integer )  // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> NullPointerException zur Laufzeit
{ }</pre></div>
</td>
</tr>
</table><br><h4 class="t4">Autoboxing bei Feldern?</h4>
<p>Da primitive Datentypen und Wrapper-Objekte durch Autoboxing automatisch konvertiert werden, fällt im Alltag der Unterschied nicht so auf. Bei Feldern ist der Unterschied jedoch augenfällig, und hier kann Java keine automatische Konvertierung durchführen. Denn auch, wenn zum Beispiel <span class="clisting">char</span> und <span class="clisting">Character</span> automatisch ineinander umgewandelt werden, so sind Arrays nicht konvertierbar. Eine Feldinitialisierung der Art</p>
<div class="listing"><pre class="prettyprint">Character[] chars = { 'S', 'h', 'a' };</pre></div>
<p>enthält zwar rechts dreimal Boxing von <span class="clisting">char</span> in <span class="clisting">Character</span>, und eine automatische Umwandlung auf der Ebene der Elemente ist gültig, sodass</p>
<div class="listing"><pre class="prettyprint">char first = chars[ 0 ];</pre></div>
<p>natürlich gilt, aber die Feld-Objekte lassen sich nicht ineinander überführen. Folgendes ist nicht korrekt:</p>
<div class="listing"><pre class="prettyprint">char[] sha = chars;   // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> Compilerfehler!</pre></div>
<p>Es sind <span class="clisting">char[]</span> und <span class="clisting">Character[]</span>, also zwei völlig unterschiedliche Typen, und eine Überführung ist nicht möglich (von den Problemen mit <span class="clisting">null</span>-Referenzen einmal ganz abgesehen). So muss in der Praxis zwischen den unterschiedlichen Typen konvertiert werden und bedauerlicherweise bietet die Java-Standardbibliothek hierfür keine API. Die Lücke wird zum Beispiel gefüllt durch die Open-Source Bibliothek <span class="ckursiv">Apache Commons Lang</span> (http://commons.apache     .org/lang/) mit der Klasse <span class="clisting">ArrayUtils</span>, die mit <span class="clisting">toObject()</span> und <span class="clisting">toPrimitive()</span> die Konvertierungen durchführt.</p>
<h4 class="t4">Mehr Probleme als Lösungen? *</h4>
<p>Mit dem Autoboxing ist eine Reihe von Unregelmäßigkeiten verbunden, die der Programmierer beachten muss, um Fehler zu vermeiden. Eine davon hängt mit dem Unboxing zusammen, das der Compiler immer dann vornimmt, wenn ein Ausdruck einen primitiven Wert erwartet. Wenn kein primitives Element erwartet wird, wird auch kein Unboxing vorgenommen:</p>
<p class="tabunter"><strong>Listing 9.5    </strong>com/tutego/insel/wrapper/Autoboxing.java, main() Teil 1</p>
<div class="listing"><pre class="prettyprint">Integer i1 = new Integer( 1 );
Integer i2 = new Integer( 1 );

System.out.println( i1 &gt;= i2 );   // true
System.out.println( i1 &lt;= i2 );   // true
System.out.println( i1 == i2 );   // false</pre></div>
<p>Der Vergleich mit <span class="clisting">==</span> ist weiterhin ein Referenzvergleich, und es findet kein Unboxing auf primitive Werte statt, sodass es auf einen Vergleich von primitiven Werten hinausliefe. Daher muss bei zwei unterschiedlichen <span class="clisting">Integer</span>-Objekten dieser Vergleich immer falsch sein. Das ist natürlich problematisch, da die alte mathematische Regel »aus i &lt;= j und i &gt;= j folgt automatisch i == j« nicht mehr gilt. Wenn es die unterschiedlichen <span class="clisting">Integer</span>-Objekte für gleiche Werte nicht gäbe, bestünde dieses Problem nicht.</p>
<p>Es ist interessant, zu wissen, was nun genau passiert, wenn das Boxing eine Zahl in ein Wrapper-Objekt umwandelt. In dem Moment wird nicht der Konstruktor aufgerufen, sondern die statische <span class="clisting">valueOf()</span>-Methode:</p>
<p class="tabunter"><strong>Listing 9.6    </strong>com/tutego/insel/wrapper/Autoboxing.java, main() Teil 2</p>
<div class="listing"><pre class="prettyprint">Integer n1 = new Integer( 10 );
Integer n2 = Integer.valueOf( 10 );
Integer n3 = 10;
Integer n4 = 10;
System.out.println( n1 == n2 );   // false
System.out.println( n2 == n3 );   // true
System.out.println( n1 == n3 );   // false
System.out.println( n3 == n4 );   // true</pre></div>
<p>Die Widersprüche hören aber damit nicht auf. Das JDK versucht das Problem mit dem <span class="clisting">==</span> damit zu lösen, dass über Boxing gebildete <span class="clisting">Integer</span>-Objekte einem Pool entstammen. Da jedoch nicht beliebig viele Wrapper-Objekte aus einem Pool kommen können, gilt die Gleichheit der über Boxing gebildeten Objekte nur in einem ausgewählten Wertebereich zwischen &#8211;128 und +127, also dem Wertebereich eines Bytes:</p>
<p class="tabunter"><strong>Listing 9.7    </strong>com/tutego/insel/wrapper/Autoboxing.java, main() Teil 3</p>
<div class="listing"><pre class="prettyprint">Integer j1 = 2;
Integer j2 = 2;
System.out.println( j1 == j2 );   // true
Integer k1 = 127;
Integer k2 = 127;
System.out.println( k1 == k2 );   // true
Integer l1 = 128;
Integer l2 = 128;
System.out.println( l1 == l2 );   // false
Integer m1 = 1000;
Integer m2 = 1000;
System.out.println( m1 == m2 );   // false</pre></div>
<p>Wir betonten bereits, dass auch bei Wrapper-Objekten der Vergleich mit <span class="clisting">==</span> immer ein Referenz-Vergleich ist. Da 2 und 127 im Wertebereich zwischen &#8211;128 und +127 liegen, entstammen die entsprechenden <span class="clisting">Integer</span>-Objekte dem Pool. Das gilt für 128 und 1.000 nicht; sie sind immer neue Objekte. Damit ergibt auch der <span class="clisting">==</span>-Vergleich <span class="clisting">false</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Abschlussfrage   </span>Welche Ausgabe kommt auf den Bildschirm? Ändert sich etwas, wenn <span class="clisting">i</span> und <span class="clisting">j</span> auf 222 stehen?</p>
<div class="listing"><pre class="prettyprint">Integer i = 1, j = 1;
boolean b = (i &lt;= j &amp;&amp; j &lt;= i &amp;&amp; i != j);
System.out.println( b );</pre></div>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="9.2 Wrapper-Klassen und Autoboxing"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_09_001.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_09_003.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
