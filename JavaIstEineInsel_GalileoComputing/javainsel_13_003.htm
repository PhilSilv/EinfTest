<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 13.3 Listen</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 13.3 Listen">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 13.3 Listen">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_13_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_13_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b" class="navnav">13 Datenstrukturen und Algorithmen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_001.htm#mj6ccdb9587d160efa70d8ec6e341ed18d" class="navnav">13.1 Datenstrukturen und die Collection-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj1f6e6f95ae58be78d8c7c33d5ec49eb9" class="navnav">13.1.1 Designprinzip mit Schnittstellen, abstrakten und konkreten Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj93c1c1e6b86c74945bc9929e635b50ed" class="navnav">13.1.2 Die Basis-Schnittstellen Collection und Map</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj7a79efaff3ac0ccbf8d02255a3aaeb21" class="navnav">13.1.3 Das erste Programm mit Container-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj2026369214f78e117bc4014be1b17b42" class="navnav">13.1.4 Die Schnittstelle Collection und Kernkonzepte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj09ef8eba4417ef39ea4188a48e2b4fe7" class="navnav">13.1.5 Schnittstellen, die Collection erweitern, und Map</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj8a76d089e7c9ff06b5403c9e8cb0dbd5" class="navnav">13.1.6 Konkrete Container-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj20c3f4b9802e0f1a9aee25c67327fe8c" class="navnav">13.1.7 Welche Container-Klasse nehmen?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj4eefaa341178c745bfceae42501036bb" class="navnav">13.1.8 Generische Datentypen in der Collection-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mje5050a5669fd9b4900809aa4e1d34308" class="navnav">13.1.9 Die Schnittstelle »Iterable« und das erweiterte »for«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_002.htm#mj6a20dd38f9c93abb1c32b6f2f56357af" class="navnav">13.2 Mit einem Iterator durch die Daten wandern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mj45b286662ec7b5715ef9c802f6c3513a" class="navnav">13.2.1 Die Schnittstellen Enumeration und Iterator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mja7762290bb6067a0fbd05b8f3464f59d" class="navnav">13.2.2 Iteratoren von Sammlungen und das erweiterte »for«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mj30dd8d057bfa61a6525e9269b03019c0" class="navnav">13.2.3 Fail-Fast-Iterator und die ConcurrentModificationException</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjf4178c97cb04d7bdd4be130334579516" class="navh">13.3 Listen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj924ffbfcb5de21fdf1a47f32930e42ce" class="navh">13.3.1 Auswahlkriterium ArrayList oder LinkedList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja4d1641a6292a2df6e31df7304ee0c9b" class="navh">13.3.2 Die Schnittstelle List</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj63d4129737eb19c28d378dc37e103df2" class="navh">13.3.3 ListIterator *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj10f6167ad1bdfb44e9b980a4a744a0c0" class="navh">13.3.4 ArrayList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj6144fdfaf67c663736500be97c6834aa" class="navh">13.3.5 LinkedList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj28bdf78da3eae580db1861dbf88c91e3" class="navh">13.3.6 Der Feld-Adapter »Arrays.asList()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj1f8103e31724ff7e2fceb8bcb60aa67d" class="navh">13.3.7 »toArray()« von Collection verstehen &#8211; die Gefahr einer Falle erkennen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja85bfc5d8a94f925335e5488e8a3e81c" class="navh">13.3.8 Primitive Elemente in den Collection-Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_004.htm#mje7632b0de42c17693defeebd48736c7f" class="navnav">13.4 Datenstrukturen mit Ordnung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj71f45ecb57e5f607156239ebc8ee1c86" class="navnav">13.4.1 Algorithmen mit Such- und Sortiermöglichkeiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj7a8c8fc5d6d143c1438c20607bff376f" class="navnav">13.4.2 Den größten und kleinsten Wert einer Collection finden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj7a4c4509ffe85c1968d541492369c412" class="navnav">13.4.3 Sortieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_005.htm#mj45263b87fd44c62f2cde668164897a93" class="navnav">13.5 Mengen (Sets)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj3aa70559d61c305035645bb81b8d2469" class="navnav">13.5.1 HashSet</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj5eea6a1f66c7382900fdecd6e5865d3b" class="navnav">13.5.2 TreeSet &#8211; die Menge durch Bäume</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj41ba16b6b9fd82b4ea19fa31e73fe365" class="navnav">13.5.3 LinkedHashSet</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_006.htm#mje2d6ca56ec06f93d3b2c8a18b73fde6e" class="navnav">13.6 Stack (Kellerspeicher, Stapel)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_006.htm#mj99b21bfdc1d5b5e12b826848170d6fc6" class="navnav">13.6.1 Die Methoden von »Stack«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_006.htm#mj0c9a4bc09c3ca7bb4407a33d4270d2b4" class="navnav">13.6.2 Ein »Stack« ist ein »Vector« &#8211; aha!</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_007.htm#mj0cdc7b3eb6a6b4dcdd7ac41f265dad03" class="navnav">13.7 Queues (Schlangen) und Deques</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mj490b2d33f4c96d064299bf581dd127af" class="navnav">13.7.1 Die Schnittstelle »Queue«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mjea3134c093b3ea42696ef5d64da7fe21" class="navnav">13.7.2 Blockierende Queues und Prioritätswarteschlangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mj716e961cbb2ed8dabc4e62745bf8907a" class="navnav">13.7.3 »Deque«-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_008.htm#mj836f3979bc516dee7023f5bc030ad627" class="navnav">13.8 Assoziative Speicher</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj6251e23375a9e2c3e729ddc747e1f2ed" class="navnav">13.8.1 Die Klassen »HashMap« und »TreeMap«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj748c34d0cdfc13971e9638ab713d6eff" class="navnav">13.8.2 Einfügen und Abfragen der Datenstruktur</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj3dc1756cf378db77cc9c38a682281404" class="navnav">13.8.3 Über die Bedeutung von »equals()«, »hashCode()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mje58b19cabdd91545346c9160bbf456fa" class="navnav">13.8.4 IdentityHashMap</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj4c0fb480d9f5dca8b0ac98ca26a8c0c3" class="navnav">13.8.5 Das Problem von veränderten Elementen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj03374baa89cf87ef02349f703180bd14" class="navnav">13.8.6 Aufzählungen und Ansichten des Assoziativspeichers</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj02c989d784a59defc8cb239a494d2b42" class="navnav">13.8.7 Der Gleichheitstest, Hash-Wert und Klon einer Hash-Tabelle*</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj5260d04d10949c0ec2c9122090ea613a" class="navnav">13.8.8 Die Arbeitsweise einer Hash-Tabelle *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_009.htm#mj3caf7868aebd71a657cac5c47c87cec9" class="navnav">13.9 Die Properties-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj182eaee2a4ca8f8b458ab3d60d50537c" class="navnav">13.9.1 Properties setzen und lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj24463d6c9d1783930fb460cb62ff3921" class="navnav">13.9.2 Properties verketten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj604807f32ff53197c8b3667285c5f39c" class="navnav">13.9.3 Hierarchische Eigenschaften</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj72243719024672251cb31a808440771d" class="navnav">13.9.4 Eigenschaften ausgeben *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mjf8ebe35d4f4fd0199f37e99984e7f732" class="navnav">13.9.5 Properties laden und speichern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_010.htm#mj31b29f3f7c1152bc2f6997ab29af14b7" class="navnav">13.10 Algorithmen in Collections</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mjf5b4df2039dbfb4fc4e44f5e4ee93747" class="navnav">13.10.1 Nicht-änderbare Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mj7b5e23e879a8b82fc7967e3134b020a7" class="navnav">13.10.2 Null Object Pattern und leere Sammlungen zurückgeben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mjc40940722b422ff38ddc02f6e4f223a8" class="navnav">13.10.3 Mit der Halbierungssuche nach Elementen fahnden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mj71789a9023a966258b7e3c417cc967c4" class="navnav">13.10.4 Ersetzen, Kopieren, Füllen, Umdrehen, Rotieren, Durchmischen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mj0ef664400e5bb7afaf45f07bc99fb342" class="navnav">13.10.5 Häufigkeit eines Elements *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mjb2c1c49f74f26c58e17bfca0a558f725" class="navnav">13.10.6 nCopies() *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_010.htm#mj87b606bd070a3fe065d9e3235aa42215" class="navnav">13.10.7 Singletons *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_011.htm#mj0ff161e9620174964e86be55a40f1eff" class="navnav">13.11 Synchronisation der Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mjb7c8b7760ff21e6e5bb0ad40f4f29968" class="navnav">13.11.1 Lock-free-Algorithmen aus java.util.concurrent</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mjf1ac096770848daaaf781e0d6c15b8a0" class="navnav">13.11.2 Wrapper zur Synchronisation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mj587b04b2fa3737ce40a9118e27d1f818" class="navnav">13.11.3 »CopyOnWriteArrayList« und »CopyOnWriteArraySet«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_012.htm#mjbfcd83b3541482d2f9c2c4faee3b7013" class="navnav">13.12 Die Klasse »BitSet« für Bitmengen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mje31079a72ad10f37120efe1808f08c38" class="navnav">13.12.1 Ein »BitSet« anlegen, füllen und erfragen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjebe1a504ea1a65bd97894c79caae5b6f" class="navnav">13.12.2 Mengenorientierte Operationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjf275d8829b6e2f0bc03919159b7b96a8" class="navnav">13.12.3 Methodenübersicht</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjb5daec6a05d52b553339ade302571692" class="navnav">13.12.4 Primzahlen in einem BitSet verwalten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_013.htm#mjc65ac117dfc6f17596056e9184d73038" class="navnav">13.13 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjf4178c97cb04d7bdd4be130334579516" name="mjf4178c97cb04d7bdd4be130334579516"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">13.3</span> Listen  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Eine Liste steht für eine Sequenz von Daten, bei der die Elemente eine feste Reihenfolge besitzen. Die Schnittstelle <span class="clisting">java.util.List</span> schreibt Verhalten vor, die alle konkreten Listen im-plementieren müssen. Interessante Realisierungen der <span class="clisting">List</span>-Schnittstelle sind:</p>
<ul class="gp">
<li><span class="clisting">java.util.ArrayList</span>: Liste auf der Basis eines Feldes</li>
</ul>
<ul class="gp">
<li><span class="clisting">java.util.Vector</span>: synchronisierte Liste seit Java 1.0, die der <span class="clisting">ArrayList</span> wich</li>
</ul>
<ul class="gp">
<li><span class="clisting">java.util.LinkedList</span>: Liste durch verkettete Elemente</li>
</ul>
<ul class="gp">
<li><span class="clisting">java.util.concurrent.CopyOnWriteArrayList</span>: schnelle Liste, optimal für häufige nebenläufige Lesezugriffe</li>
</ul>
<p>Die Methoden zum Zugriff über die gemeinsame Schnittstelle <span class="clisting">List</span> sind immer die gleichen. So ermöglicht jede Liste einen Punktzugriff über <span class="clisting">get(index)</span>, und jede Liste kann alle gespeicherten Elemente sequenziell über einen Iterator geben. Doch die Realisierungen einer Liste unterscheiden sich in Eigenschaften wie der Performance, dem Speicherplatzbedarf oder der Möglichkeit der sicheren Nebenläufigkeit.</p>
<p>Da in allen Datenstrukturen jedes Exemplar einer von <span class="clisting">Object</span> abgeleiteten Klasse Platz findet, sind die Listen grundsätzlich nicht auf bestimmte Datentypen fixiert, doch Generics spezifizieren diese Typen genauer.</p><a id="mj924ffbfcb5de21fdf1a47f32930e42ce" name="mj924ffbfcb5de21fdf1a47f32930e42ce"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">13.3.1</span> Auswahlkriterium ArrayList oder LinkedList  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine <span class="clisting">ArrayList</span> (das Gleiche gilt für <span class="clisting">Vector</span>) speichert Elemente in einem internen Array. <span class="clisting">LinkedList</span> dagegen speichert die Elemente in einer verketteten Liste und realisiert die Verkettung mit einem eigenen Hilfsobjekt für jedes Listenelement. Es ergeben sich Einsatzgebiete, die einmal für <span class="clisting">LinkedList</span> und einmal für <span class="clisting">ArrayList</span> sprechen:</p>
<ul class="gp">
<li>Da <span class="clisting">ArrayList</span> intern ein Array benutzt, ist der Zugriff auf ein spezielles Element über die Position in der Liste sehr schnell. Eine <span class="clisting">LinkedList</span> muss aufwändiger durchsucht werden, und dies kostet Zeit.</li>
</ul>
<ul class="gp">
<li>Die verkettete Liste ist aber deutlich im Vorteil, wenn Elemente mitten in der Liste gelöscht oder eingefügt werden; hier muss einfach nur die Verkettung der Hilfsobjekte an einer Stelle verändert werden. Bei einer <span class="clisting">ArrayList</span> bedeutet dies viel Arbeit, es sei denn, das Element kann am Ende gelöscht oder &#8211; bei ausreichender Puffergröße &#8211; eingefügt werden. Soll ein Element nicht am Ende eingefügt oder gelöscht werden, müssen alle nachfolgenden Listenelemente verschoben werden.</li>
</ul>
<ul class="gp">
<li>Bei einer <span class="clisting">ArrayList</span> kann die Größe des internen Feldes zu klein werden. Dann bleibt der Laufzeitumgebung nichts anderes übrig, als ein neues, größeres Feld-Objekt anzulegen und alle Elemente zu kopieren.</li>
</ul><a id="mja4d1641a6292a2df6e31df7304ee0c9b" name="mja4d1641a6292a2df6e31df7304ee0c9b"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">13.3.2</span> Die Schnittstelle List  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Schnittstelle <span class="clisting">List</span> schreibt das allgemeine Verhalten für Listen vor. Viele Methoden kennen wir schon vom <span class="clisting">Collection</span>-Interface, und zwar deshalb, weil <span class="clisting">List</span> die Schnittstelle <span class="clisting">Collection</span> erweitert. Hinzugekommen sind Methoden, die einen Bezug zur Position eines Elements haben &#8211; Mengen, die auch <span class="clisting">Collection</span> implementieren, kennen keinen Index.</p>
<p>Die <span class="clisting">add()</span>-Methode fügt neue Elemente an die Liste an, wobei eine Position die Einfügestellen bestimmen kann. Die Methode <span class="clisting">addAll()</span> fügt fremde Elemente einer anderen Sammlung in die Liste ein. <span class="clisting">set()</span> setzt ein Element an eine bestimmte Stelle und überschreibt das ursprüngliche Element und verschiebt es auch nicht wie <span class="clisting">add()</span>. Die Methode <span class="clisting">size()</span> nennt die Anzahl der Elemente in der Datenstruktur:</p>
<p class="tabunter"><strong>Listing 13.7    </strong>com/tutego/insel/util/list/ListDemo.java. main()</p>
<div class="listing"><pre class="prettyprint">List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();
list1.<span class="cfett">add</span>( "Eva" );
list1.<span class="cfett">add</span>( 0, "Charisma" );
list1.<span class="cfett">add</span>( "Pallas" );

List&lt;String&gt; list2 = Arrays.asList( "Tina", "Wilhelmine" );
list1.<span class="cfett">addAll</span>( 3, list2 );
list1.<span class="cfett">add</span>( "XXX" );
list1.<span class="cfett">set</span>( 5, "Eva" );

System.out.println( list1 );        // [Charisma, Eva, Pallas, Tina, <img src="common/umbruch.gif" border="0" alt="Umbruch">
                                    // Wilhelmine, Eva]
System.out.println( list1.<span class="cfett">size</span>() ); // 6</pre></div>
<p>Ob die Sammlung leer ist, bestimmt <span class="clisting">isEmtpy()</span>. Ein Element an einer speziellen Stelle erfragen kann <span class="clisting">get()</span>. Ob Elemente Teil der Sammlung sind, beantworten <span class="clisting">contains()</span> und <span class="clisting">containsAll()</span>. Wie bei Strings liefern <span class="clisting">indexOf()</span> und <span class="clisting">lastIndexOf()</span> die Fundpositionen:</p>
<div class="listing"><pre class="prettyprint">boolean b = list1.<span class="cfett">contains</span>( "Tina" );
System.out.println( b );            // true

b = list1.<span class="cfett">containsAll</span>( Arrays.asList( "Tina", "Eva" ) );
System.out.println( b );            // true

Object o = list1.<span class="cfett">get</span>( 1 );
System.out.println( o );            // Eva

int i = list1.<span class="cfett">indexOf</span>( "Eva" );
System.out.println( i );            // 1

i = list1.<span class="cfett">lastIndexOf</span>( "Eva" );
System.out.println( i );            // 5

System.out.println( list1.isEmpty() ); // false</pre></div>
<p>Von den Listen können Arrays abgeleitet werden und sich Schnittmengen bilden lassen:</p>
<div class="listing"><pre class="prettyprint">String[] array = list1.<span class="cfett">toArray</span>( new String[]{} );
System.out.println( array[3] );     // "Tina"

List&lt;String&gt; list3 = new LinkedList&lt;String&gt;( list1 );
System.out.println( list3 );        // [Charisma, Eva, Pallas, Tina, <img src="common/umbruch.gif" border="0" alt="Umbruch">
                                    // Wilhelmine, Eva]
list3.<span class="cfett">retainAll</span>( Arrays.asList( "Tina", "Eva" ) );
System.out.println( list3 );        // [Eva, Tina, Eva]</pre></div>
<p>Es bleiben Methoden zum Löschen von Elementen. Hier bietet die Liste eine überladene <span class="clisting">remove()</span>-Methode und <span class="clisting">removeAll()</span>. Den kürzesten Weg, alles aus der Liste zu löschen, bietet <span class="clisting">clear()</span>:</p>
<div class="listing"><pre class="prettyprint">System.out.println( list1 );     // [Charisma, Eva, Pallas, Tina, Wilhelmine, Eva]
list1.<span class="cfett">remove</span>( 1 );
System.out.println( list1 );     // [Charisma, Pallas, Tina, Wilhelmine, Eva]

list1.<span class="cfett">remove</span>( "Wilhelmine" );
System.out.println( list1 );     // [Charisma, Pallas, Tina, Eva]

list1.<span class="cfett">removeAll</span>( Arrays.asList( "Pallas", "Eva" ) );
System.out.println( list1 );     // [Charisma, Tina]

list1.<span class="cfett">clear</span>();
System.out.println( list1 );     // []</pre></div>
<div class="bildbox">
<p><a name="IDAE2WD"></a><a onClick="OpenWin('bilder/listuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinlistuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">interface java.util.<span class="cfett">List</span>&lt;E&gt;
extends Collection&lt;E&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean add( E o )</span>
Fügt das Element am Ende der Liste an. Ein optionale Operation.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void add( int index, E element )</span>
Fügt ein Objekt an der angegebenen Stelle in die Liste ein. Eine optionale Operation.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean addAll( int index, Collection&lt;? extends E&gt; c )</span>
Fügt alle Elemente der Collection an der angegebenen Stelle in die Liste ein. Eine optionale Operation.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void clear()</span>
Löscht alle Elemente aus der Liste. Eine optionale Operation.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean contains( Object o )</span>
Liefert <span class="clisting">true</span>, wenn das Element <span class="clisting">o</span> in der Liste ist. Den Vergleich übernimmt <span class="clisting">equals()</span>, und es ist kein Referenz-Vergleich.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean containsAll( Collection&lt;?&gt; c )</span>
Liefert <span class="clisting">true</span>, wenn alle Elemente der Sammlung <span class="clisting">c</span> in der aktuellen Liste sind.</li>
</ul>
<ul class="gp">
<li><span class="clisting">E get( int index )</span>
Wird das Element an dieser angegebenen Stelle der Liste liefern.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int indexOf( Object o )</span>
Liefert die Position des ersten Vorkommens für <span class="clisting">o</span> oder &#8211;1, wenn kein Listenelement mit <span class="clisting">o</span> inhaltlich &#8211; also per <span class="clisting">equals()</span> und nicht per Referenz &#8211; übereinstimmt. Leider gibt es keine Methode, um ab einer bestimmten Stelle weiterzusuchen, so wie sie die Klasse <span class="clisting">String</span> bietet. Dafür lässt sich jedoch eine Teilliste einsetzen, die <span class="clisting">subList()</span> bildet &#8211; eine Methode, die später in der Aufzählung folgt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isEmpty()</span>
Liefert <span class="clisting">true</span>, wenn die Liste leer ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Iterator&lt;E&gt; iterator()</span>
Liefert den Iterator. Die Methode ruft aber <span class="clisting">listIterator()</span> auf und gibt ein <span class="clisting">ListIterator</span>-Objekt zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int lastIndexOf( Object o )</span>
Sucht von hinten in der Liste nach dem ersten Vorkommen von <span class="clisting">o</span> und liefert &#8211;1, wenn kein Listenelement inhaltlich mit <span class="clisting">o</span> übereinstimmt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">ListIterator&lt;E&gt; listIterator()</span>
Liefert einen Listen-Iterator für die ganze Liste. Ein Listen-Iterator bietet gegenüber dem allgemeinen Iterator für Container zusätzliche Operationen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">ListIterator&lt;E&gt; listIterator( int index )</span>
Liefert einen Listen-Iterator, der die Liste ab der Position <span class="clisting">index</span> durchläuft.</li>
</ul>
<ul class="gp">
<li><span class="clisting">E remove( int index )</span>
Entfernt das Element an der Position <span class="clisting">index</span> aus der Liste.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean remove( Object o )</span>
Entfernt das erste Objekt in der Liste, das <span class="clisting">equals()</span>-gleich mit <span class="clisting">o</span> ist. Liefert <span class="clisting">true</span>, wenn ein Element entfernt wurde. Eine optionale Operation.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean removeAll( Collection&lt;?&gt; c )</span>
Löscht in der eigenen Liste die Elemente aus <span class="clisting">c</span>. Eine optionale Operation.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean retainAll( Collection&lt;?&gt; c )</span>
Optional. Entfernt alle Objekte aus der Liste, die nicht in der Collection <span class="clisting">c</span> vorkommen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">E set( int index, E element )</span>
Ersetzt das Element an der Stelle <span class="clisting">index</span> durch <span class="clisting">element</span>. Eine optionale Operation.</li>
</ul>
<ul class="gp">
<li><span class="clisting">List&lt;E&gt; subList( int fromIndex, int toIndex )</span>
Liefert den Ausschnitt dieser Liste von Position <span class="clisting">fromIndex</span> (einschließlich) bis <span class="clisting">toIndex</span> (nicht mit dabei). Die zurückgelieferte Liste stellt eine Ansicht eines Ausschnitts der Originalliste dar. Änderungen an der Teilliste wirken sich auf die ganze Liste aus und umgekehrt (soweit sie den passenden Ausschnitt betreffen).</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean equals( Object o )</span>
Vergleicht die Liste mit einer anderen Liste. Zwei Listen-Objekte sind gleich, wenn ihre Elemente paarweise gleich sind.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int hashCode()</span>
Liefert den Hashcode der Liste.</li>
</ul>
<p>Was <span class="clisting">List</span> der <span class="clisting">Collection</span> hinzufügt, sind also die Index-basierten Methoden <span class="clisting">add(int index, E element)</span>, <span class="clisting">addAll(int index, Collection&lt;? extends E&gt; c)</span>, <span class="clisting">get(int index)</span>, <span class="clisting">index-Of(Object o)</span>, <span class="clisting">lastIndexOf(Object o)</span>, <span class="clisting">listIterator()</span>, <span class="clisting">listIterator(int index)</span>, <span class="clisting">remove(int index)</span>, <span class="clisting">set(int index, E element)</span> und <span class="clisting">subList(int fromIndex, int toIndex)</span>.</p>
<h4 class="t4">Nach Elementen suchen und ihre Position ausgeben</h4>
<p>Ein zweites Beispiel zeigt die Möglichkeit von <span class="clisting">index()</span> und <span class="clisting">subList()</span>, um alle Positionen eines Elements in einer Liste zu finden. Die Code-Kompression gewinnt sicherlich keinen Preis. <span class="clisting">Arrays.asList()</span> erzeugt aus einer Aufzählung eine Liste:</p>
<p class="tabunter"><strong>Listing 13.8    </strong>com/tutego/insel/util/list/IndexOfSubList.java, main()</p>
<div class="listing"><pre class="prettyprint">List&lt;Integer&gt; list = Arrays.asList( 1, 3, 4, 1 );
Integer o = 1;

for ( int i = list.indexOf( o ), j = &#8211;1;
      i &gt; j;
      j = i, i += list.subList( i + 1, list.size() ).indexOf( o ) + 1 )
{
  System.out.println( i );
}</pre></div>
<h4 class="t4">Kopieren, Ausschneiden und Einfügen</h4>
<p>Die Listen-Klassen implementieren <span class="clisting">clone()</span> und erzeugen eine flache Kopie der Liste.</p>
<p>Um einen Bereich zu löschen, nutzen wir <span class="clisting">subList(from, to).clear()</span>. Die <span class="clisting">subList()</span>-Technik deckt gleich noch einige andere Operationen ab, für die es keine speziellen Range-Varianten gibt, zum Beispiel <span class="clisting">indexOf()</span>, also die Suche in einem Teil der Liste. Die zum Löschen naheliegende Methode <span class="clisting">removeRange(int, int)</span> kann nicht (direkt) eingesetzt werden, da sie <span class="clisting">protected [</span>In <span class="clisting">AbstractList</span> ist <span class="clisting">removeRange()</span> gültig mit einem <span class="clisting">ListIterator</span> implementiert, also nicht abstrakt. Die API-Dokumentation begründet das damit, dass <span class="clisting">removeRange()</span> nicht zur offiziellen Schnittstelle von Listen gehört, sondern für die Autoren neuer Listenimplementierungen gedacht ist.
]  ist. Das lässt sich aber schnell behebn mit:</p>
<div class="listing"><pre class="prettyprint">List list = new ArrayList() {
  @Override public void removeRange( int fromIndex, int toIndex ) {
    super.removeRange( fromIndex, toIndex );
  }
};</pre></div>
<p>Ein Beispiel zeigt den Aufbau einer Liste, die Kürzung und den Einsatz vom <span class="clisting">ListIterator</span>:</p>
<p class="tabunter"><strong>Listing 13.9    </strong>com/tutego/insel/util/list/CutCopyPasteList.java, main()</p>
<div class="listing"><pre class="prettyprint">List&lt;String&gt; list = new ArrayList&lt;String&gt;(
    Arrays.asList( "0 1 2 3 4 5 6 7 8 9".split( " " ) ));</pre></div>
<p>Mit der Anweisung erzeugen wir schnell eine Liste mit Strings von 0 bis 9. <span class="clisting">subList()</span> erzeugt wie viele andere Methoden der Collection-Datenstrukturen eine Ansicht auf die Liste, was bedeutet, Änderungen an dieser Teilliste führen zu Änderungen des Originals. So auch <span class="clisting">clear()</span>, was dazu genutzt werden kann, einen Teilbereich der Originalliste zu löschen:</p>
<div class="listing"><pre class="prettyprint">list.subList( 2, list.size() &#8211; 2 ).clear();
System.out.println( list );                   // [0, 1, 8, 9]</pre></div><a id="mj63d4129737eb19c28d378dc37e103df2" name="mj63d4129737eb19c28d378dc37e103df2"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">13.3.3</span> ListIterator *  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Schnittstelle <span class="clisting">ListIterator</span> ist eine Erweiterung von <span class="clisting">Iterator</span>. Diese Schnittstelle fügt noch Methoden hinzu, damit an der aktuellen Stelle auch Elemente eingefügt werden können. Mit einem <span class="clisting">ListIterator</span> lässt sich rückwärts laufen und auf das vorhergehende Element zugreifen:</p>
<p class="tabunter"><strong>Listing 13.10    </strong>com/tutego/insel/util/list/ListIteratorDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">List&lt;String&gt; list = new ArrayList&lt;String&gt;();
Collections.addAll( list, "b", "c", "d" );

ListIterator&lt;String&gt; it = list.listIterator();

it.add( "a" );                     // Vorne anfügen
System.out.println( list );        // [a, b, c, d]

it.next();                         // Position vor
it.remove();                       // Element löschen
System.out.println( list );        // [a, c, d]

it.next();                         // Position vor
it.set( "C" );                     // Element ersetzen
System.out.println( list );        // [a, C, d]

it = list.listIterator( 1 );       // Neuen Iterator mit Startpos. 1
it.add( "B" );                     // B hinzufügen
System.out.println( list );        // [a, B, C, d]

it = list.listIterator( list.size() );

it.previous();                     // Eine Stelle nach vorne
it.remove();                       // Und letztes Element löschen
System.out.println( list );        // [a, B, C]</pre></div>
<p>Ein <span class="clisting">ListIterator</span> kann die Elemente auch rückwärts verarbeiten:</p>
<p><div class="listing"><span class="cfett">for ( ListIterator&lt;String&gt; it = list.listIterator( list.size() ); it.hasPrevious(); )
  System.out.print( it.previous() + " " ); // 9 8 1 0</span></div></p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">interface<span class="cfett"> ListIterator</span>&lt;E&gt;
extends Iterator&lt;E&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean hasPrevious()</span>, <span class="clisting">boolean hasNext()</span>
Liefert <span class="clisting">true</span>, wenn es ein vorhergehendes/nachfolgendes Element gibt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">E previous()</span>, <span class="clisting">E next()</span>
Liefert das vorangehende/nächste Element der Liste oder <span class="clisting">NoSuchElementException</span>, wenn es das Element nicht gibt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int previousIndex()</span>, <span class="clisting">int nextIndex()</span>
Liefert den Index des vorhergehenden/nachfolgenden Elements. Geht <span class="clisting">previousIndex()</span> vor die Liste, so liefert die Methode die Rückgabe &#8211;1. Geht <span class="clisting">nextIndex()</span> hinter die Liste, liefert die Methode die Länge der gesamten Liste.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void remove()</span>
Optional. Entfernt das letzte von <span class="clisting">next()</span> oder <span class="clisting">previous()</span> zurückgegebene Element.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void add( E o )</span>
Optional. Fügt ein neues Objekt in die Liste ein.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void set( E o )</span>
Optional. Setzt das Element, das <span class="clisting">next()</span> oder <span class="clisting">previous()</span> als letztes zurückgegeben haben.</li>
</ul><a id="mj10f6167ad1bdfb44e9b980a4a744a0c0" name="mj10f6167ad1bdfb44e9b980a4a744a0c0"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">13.3.4</span> ArrayList  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Jedes Exemplar der Klasse <span class="clisting">ArrayList</span> vertritt ein Array mit variabler Länge. Der Zugriff auf die Elemente erfolgt effizient über Indizes, was <span class="clisting">ArrayList</span> über die Implementierung der Markierungsschnittstelle <span class="clisting">RandomAccess</span> andeutet.</p>
<div class="bildbox">
<p><a name="IDA2IXD"></a><a onClick="OpenWin('bilder/arraylistuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinarraylistuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<h4 class="t4">Eine ArrayList erzeugen</h4>
<p>Um ein <span class="clisting">ArrayList</span>-Objekt zu erzeugen, existieren drei Konstruktoren:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.<span class="cfett">ArrayList</span>&lt;E&gt;
extends AbstractList&lt;E&gt;
implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">ArrayList()</span>
Eine leere Liste mit einer Anfangskapazität von zehn Elementen wird angelegt. Werden mehr als zehn Elemente eingefügt, muss die Liste sich vergrößern.</li>
</ul>
<ul class="gp">
<li><span class="clisting">ArrayList( int initialCapacity )</span>
Eine Liste mit <span class="clisting">initialCapacity</span> freien Elementen wird angelegt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">ArrayList( Collection&lt;? extends E&gt; c )</span>
Kopiert alle Elemente der Collection <span class="clisting">c</span> in das neue <span class="clisting">ArrayList</span>-Objekt.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Erstelle eine Liste <span class="clisting">list</span>, und fülle die Datenstruktur mit einer Zeichenkette und einer Ganzzahl:</p>
<div class="listing"><pre class="prettyprint">List&lt;Object&gt; list = new ArrayList&lt;Object&gt;();
list.<span class="cfett">add</span>( "ICE 924 Hildegard von Bingen" );
list.<span class="cfett">add</span>( 23 );  // oder list.add(new Integer(23)) ohne Boxing</pre></div>
</td>
</tr>
</table><br><h4 class="t4">Die interne Arbeitsweise von ArrayList und Vector *</h4>
<p>Die Klassen <span class="clisting">ArrayList</span> und <span class="clisting">Vector</span> verwalten zwei Größen: zum einen die Anzahl der gespeicherten Elemente nach außen, zum anderen die interne Größe des Felds. Ist die Kapazität des Felds größer als die Anzahl der Elemente, so können noch Elemente aufgenommen werden, ohne dass die Liste etwas unternehmen muss. Die Anzahl der Elemente in der Liste, die Größe, liefert die Methode <span class="clisting">size()</span>; die Kapazität des darunterliegenden Arrays liefert <span class="clisting">capacity()</span>.</p>
<p>Die Liste vergrößert sich automatisch, falls mehr Elemente aufgenommen werden, als ursprünglich am Platz vorgesehen waren. Diese Operation heißt <span class="ckursiv">Resizing</span>. Dabei spielt die Größe <span class="clisting">initialCapacity</span> für effizientes Arbeiten eine wichtige Rolle. Sie sollte passend gewählt sein. Betrachten wir daher zunächst die Funktionsweise der Liste, falls das interne Array zu klein ist.</p>
<p>Wenn das Array zehn Elemente fasst, nun aber ein elftes eingefügt werden soll, so muss das Laufzeitsystem einen neuen Speicherbereich reservieren und jedes Element des alten Felds in das neue kopieren. Das kostet Zeit. Schon aus diesem Grund sollte der Konstruktor <span class="clisting">ArrayList(int initialCapacity)</span>/<span class="clisting">Vector(int initialCapacity)</span> gewählt werden, weil dieser eine Initialgröße festsetzt. Das Wissen über unsere Daten hilft dann der Datenstruktur. Falls kein Wert voreingestellt wurde, so werden zehn Elemente angenommen. In vielen Fällen ist dieser Wert zu klein.</p>
<p>Nun haben wir zwar darüber gesprochen, dass ein neues Feld angelegt wird und die Elemente kopiert werden, haben aber nichts über die Größe des neuen Feldes gesagt. Hier gibt es Strategien wie die »Verdopplungsmethode« beim <span class="clisting">Vector</span>. Wird er vergrößert, so ist das neue Feld doppelt so groß wie das alte. Dies ist eine Vorgehensweise, die für kleine und schnell wachsende Felder eine clevere Lösung darstellt, großen Feldern jedoch schnell zum Verhängnis werden kann. Für den Fall, dass wir die Vergrößerung selbst bestimmen wollen, nutzen wir den Konstruktor <span class="clisting">Vector(int initialCapacity, int capacityIncrement)</span>, der die Verdopplung ausschaltet und eine fixe Vergrößerung befiehlt. Die <span class="clisting">ArrayList</span> verdoppelt nicht, sie nimmt die neue Größe mal 1,5. Bei ihr gibt es leider auch nicht den <span class="clisting">capacityIncrement</span> im Konstruktor.</p>
<h4 class="t4">Die Größe eines Feldes *</h4>
<p>Die interne Größe des Arrays kann mit <span class="clisting">ensureCapacity</span><span class="clisting">()</span> geändert werden. Ein Aufruf von <span class="clisting">ensureCapacity(int minimumCapacity)</span> bewirkt, dass die Liste insgesamt mindestens <span class="clisting">minimumCapacity</span> Elemente aufnehmen kann, ohne dass ein Resizing nötig wird. Ist die aktuelle Kapazität der Liste kleiner als <span class="clisting">minimumCapacity</span>, so wird mehr Speicher angefordert. Der Vektor verkleinert die aktuelle Kapazität nicht, falls sie schon höher als <span class="clisting">minimumCapacity</span> ist. Um aber auch diese Größe zu ändern und somit ein nicht mehr wachsendes Vektor-Array so groß wie nötig zu machen, gibt es, ähnlich wie beim String mit Leerzeichen, die Methode <span class="clisting">trimToSize()</span>. Sie reduziert die Kapazität des Vektors auf die Anzahl der Elemente, die gerade in der Liste sind. Mit <span class="clisting">size()</span> lässt sich die Anzahl der Elemente in der Liste erfragen. Sie gibt die wirkliche Anzahl der Elemente zurück.</p>
<p>Bei der Klasse <span class="clisting">Vector</span> lässt sich mit <span class="clisting">setSize(int newSize)</span> auch die Größe der Liste verändern. Ist die neue Größe kleiner als die alte, werden die Elemente am Ende des Vektors abgeschnitten. Ist <span class="clisting">newSize</span> größer als die alte Größe, werden die neu angelegten Elemente mit <span class="clisting">null</span> initialisiert. [Zudem können <span class="clisting">null</span>-Referenzen ganz normal als Elemente eines Vektors auftreten, bei den anderen Datenstrukturen gibt es Einschränkungen.
]  Vorsicht ist bei <span class="clisting">newSize=0</span> geboten, denn <span class="clisting">setSize(0)</span> bewirkt das Gleiche wie <span class="clisting">removeAllElements()</span>.</p><a id="mj6144fdfaf67c663736500be97c6834aa" name="mj6144fdfaf67c663736500be97c6834aa"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">13.3.5</span> LinkedList  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klasse <span class="clisting">LinkedList</span> realisiert die Schnittstelle <span class="clisting">List</span> als verkettete Liste und bildet die Elemente nicht auf ein Feld ab. Die Implementierung realisiert die <span class="clisting">LinkedList</span> als doppelt verkettete Liste, in der jedes Element &#8211; die Ränder lassen wir außen vor &#8211; einen Vorgänger und Nachfolger hat. (Einfach verkettete Listen haben nur einen Nachfolger, was die Navigation in beide Richtungen schwierig macht.)</p>
<p>Eine <span class="clisting">LinkedList</span> hat neben den gegebenen Operationen aus der Schnittstelle <span class="clisting">List</span> weitere Hilfsmethoden: Dabei handelt es sich um die Methoden <span class="clisting">addFirst()</span>, <span class="clisting">addLast()</span>, <span class="clisting">getFirst()</span>, <span class="clisting">getLast()</span>, <span class="clisting">removeFirst()</span> und <span class="clisting">removeLast()</span>. Die implementierten Schnittstellen <span class="clisting">Queue</span> und <span class="clisting">Deque</span> sind nicht ganz unschuldig an diesen neuen Methoden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.<span class="cfett">LinkedList</span>&lt;E&gt;
extends AbstractSequentialList&lt;E&gt;
implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">LinkedList()</span>
Erzeugt eine neue leere Liste.</li>
</ul>
<ul class="gp">
<li><span class="clisting">LinkedList( Collection&lt;? extends E&gt; c )</span>
Kopiert alle Elemente der Collection <span class="clisting">c</span> in die neue verkettete Liste.</li>
</ul>
<div class="bildbox">
<p><a name="IDAZOXD"></a><a onClick="OpenWin('bilder/linkedlistuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinlinkedlistuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><a id="mj28bdf78da3eae580db1861dbf88c91e3" name="mj28bdf78da3eae580db1861dbf88c91e3"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">13.3.6</span> Der Feld-Adapter »Arrays.asList()«  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Arrays von Objektreferenzen und dynamische Datenstrukturen passen nicht so richtig zusammen, obwohl sie schon häufiger zusammen benötigt werden. Die Java-Bibliothek bietet mit der statischen Methode <span class="clisting">Arrays.asList()</span> an, ein existierendes Feld als <span class="clisting">java.util.List</span> zu behandeln. Der Parametertyp ist ein Vararg &#8211; was ja intern auf ein Feld abgebildet wird &#8211;, sodass sich <span class="clisting">asList()</span> auf zwei Arten verwenden lässt:</p>
<ul class="gp">
<li><span class="clisting">Arrays.asList(array)</span>: Die Variable <span class="clisting">array</span> ist eine Referenz auf ein Feld, und das Ergebnis ist eine Liste, die die gleichen Elemente wie das Feld enthält.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Arrays.asList(e1, e2, e3)</span>: Die Elemente <span class="clisting">e1, e2, e3</span> sind Elemente der Liste.</li>
</ul>
<p>Das Entwurfsmuster, das die Java-Bibliothek bei der statischen Methode anwendet, nennt sich <span class="ckursiv">Adapter</span>. Es löst das Problem, die Schnittstellen eines Typs auf eine andere Schnittstelle eines anderen Typs anzupassen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Wie viele <span class="clisting">Integer(1)</span>-Objekte gibt es im Feld <span class="clisting">ints</span>?</p>
<p class="tabunter"><strong>Listing 13.11    </strong>com/tutego/insel/util/list/AsListDemo.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">Integer[] ints = { 1, 2, 1, 2, 3 };<span class="cfett">
List&lt;Integer&gt; intList = Arrays.asList( ints )</span>;
System.out.println( Collections.frequency( intList, 1 ));     // 2</pre></div>
<p class="BStandard">Boxing macht sich in diesem Beispiel natürlich sehr gut.</p>
</td>
</tr>
</table><br><p>Die Rückgabe von <span class="clisting">asList()</span> ist keine bekannte Klasse wie <span class="clisting">ArrayList</span> oder <span class="clisting">LinkedList</span>, sondern irgendetwas Internes, was die Klasse <span class="clisting">Arrays</span> als <span class="clisting">java.util.List</span> herausgibt. Diese Liste ist nur eine andere Ansicht des Feldes. Modifikationsmethoden wie <span class="clisting">remove()</span> oder <span class="clisting">add()</span> führen zu einer <span class="clisting">UnsupportedOperationException</span> &#8211; im Hintergrund steht immer noch das Feld &#8211;, da kann nicht plötzlich ein Element gelöscht oder hinten angehängt werden. Listen-Methoden wie <span class="clisting">get(index)</span> oder <span class="clisting">set(index, element)</span> funktionieren aber und gehen direkt auf das Feld.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Um dennoch Elemente löschen und einfügen zu können, lässt sich die Rückgabeliste von <span class="clisting">asList()</span> in eine neue spezielle <span class="clisting">LinkedList</span> oder <span class="clisting">ArrayList</span> kopieren:</p>
<p class="tabunter"><strong>Listing 13.12    </strong>com/tutego/insel/util/list/AsListDemo.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">List&lt;String&gt; list =<span class="cfett"> new ArrayList&lt;String&gt;( Arrays.asList("Purzelchen", </span><img src="common/umbruch.gif" border="0" alt="Umbruch"><span class="cfett">
"Häschen") )</span>;
list.remove( 0 );
System.out.println( list );    // [Häschen]</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.<span class="cfett">Arrays</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">public static &lt;T&gt; List&lt;T&gt; asList( T... a )</span>
Ermöglicht mit der Schnittstelle einer Liste Zugriff auf ein Feld zu erhalten. Die variablen Argumente sind sehr praktisch.</li>
</ul><a id="mj1f8103e31724ff7e2fceb8bcb60aa67d" name="mj1f8103e31724ff7e2fceb8bcb60aa67d"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">13.3.7</span> »toArray()« von Collection verstehen &#8211; die Gefahr einer Falle erkennen  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die <span class="clisting">toArray()</span>-Methode aus der Schnittstelle <span class="clisting">Collection</span> gibt laut Definition ein Array von Objekten zurück. Es ist wichtig, zu verstehen, welchen Typ die Einträge und das Array selbst haben. Eine Implementierung der <span class="clisting">Collection</span>-Schnittstelle ist <span class="clisting">ArrayList</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Eine Anwendung von <span class="clisting">toArray()</span>, die Punkte in ein Feld kopiert:</p>
<div class="listing"><pre class="prettyprint">ArrayList&lt;Point&gt; list = new ArrayList&lt;Point&gt;();
list.add( new Point(13, 43) );
list.add( new Point(9, 4) );
Object[] points = list.<span class="cfett">toArray();</span></pre></div>
</td>
</tr>
</table><br><p>Wir erhalten nun ein Feld mit Referenzen auf <span class="clisting">Point</span>-Objekte, können jedoch zum Beispiel nicht einfach <span class="clisting">points[1].x</span> schreiben, um auf das Attribut des <span class="clisting">Point</span>-Exemplars zuzugreifen, denn das Array <span class="clisting">points</span> hat den deklarierten Elementtyp <span class="clisting">Object</span>. Es fehlt die explizite Typumwandlung, und erst <span class="clisting">((Point)points[1]).x</span> ist korrekt. Doch spontan kommen wir sicherlich auf die Idee, einfach den Typ des Arrays auf <span class="clisting">Point</span> zu ändern. In dem Array befinden sich ja nur Referenzen auf <span class="clisting">Point</span>-Exemplare:</p>
<div class="listing"><pre class="prettyprint">Point[] points = list.toArray();             // Geht nicht</pre></div>
<p>Jetzt wird der Compiler einen Fehler melden, weil der Rückgabewert von <span class="clisting">toArray()</span> ein <span class="clisting">Object[]</span> ist. Spontan reparieren wir dies, indem wir eine Typumwandlung auf ein <span class="clisting">Point</span>-Array an die rechte Seite setzen:</p>
<div class="listing"><pre class="prettyprint">Point[] points = (Point[]) list.toArray();   // Gefährlich!</pre></div>
<p>Jetzt haben wir zur Übersetzungszeit kein Problem mehr, aber zur Laufzeit wird es immer knallen, auch wenn sich im Array tatsächlich nur <span class="clisting">Point</span>-Objekte befinden.</p>
<p>Diesen Programmierfehler müssen wir verstehen. Was wir falsch gemacht haben, ist einfach: Wir haben den Typ des Arrays mit den Typen der Array-Elemente durcheinandergebracht. Einem Array von Objekt-Referenzen können wir alles zuweisen:</p>
<div class="listing"><pre class="prettyprint">Object[] os = new Object[ 3 ];
os[0] = new Point();
os[1] = "Trecker fahr&#8217;n";
os[2] = new Date();</pre></div>
<p>Wir merken, dass der Typ des Arrays <span class="clisting">Object[]</span> ist, und die Array-Elemente sind ebenfalls vom Typ <span class="clisting">Object</span>. Hinter dem <span class="clisting">new</span>-Operator, der das Array-Objekt erzeugt, steht der gemeinsame Obertyp für zulässige Array-Elemente. Bei <span class="clisting">Object[]</span>-Arrays dürfen die Elemente Referenzen für beliebige Objekte sein. Klar ist, dass ein Array nur Objektreferenzen aufnehmen kann, die mit dem Typ für das Array selbst kompatibel sind, sich also auf Exemplare der angegebenen Klasse beziehen oder auf Exemplare von Unterklassen dieser Klasse:</p>
<div class="listing"><pre class="prettyprint">/* 1 */  Object[] os = new Point[3];
/* 2 */  os[0] = new Point();
/* 3 */  os[1] = new Date();           // !!
/* 4 */  os[2] = "Trecker fahr&#8217;n";     // !!</pre></div>
<p>Zeile 3 und 4 sind vom Compiler erlaubt, führen aber zur Laufzeit zu einer <span class="clisting">ArrayStoreException</span>.</p>
<p>Kommen wir wieder zur Methode <span class="clisting">toArray()</span> zurück. Weil die auszulesende Datenstruktur alles Mögliche enthalten kann, muss der Typ der Elemente also <span class="clisting">Object</span> sein. Wir haben gerade festgestellt, dass der Elementtyp des Array-Objekts, das die Methode <span class="clisting">toArray()</span> als Ergebnis liefert, mindestens so umfassend sein muss. Da es keinen allgemeineren (umfassenderen) Typ als <span class="clisting">Object</span> gibt, ist auch der Typ des Arrays <span class="clisting">Object[]</span>. Dies muss so sein, auch wenn die Elemente einer Datenstruktur im Einzelfall einen spezielleren Typ haben. Einer allgemein gültigen Implementierung von <span class="clisting">toArray()</span> bleibt gar nichts anderes übrig, als das Array vom Typ <span class="clisting">Object[]</span> und die Elemente vom Typ <span class="clisting">Object</span> zu erzeugen:</p>
<div class="listing"><pre class="prettyprint">public Object[] toArray() {
  Object[] objs = new Object[ size() ];
  Iterator it = iterator();
  for ( int i = 0; i &lt; objs.length; i++ ) {
    objs[i] = it.next();
  }
  return objs;
}</pre></div>
<p>Wenn sich auch die Elemente wieder auf einen spezielleren Typ konvertieren lassen, ist das bei dem Array-Objekt selbst jedoch nicht der Fall. Ein Array-Objekt mit Elementen vom Typ <span class="clisting">X</span> ist nicht automatisch auch selbst vom Typ <span class="clisting">X[]</span>, sondern von einem Typ <span class="clisting">Y[]</span>, wobei <span class="clisting">Y</span> eine (echte) Oberklasse von <span class="clisting">X</span> ist.</p>
<h4 class="t4">Die Lösung für das Problem</h4>
<p>Bevor wir nun eine Schleife mit einer Typumwandlung für jedes einzelne Array-Element schreiben oder eine Typumwandlung bei jedem Zugriff auf die Elemente vornehmen, sollten wir einen Blick auf die zweite <span class="clisting">toArray()</span>-Methode werfen. Sie akzeptiert als Parameter ein vorgefertigtes Array für das Ergebnis. Mit dieser Methode lässt sich erreichen, dass das Ergebnis-Array von einem spezielleren Typ als <span class="clisting">Object[]</span> ist.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Wir fordern von der <span class="clisting">toArray()</span>-Methode ein Feld vom Typ <span class="clisting">Point</span>:</p>
<div class="listing"><pre class="prettyprint">ArrayList&lt;Point&gt; list = new ArrayList&lt;Point&gt;();
list.add( new Point(13,43) );
list.add( new Point(9,4) );
Point[] points = (Point[]) list.<span class="cfett">toArray( new Point[0] );</span></pre></div>
</td>
</tr>
</table><br><p class="BStandard">Jetzt bekommen wir die Listenelemente in ein Array kopiert, und der Typ des Arrays ist <span class="clisting">Point[]</span> &#8211; passend zu den aktuell vorhandenen Listenelementen. Der Parameter zeigt dabei den Wunschtyp an, der hier <span class="clisting">Point</span>-Feld ist.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Performance-Tipp   </span>Am besten ist bei <span class="clisting">toArray()</span> ein Feld anzugeben, was so groß ist wie das Ergebnisfeld, also so groß wie die Liste. Dann füllt nämlich <span class="clisting">toArray()</span> genau dieses Feld und gibt es zurück, anstatt ein neues Feld aufzubauen:</p>
<div class="listing"><pre class="prettyprint">ArrayList&lt;Point&gt; list = new ArrayList&lt;Point&gt;();
list.add( new Point(13,43) );
list.add( new Point(9,4) );
Point[] points = (Point[]) list.toArray(<span class="cfett"> new Point[list.length()]</span> );</pre></div>
</td>
</tr>
</table><br><h4 class="t4">Felder mit Reflection anlegen</h4>
<p>Spannend ist die Frage, wie so etwas funktionieren kann. Dazu verwendet die Methode <span class="clisting">toArray(Object[])</span> die Technik <span class="ckursiv">Reflection</span>, um dynamisch ein Array vom gleichen Typ wie das übergebene Array zu erzeugen. Wollten wir ein Array <span class="clisting">b</span> vom Typ des Arrays <span class="clisting">a</span> mit Platz für <span class="clisting">len</span> Elemente anlegen, so schreiben wir:</p>
<div class="listing"><pre class="prettyprint">Object[] b = (Object[]) Array.newInstance ( a.getClass().getComponentType(), len );</pre></div>
<p>Mit <span class="clisting">a.getClass().getComponentType()</span> erhalten wir ein <span class="clisting">Class</span>-Objekt für den Elementtyp des Arrays, zum Beispiel liefert das <span class="clisting">Class</span>-Objekt <span class="clisting">Point.class</span> für die Klasse <span class="clisting">Point</span>. <span class="clisting">a.getClass()</span> allein ein <span class="clisting">Class</span>-Objekt für das Array <span class="clisting">a</span>, etwa ein Objekt, das den Typ <span class="clisting">Point[]</span> repräsentiert. <span class="clisting">Array.newInstance()</span>, eine statische Methode von <span class="clisting">java.lang.reflect.Array</span>, konstruiert ein neues Array mit dem Elementtyp aus dem <span class="clisting">Class</span>-Objekt und der angegebenen Länge. Nichts anderes macht auch ein <span class="clisting">new X[len]</span>, nur dass hier der Elementtyp zur Übersetzungszeit festgelegt werden muss. Da der Rückgabewert von <span class="clisting">newInstance()</span> ein allgemeines <span class="clisting">Object</span> ist, muss letztendlich noch die Konvertierung in ein passendes Array stattfinden.</p>
<p>Ist das übergebene Array so groß, dass es alle Elemente der Collection aufnehmen kann, kopiert <span class="clisting">toArray()</span> die Elemente aus der Collection in das Feld. Oft wird dort aber ein <span class="clisting">new X[0]</span> anzeigen, dass wir ein neu erzeugtes Array-Objekt wünschen. Im Übrigen entspricht natürlich <span class="clisting">toArray(new Object[0])</span> dem Aufruf von <span class="clisting">toArray()</span>. Dennoch gibt die Java-Bibliothek zwei völlig getrennte Implementierungen an, da <span class="clisting">toArray()</span> einfacher und effizienter zu implementieren ist.</p><a id="mja85bfc5d8a94f925335e5488e8a3e81c" name="mja85bfc5d8a94f925335e5488e8a3e81c"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">13.3.8</span> Primitive Elemente in den Collection-Datenstrukturen  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Jede Datenstruktur der Collection-API akzeptiert, auch wenn sie generisch verwendet wird, nur Objekte. Primitive Datentypen nehmen die Sammlungen nicht auf, was zur Konsequenz hat, dass Wrapper-Objekte nötig sind (über das Boxing fügt Java 5 scheinbar primitive Elemente ein, doch in Wahrheit sind es Wrapper-Objekte).</p>
<p>Für performante Anwendungen ist es sinnvoll, eine Klasse für den speziellen Datentyp einzusetzen. Anstatt so etwas selbst zu programmieren, kann der Entwickler sich an zwei Implementierungen halten:</p>
<ul class="gp">
<li>GNU Trove (<span class="ckursiv">http://trove4j.sourceforge.net/</span>)</li>
</ul>
<ul class="gp">
<li>Apache Commons Primitives <span class="ckursiv">(http://jakarta.apache.org/commons/primitives/)</span></li>
</ul><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="13.3 Listen"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_13_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_13_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
