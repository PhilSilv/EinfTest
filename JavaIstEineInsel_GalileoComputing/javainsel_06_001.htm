<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 6 Exceptions</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 6 Exceptions">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 6 Exceptions">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_05_014.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_06_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="#mj6f6b47453043c38837bfc32154a97968" class="navh">6 Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj9321c5c3dd6211c2bb893da8e77cf78b" class="navh">6.1 Problembereiche einzäunen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj09667c19245b0a48b322fa766dd86d0d" class="navh">6.1.1 Exceptions in Java mit try und catch</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjde7dbac5833e26bcf754d8b5df90ff2b" class="navh">6.1.2 Eine NumberFormatException auffangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb4ba177b603272c04ce45ce8b078c105" class="navh">6.1.3 Ablauf einer Ausnahmesituation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb385f2001eab878b098039474440032a" class="navh">6.1.4 Eigenschaften vom Exception-Objekt</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj8c86f43f77f7e9e7da49aa21723ec73b" class="navh">6.1.5 Wiederholung abgebrochener Bereiche *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb679137556787a8e305513c7640a6533" class="navh">6.1.6 Mehrere Ausnahmen auffangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj88d8245287b37e414bfe9518756fd249" class="navh">6.1.7 throws im Methodenkopf angeben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj0dc85a359a70759100957cd4a65f780a" class="navh">6.1.8 Abschlussbehandlung mit »finally«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_002.htm#mj39419a2ef80f4e7a52181d4035bd5afd" class="navnav">6.2 Die Klassenhierarchie der Fehler</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_002.htm#mj27949c7ba7f27abac25c3c68d6e1734e" class="navnav">6.2.1 Die Exception-Hierarchie</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_002.htm#mj6c5f01922a7c2dd644f2e41c45fbd276" class="navnav">6.2.2 Oberausnahmen auffangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_002.htm#mj0855da8facac92e2171c7d625006f79e" class="navnav">6.2.3 Alles geht als Exception durch</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_002.htm#mjc3f6411421e854c640407a974a79fa01" class="navnav">6.2.4 Zusammenfassen gleicher catch-Blöcke</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_003.htm#mj496a3283e49d36b5db87d04fd0c0d202" class="navnav">6.3 RuntimeException muss nicht aufgefangen werden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_003.htm#mj04684717a910967f74a97845256fb5cd" class="navnav">6.3.1 Beispiele für RuntimeException-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_003.htm#mj1b7a4fa13a24557d845699e6356c0d8b" class="navnav">6.3.2 Kann man abfangen, muss man aber nicht</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_004.htm#mjcc9fa42c1c8327e96c824decd4eaff1d" class="navnav">6.4 Harte Fehler: Error *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_005.htm#mjb4ba9eb48ba04300bed2201fc59b0813" class="navnav">6.5 Auslösen eigener Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_005.htm#mj7ef7a73173a6a6ba4096fd12ba03c658" class="navnav">6.5.1 Mit throw Ausnahmen auslösen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_005.htm#mj7844f7fc62723087550e010a35289678" class="navnav">6.5.2 Vorhandene Runtime-Fehlertypen kennen und nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_005.htm#mj970340e01c0a8d92140b7cd36c8b6106" class="navnav">6.5.3 Parameter testen und gute Fehlermeldungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_005.htm#mjb610c4d39bab82f368ce2423966ec8a4" class="navnav">6.5.4 Neue Exception-Klassen deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_005.htm#mja12b633a5b1fcfdec6a2406acf3d6158" class="navnav">6.5.5 Eigene Ausnahmen als Unterklassen von Exception oder RuntimeException?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_005.htm#mj046b20e2dcd62774aa93d0e573c4c9b6" class="navnav">6.5.6 Abfangen und weiterleiten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_005.htm#mj7de5e280f4b3c74cdbfbfa520fe60054" class="navnav">6.5.7 Geschachtelte Ausnahmen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_006.htm#mjf23c8575d07f646967546e7dff4684f4" class="navnav">6.6 Assertions *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_006.htm#mj7551d1fca6c28b9aee7c2482c2113eaf" class="navnav">6.6.1 Assertions in eigenen Programmen nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_006.htm#mj429ac576014c4d5e98b838a728fb9aaf" class="navnav">6.6.2 Assertions aktivieren</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main">
<p class="anleser"><em>»Wir sind in Sicherheit! Er kann uns nicht erreichen!«
»Sicher?«
»Ganz sicher! Bären haben Angst vor Treibsand!«
&#8211; Hägar, Dik Browne (1917&#8211;1989)</em></p><a id="mj6f6b47453043c38837bfc32154a97968" name="mj6f6b47453043c38837bfc32154a97968"></a><h1 class="t1"><span class="cfett">6</span> Exceptions</h1>
<p>Fehler beim Programmieren sind unvermeidlich. Schwierigkeiten bereiten nur die unkalkulierbaren Situationen &#8211; hier ist der Umgang mit Fehlern ganz besonders heikel. Java bietet die elegante Methode der Exceptions, um mit Fehlern flexibel umzugehen.</p><a id="mj9321c5c3dd6211c2bb893da8e77cf78b" name="mj9321c5c3dd6211c2bb893da8e77cf78b"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">6.1</span> Problembereiche einzäunen  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Werden in C Routinen aufgerufen, dann haben diese keine andere Möglichkeit, als über den Rückgabewert einen Fehlschlag anzuzeigen. Der Fehlercode ist häufig <span class="clisting">&#8211;1</span>, aber auch <span class="clisting">NULL</span> oder <span class="clisting">0</span>. Allerdings kann die Null auch Korrektheit anzeigen. Irgendwie ist das willkürlich. Die Abfrage dieser Werte ist unschön und wird von uns gern unterlassen, zumal wir oft davon ausgehen, dass ein Fehler in dieser Situation gar nicht auftreten kann &#8211; diese Annahme kann eine Dummheit sein. Zudem wird der Programmfluss durch Abfragen der Rückgabeergebnisse unangenehm unterbrochen, zumal der Rückgabewert, wenn er nicht gerade einen Fehler anzeigt, weiterverwendet wird. Der Rückgabewert ist also im weitesten Sinne überladen, da er zwei Zustände anzeigt. Häufig entstehen mit den Fehlerabfragen kaskadierte <span class="clisting">if</span>-Abfragen, die den Quellcode schwer lesbar machen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Die Java-Bibliothek geht bei den Methoden <span class="clisting">delete()</span>, <span class="clisting">mkdir()</span>, <span class="clisting">mkdirs()</span> und  <span class="clisting">renameTo()</span> der Klasse <span class="clisting">File</span> nicht mit gutem Beispiel voran. Anstatt über eine Ausnahme anzuzeigen, dass die Operation nicht geglückt ist, liefern die genannten Methoden <span class="clisting">false</span>. Das ist unglücklich, denn viele Entwickler verzichten auf den Test, und so entstehen Fehler, die später schwer zu finden sind.</p>
</td>
</tr>
</table><br><a id="mj09667c19245b0a48b322fa766dd86d0d" name="mj09667c19245b0a48b322fa766dd86d0d"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">6.1.1</span> Exceptions in Java mit try und catch  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Bei der Verwendung von Exceptions wird der Programmfluss nicht durch Abfrage des Rückgabestatus unterbrochen. Ein besonders ausgezeichnetes Programmstück überwacht mögliche Fehler und ruft gegebenenfalls speziellen Programmcode zur Behandlung auf.</p>
<p>Den überwachten Programmbereich (Block) leitet das Schlüsselwort <span class="clisting">try</span> ein. Dem <span class="clisting">try</span>-Block folgt in der Regel [In machen Fällen auch ein <span class="clisting">finally</span>-Block, sodass es dann ein <span class="clisting">try-finally</span> wird.
]  ein <span class="clisting">catch</span>-Block, in dem Programmcode steht, der den Fehler behandelt. Kurz skizziert, sieht das so aus:</p>
<div class="listing"><pre class="prettyprint">try
{
  // Programmcode, der eine Ausnahme ausführen kann
}
catch ( … )
{
  // Programmcode zum Behandeln der Ausnahme
}
// Es geht ganz normal weiter, denn die Ausnahme wurde behandelt</pre></div>
<p>Hinter <span class="clisting">catch</span> folgt also der Programmblock, der beim Auftreten eines Fehlers ausgeführt wird, um den Fehler abzufangen (daher der Ausdruck <span class="clisting">catch</span>). Es ist nach der Fehlerbehandlung nicht mehr so einfach möglich, an der Stelle fortzufahren, an der der Fehler auftrat. Andere Programmiersprachen erlauben das durchaus.</p>
<div class="bildbox">
<p><a name="IDAIQKJ"></a><a onClick="OpenWin('bilder/365_java_07_001.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_07_001.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><a id="mjde7dbac5833e26bcf754d8b5df90ff2b" name="mjde7dbac5833e26bcf754d8b5df90ff2b"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">6.1.2</span> Eine NumberFormatException auffangen  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Über die Methode <span class="clisting">Integer.parseInt()</span> haben wir an verschiedenen Stellen schon gesprochen. Sie konvertiert eine Zahl, die als Zeichenkette gegeben ist, in eine Dezimalzahl:</p>
<div class="listing"><pre class="prettyprint">int vatRate = Integer.parseInt( "19" );</pre></div>
<p>In dem Beispiel ist eine Konvertierung möglich, und die Methode führt die Umwandlung ohne Fehler aus. Anders sieht das aus, wenn der String keine Zahl repräsentiert:</p>
<p class="tabunter"><strong>Listing 6.1    </strong>DontCatchTheNumberFormatException.java</p>
<div class="listing"><pre class="prettyprint">/* 01 */public class DontCatchTheNumberFormatException
/* 02 */{
/* 03 */   public static int getVatRate()
/* 04 */   {
/* 05 */     return Integer.parseInt(<span class="cfett"> "19%"</span> );
/* 06 */   }
/* 07 */   public static void main( String[] args )
/* 08 */   {
/* 09 */     System.out.println( getVatRate() );
/* 10 */   }
/* 11 */}</pre></div>
<p>Die Ausführung des Programms bricht mit einem Fehler ab, und die virtuelle Maschine gibt uns automatisch eine Meldung aus:</p>
<div class="listing"><pre class="prettyprint">Exception in thread "main" java.lang.<span class="cfett">NumberFormatException</span>: For input string: "19%"
  at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
  at java.lang.Integer.parseInt(Integer.java:456)
  at java.lang.Integer.<span class="cfett">parseInt</span>(Integer.java:497)
  at DontCatchTheNumberFormatException.<span class="cfett">getVatRate(DontCatchTheNumberFormatException.</span><img src="common/umbruch.gif" border="0" alt="Umbruch"><span class="cfett">
    java:5)</span>
  at DontCatchTheNumberFormatException.<span class="cfett">main(DontCatchTheNumberFormatException.java:9)</span></pre></div>
<p>In der ersten Zeile können wir ablesen, dass eine <span class="clisting">java.lang.NumberFormatException</span> ausgelöst wurde. In der letzten Zeile steht, welche Stelle in unserem Programm zu dem Fehler führte (Fehlerausgaben wie diese haben wir schon im Abschnitt »Auf null geht nix, nur die NullPointerException« in Abschnitt 3.5 beobachtet).</p>
<div class="bildbox">
<p><a name="IDAKSKJ"></a><a onClick="OpenWin('bilder/NumberFormatExceptionInEclipse.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinNumberFormatExceptionInEclipse.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 6.1    </strong>Tritt eine Exception auf, so wird sie im Ausgabefenster rot angezeigt. Praktischerweise sind die Fehlermeldungen wie Hyperlinks: Ein Klick, und Eclipse zeigt die Zeile, die die Exception auslöst.</p>
<h4 class="t4">Stack-Trace</h4>
<p>Die virtuelle Maschine merkt sich auf einem Stapel, welche Methode welche andere Methode aufgerufen hat. Dies nennt sich <span class="ckursiv">Stack-Trace</span>. Wenn also die statische <span class="clisting">main()</span>-Methode die Methode <span class="clisting">getVatRate()</span> aufruft und diese wiederum <span class="clisting">parseInt()</span>, so sieht der Stapel zum Zeitpunkt von <span class="clisting">parseInt()</span> so aus:</p>
<div class="listing"><pre class="prettyprint">parseInt
getVatRate
main</pre></div>
<p>Ein Stack-Trace ist im Fehlerfall nützlich, da wir etwa bei unserem <span class="clisting">parseInt("19  %")</span> ablesen können, dass <span class="clisting">parseInt()</span> den Fehler ausgelöst hat und nicht irgendeine andere Methode.</p>
<h4 class="t4">Eine NumberFormatException auffangen</h4>
<p>Da ohne den aufgefangenen Fehler das Programm abbricht, soll nun die <span class="clisting">NumberFormatException</span> aufgefangen werden. Dabei kommt die <span class="clisting">try-catch</span>-Konstruktion zum Einsatz:</p>
<p class="tabunter"><strong>Listing 6.2    </strong>CatchTheNumberFormatException.java, main()</p>
<div class="listing"><pre class="prettyprint">stringToConvert = "19%";

try
{
  Integer.parseInt( stringToConvert );
}<span class="cfett">
catch ( NumberFormatException e )</span>
{
  System.err.printf( "'%s' kann man nicht in eine Zahl konvertieren!%n", <img src="common/umbruch.gif" border="0" alt="Umbruch">
    stringToConvert );
}
System.out.println( "Weiter geht's" );</pre></div>
<p>Die gesamte Ausgabe ist:</p>
<div class="listing"><pre class="prettyprint">'19%' kann man nicht in eine Zahl konvertieren!
Weiter geht's</pre></div>
<p>Die Anweisung <span class="clisting">catch ( NumberFormatException e )</span> fängt also alles auf, was vom Ausnahmetyp <span class="clisting">NumberFormatException</span> ist. <span class="clisting">Integer.parseInt("19  %")</span> führt zu einer <span class="clisting">NumberFormatException</span>, die wir behandeln. Danach ist der Fehler wie weggeblasen, und mit der Konsolenausgabe geht es ganz normal weiter.</p><a id="mjb4ba177b603272c04ce45ce8b078c105" name="mjb4ba177b603272c04ce45ce8b078c105"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">6.1.3</span> Ablauf einer Ausnahmesituation  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Das Laufzeitsystem erzeugt ein Ausnahme-Objekt, wenn ein Fehler über eine Exception angezeigt werden soll. Dann wird die Abarbeitung der Programmzeilen sofort unterbrochen, und das Laufzeitsystem steuert selbstständig die erste <span class="clisting">catch</span>-Klausel an (oder springt weiter zum Aufrufer, wie wir später sehen werden). Wenn die erste <span class="clisting">catch</span>-Anweisung nicht zur Art des aufgetretenen Fehlers passt, werden der Reihe nach alle übrigen <span class="clisting">catch</span>-Klauseln untersucht, und die erste übereinstimmende Klausel wird angesprungen (oder ausgewählt). Erst wird etwas versucht (daher heißt es im Englischen <span class="ckursiv">try</span>), und wenn im Fehlerfall ein <span class="clisting">Exception</span>-Objekt im Programmstück ausgelöst (engl. <span class="ckursiv">throw</span>) wird, lässt es sich an einer Stelle auffangen (engl. <span class="ckursiv">catch</span>). Da immer die erste passende <span class="clisting">catch</span>-Klausel ausgewählt wird, darf im Beispiel die letzte <span class="clisting">catch</span>-Klausel keinesfalls zuerst stehen, da diese auf jeden Fehler passt. Alle anderen Anweisungen in den <span class="clisting">catch</span>-Blöcken würden dann nicht ausgeführt; der Compiler erkennt dieses Problem und gibt einen Fehler aus.</p><a id="mjb385f2001eab878b098039474440032a" name="mjb385f2001eab878b098039474440032a"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">6.1.4</span> Eigenschaften vom Exception-Objekt  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Das Exception-Objekt, das uns in der <span class="clisting">catch</span>-Anweisung übergeben wird, ist reich an Informationen. So lässt sich erfragen, um welche Ausnahme es sich eigentlich handelt und wie die Fehlernachricht heißt. Auch der Stack-Trace lässt sich erfragen und ausgeben:</p>
<p class="tabunter"><strong>Listing 6.3    </strong>NumberFormatExceptionElements.java, main()</p>
<div class="listing"><pre class="prettyprint">try
{
  Integer.parseInt( "19%" );
}
catch ( NumberFormatException e )
{
  String name  =<span class="cfett"> e.getClass().getName()</span>;
  String msg   =<span class="cfett"> e.getMessage()</span>;
  String toStr =<span class="cfett"> e.toString()</span>;

  System.out.println( name );  // java.lang.NumberFormatException
  System.out.println( msg );   // For input string: "19%"
  System.out.println( toStr ); // java.lang.NumberFormatException: For input 
                               // string: "19%"

  e.printStackTrace();
}</pre></div>
<p>Im letzten Fall, mit <span class="clisting">e.printStackTrace</span><span class="clisting">()</span>, bekommen wir das Gleiche auf dem Fehlerkanal <span class="clisting">System.err</span> ausgegeben, was uns die virtuelle Maschine ausgibt, wenn wir die Ausnahme nicht abfangen:</p>
<div class="listing"><pre class="prettyprint">java.lang.NumberFormatException: For input string: "19%"
  at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
  at java.lang.Integer.parseInt(Integer.java:456)
  at java.lang.Integer.parseInt(Integer.java:497)
  at NumberFormatExceptionElements.main(NumberFormatExceptionElements.java:7)</pre></div>
<p>Die Ausgabe besteht aus dem Klassennamen der Exception, der Meldung und dem Stack-Trace. <span class="clisting">printStackTrace()</span> ist parametrisiert und kann auch in einen Ausgabekanal geschickt werden.</p>
<h4 class="t4">Bitte nicht schlucken: leere catch-Blöcke</h4>
<p>Java schreibt vor, dass Ausnahmen in einem <span class="clisting">catch</span> behandelt (oder nach oben geleitet) werden, aber nicht, was in <span class="clisting">catch</span>-Blöcken zu geschehen hat. Ein leerer <span class="clisting">catch</span>-Block ist in der Regel wenig sinnvoll, weil dann die Fehler klammheimlich unterdrückt werden. (Das wäre genauso wie ignorierte Statusrückgabewerte von C-Funktionen.) Das Mindeste ist eine minimale Fehlerausgabe via <span class="clisting">System.err.println(e)</span> oder das informativere <span class="clisting">e.printStackTrace ()</span> für eine <span class="clisting">Exception e</span> oder das Loggen dieser Fehler. Noch besser ist das aktive Reagieren, denn die Ausgabe selbst behandelt diesen Fehler nicht! Im <span class="clisting">catch</span>-Block ist es durchaus legitim, wiederum andere Ausnahmen auszulösen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Wenn wie bei einem <span class="clisting">sleep()</span> die <span class="clisting">InterruptedException</span> wirklich egal ist, kann natürlich auch der Block leer sein, doch gibt es dafür nicht so viele sinnvolle Beispiele.</p>
</td>
</tr>
</table><br><a id="mj8c86f43f77f7e9e7da49aa21723ec73b" name="mj8c86f43f77f7e9e7da49aa21723ec73b"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">6.1.5</span> Wiederholung abgebrochener Bereiche *  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Es gibt in Java bei Ausnahmen bisher keine von der Sprache unterstützte Möglichkeit, an den Punkt zurückzukehren, der den Fehler ausgelöst hat. Das ist aber oft erwünscht, etwa, wenn eine fehlerhafte Eingabe zu wiederholen ist.</p>
<p>Wir werden mit <span class="clisting">JOptionPane</span><span class="clisting">.showInputDialog()</span> nach einem String fragen und versuchen, diesen in eine Zahl zu konvertieren. Dabei kann natürlich etwas schiefgehen. Wenn ein Benutzer eine Zeichenkette eingibt, die keine Zahl repräsentiert, löst <span class="clisting">parseInt()</span> eine <span class="clisting">NumberFormatException</span> aus. Wir wollen in diesem Fall die Eingabe wiederholen:</p>
<p class="tabunter"><strong>Listing 6.4    </strong>ContinueInput.java, main()</p>
<div class="listing"><pre class="prettyprint">int number = 0;<span class="cfett">
while ( true )</span>
{
  try
  {
    String s = javax.swing.JOptionPane.showInputDialog(
                 "Bitte Zahl eingeben" );
    number = Integer.parseInt( s );
   <span class="cfett"> break</span>;
  }
  catch ( NumberFormatException ó_ò )
  {
    System.err.println( "Das war keine Zahl!" );
  }
}
System.out.println( "Danke für die Zahl " + number );
System.exit( 0 );                                     // Beendet die Anwendung</pre></div>
<p>Die gewählte Lösung ist einfach: Wir programmieren den gesamten Teil in einer Endlosschleife. Geht die problematische Stelle ohne Fehler durch, so beenden wir die Schleife mit <span class="clisting">break</span>. Kommt es zu einer Ausnahme, dann wird <span class="clisting">break</span> nicht ausgeführt, und nach der <span class="clisting">Exception</span> gelangen wir wieder in die Endlosschleife.</p><a id="mjb679137556787a8e305513c7640a6533" name="mjb679137556787a8e305513c7640a6533"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">6.1.6</span> Mehrere Ausnahmen auffangen  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wir wollen mithilfe der Klasse <span class="clisting">Scanner</span> eine Webseite zeilenweise auslesen und alle dort enthaltenen E-Mail-Adressen sammeln. Dazu greifen wir schon etwas vor und arbeiten mit zwei Klassen, die uns beim Einlesen der Zeilen helfen: <span class="clisting">URL</span> und <span class="clisting">Scanner</span> (siehe dazu Abschnitt 4.8.2, »Die Klasse Scanner«). Zunächst repräsentiert die Klasse <span class="clisting">URL</span> eine URL, also eine Internetadresse. Das <span class="clisting">URL</span>-Objekt fragen wir nach einem Datenstrom und diesen Datenstrom, setzen wir in den Konstruktor der <span class="clisting">Scanner</span>-Klasse. Mit dem <span class="clisting">Scanner</span> können wir dann zeilenweise durch die Seite laufen und alles einsammeln, was wie eine E-Mail-Adresse aussieht.</p>
<p>Anders als bei <span class="clisting">Integer.parseInt()</span> kündigt die API-Dokumentation vom Konstruktor der Klasse <span class="clisting">URL</span> an, dass eine Ausnahme ausgelöst wird, genau dann, wenn die URL falsch formuliert wird (etwa als <span class="clisting">"telefon://0123-123123"</span>). Vergleichbares gilt bei der <span class="clisting">URL</span>-Methode <span class="clisting">openStream()</span>. Die Methode löst eine <span class="clisting">IOException</span> aus, wenn es keinen Zugriff auf die Web-seite gibt.</p>
<div class="bildbox">
<p><a name="IDAX2KJ"></a><a onClick="OpenWin('bilder/URL_openConnection_Exception.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinURL_openConnection_Exception.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<div class="bildbox">
<p><a name="IDAY2KJ"></a><a onClick="OpenWin('bilder/URL_URL_Konstruktor_Exception.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinURL_URL_Konstruktor_Exception.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Damit zwingen uns der Konstruktor und die Methode eine Behandlung auf, ohne die wir <span class="clisting">new URL()</span> und <span class="clisting">openStream()</span> nicht nutzen könnten.</p>
<div class="bildbox">
<p><a name="IDA42KJ"></a><a onClick="OpenWin('bilder/EclipseHandleUrlException.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinEclipseHandleUrlException.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 6.2    </strong>Eine nicht behandelte Ausnahme wird von Eclipse als Fehler angezeigt.</p>
<p>Wir müssen uns diesen potenziellen Fehlern also stellen und daher die Problemzonen in einen <span class="clisting">try</span>- und <span class="clisting">catch</span>-Block schreiben:</p>
<p class="tabunter"><strong>Listing 6.5    </strong>FindAllEmailAddresses.java</p>
<div class="listing"><pre class="prettyprint">import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FindAllEmailAddresses
{
  public static void main( String[] args )
  {
    printAllEMailAddresses( "http://www.galileocomputing.de/hilfe/Impressum" );
  }

  static void printAllEMailAddresses( String urlString )
  {
   <span class="cfett"> try</span>
   <span class="cfett"> {</span>
      URL     url     =<span class="cfett"> new URL( urlString</span><span class="cfett"> </span><span class="cfett">)</span>;
      Scanner scanner = new Scanner(<span class="cfett"> url.openStream()</span> );
      Pattern pattern = Pattern.compile( "[\\w|-]+@\\w[\\w|-]*\\.[a-z]{2,3}" );

      while ( scanner.hasNextLine() )
      {
        String line = scanner.nextLine();
        for ( Matcher m = pattern.matcher( line ); m.find(); )
          System.out.println( line.substring( m.start(), m.end() ) );
      }
   <span class="cfett"> }</span>
   <span class="cfett"> catch ( MalformedURLException e )</span>
   <span class="cfett"> {</span>
     <span class="cfett"> System.err.println( "URL ist falsch aufgebaut!" );</span>
   <span class="cfett"> }</span>
   <span class="cfett"> catch ( IOException e )</span>
   <span class="cfett"> {</span>
     <span class="cfett"> System.err.println( "URL konnte nicht geöffnet werden!" );</span>
   <span class="cfett"> }</span>
  }
}</pre></div>
<p>Tritt beim Erzeugen des URL-Objekts oder bei der Verbindung ein Fehler auf, wird dieser im <span class="clisting">try</span>-Block abgefangen und im <span class="clisting">catch</span>-Teil bearbeitet. Einem <span class="clisting">try</span>-Block können mehrere <span class="clisting">catch</span>-Klauseln zugeordnet sein, um verschiedene Fehlertypen aufzufangen.</p>
<div class="bildbox">
<p><a name="IDAUALJ"></a><a onClick="OpenWin('bilder/EclipseURLCreateTryCatch.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinEclipseURLCreateTryCatch.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 6.3    </strong>Einen try-catch-Block kann Eclipse auch selbst anlegen. Dazu werden wieder die Tasten Strg + 1 bemüht, wobei Eclipse anbietet, entweder den Fehler an den Aufrufer weiterzuleiten (siehe weiter unten) oder einen try-catch-Block anzulegen.</p><a id="mj88d8245287b37e414bfe9518756fd249" name="mj88d8245287b37e414bfe9518756fd249"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">6.1.7</span> throws im Methodenkopf angeben  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Neben der rahmenbasierten Ausnahmebehandlung &#8211; dem »Einzäunen« von problematischen Blöcken durch einen <span class="clisting">try</span>- und <span class="clisting">catch</span>-Block &#8211; gibt es eine weitere Möglichkeit, auf Exceptions zu reagieren: Weiterleiten an den Aufrufer. Im Kopf der betreffenden Methode wird dazu eine <span class="clisting">throws</span>-Klausel eingeführt. Dadurch zeigt die Methode an, dass sie eine bestimmte Exception nicht selbst behandelt, sondern diese an die aufrufende Methode weitergibt. Wird nun von der aufgerufenen Methode eine Exception ausgelöst, so wird diese Methode abgebrochen, und der Aufrufer muss sich um den Fehler kümmern.</p>
<p>Wir können unsere Methode <span class="clisting">printAllEMailAddresses()</span> so umschreiben, dass sie die Ausnahmen nicht mehr selbst abfängt, sondern nach oben weiterleitet:</p>
<p class="tabunter"><strong>Listing 6.6    </strong>FindAllEmailAddresses2.java, printAllEMailAddresses()</p>
<div class="listing"><pre class="prettyprint">static void printAllEMailAddresses( String urlString )
 <span class="cfett"> throws MalformedURLException, IOException</span>
{
  Scanner scanner = new Scanner( new URL( urlString ).openStream() );
  Pattern pattern = Pattern.compile( "[\\w|-]+@\\w[\\w|-]*\\.[a-z]{2,3}" );

  while ( scanner.hasNextLine() )
  {
    String line = scanner.nextLine();
    for ( Matcher m = pattern.matcher( line ); m.find(); )
      System.out.println( line.substring( m.start(), m.end() ) );
  }
}</pre></div>
<p>Nun ist <span class="clisting">main()</span> am Zug und muss sich mit <span class="clisting">MalformedURLException</span> und <span class="clisting">IOException</span> herumärgern:</p>
<p class="tabunter"><strong>Listing 6.7    </strong>FindAllEmailAddresses2.java, main()</p>
<div class="listing"><pre class="prettyprint">public static void main( String[] args )
{
  try
  {
    printAllEMailAddresses( "http://www.galileocomputing.de/hilfe/Impressum" );
  }
  catch ( MalformedURLException e )
  {
    System.err.println( "URL ist falsch aufgebaut!" );
  }
  catch ( IOException e )
  {
    System.err.println( "URL konnte nicht geöffnet werden!" );
  }
}</pre></div>
<p>Dadurch steigt der Fehler entlang der Kette von Methodenaufrufen wie eine Blase (engl. <span class="ckursiv">bubble</span>) nach oben und kann irgendwann von einem Block abgefangen werden, der sich darum kümmert.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Zwar ist die <span class="clisting">FileNotFoundException</span> eine <span class="clisting">IOException</span>, sodass wir hier nur <span class="clisting">IOException</span> hätten angeben müssen, doch grundsätzlich lassen sich beliebig viele Ausnahmen, getrennt durch Kommata, aufzählen. Zu den Vererbungsbeziehungen und den Konsequenzen folgt später mehr.</p>
</td>
</tr>
</table><br><a id="mj0dc85a359a70759100957cd4a65f780a" name="mj0dc85a359a70759100957cd4a65f780a"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">6.1.8</span> Abschlussbehandlung mit »finally«  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Im Folgenden wollen wir eine optimale Exception-Behandlung programmieren. Es geht im Beispiel darum, die Ausmaße eines GIF-Bildes auszulesen. Das Grafikformat GIF ist sehr einfach und gut dokumentiert, etwa unter <span class="ckursiv">http://www.fileformat.info/format/gif/egff.htm</span>. Dort lässt sich erfahren, wie sich die Ausmaße ganz einfach im Kopf einer GIF-Datei ablesen lassen, denn nach den ersten Bytes 'G', 'I', 'F', '8', '7' (oder '9'), 'a' folgen in 2 Bytes an Position 6 und 7 die Breite und an Position 8 und 9 die Höhe des Bildes.</p>
<h4 class="t4">Die ignorante Version</h4>
<p>In der ersten Variante schreiben wir den Algorithmus einfach herunter und kümmern uns nicht um die Fehlerbehandlung; mögliche Ausnahmen leitet die statische <span class="clisting">main()</span>-Methode an die JVM weiter:</p>
<p class="tabunter"><strong>Listing 6.8    </strong>ReadGifSizeIgnoringExceptions.java</p>
<div class="listing"><pre class="prettyprint">import java.io.*;

public class ReadGifSizeIgnoringExceptions
{
  public static void main( String[] args ) throws FileNotFoundException, IOException
  {
    RandomAccessFile f = new RandomAccessFile( "duke.gif", "r" );
    f.seek( 6 );

    System.out.printf( "%s x %s Pixel%n", f.read() + f.read() * 256,
                                          f.read() + f.read() * 256 );
  }
}</pre></div>
<p>In der Klasse haben wir eine Kleinigkeit noch nicht beachtet: das Schließen des Datenstroms. Das Programm endet mit dem Auslesen der Bytes, aber das Schließen mit <span class="clisting">close()</span> fehlt. Nehmen wir eine Zeile nach der Konsolenausgabe hinzu:</p>
<div class="listing"><pre class="prettyprint">…
System.out.printf( "%s x %s Pixel%n", f.read() + f.read() * 256,
                                      f.read() + f.read() * 256 );<span class="cfett">
f.close()</span>;</pre></div>
<p>Das <span class="clisting">close()</span> wiederum kann auch eine <span class="clisting">IOException</span> auslösen, die jedoch schon über <span class="clisting">throws</span> angekündigt wurde.</p>
<h4 class="t4">Der gut gemeinte Versuch</h4>
<p>Dass ein Programm die JVM beendet, sobald eine Datei nicht da ist, ist ein bisschen hart. Daher wollen wir ein <span class="clisting">try</span>-<span class="clisting">catch</span> formulieren und den Fehler ordentlich abfangen und dokumentieren:</p>
<p class="tabunter"><strong>Listing 6.9    </strong>ReadGifSizeCatchingExceptions.java</p>
<div class="listing"><pre class="prettyprint">import java.io.*;

public class ReadGifSizeCatchingExceptions
{
  public static void main( String[] args )
  {
    try
    {
      RandomAccessFile f = new RandomAccessFile( "duke.gif", "r" );
      f.seek( 6 );

      System.out.printf( "%s x %s Pixel%n", f.read() + f.read() * 256,
                         f.read() + f.read() * 256 );
      f.close();
    }
    catch ( FileNotFoundException e )
    {
      System.err.println( "Datei ist nicht vorhanden!" );
    }
    catch ( IOException e )
    {

      System.err.println( "Allgemeiner Ein-/Ausgabefehler!" );
    }
  }
}</pre></div>
<p>Ist damit alles in Ordnung?</p>
<h4 class="t4">Ab jetzt wird scharf geschlossen</h4>
<p>Nehmen wir an, das Öffnen führt zu keiner Ausnahme, doch beim Zugriff auf ein Byte kommt es unerwartet zu einem Fehler. Das <span class="clisting">read()</span> wird abgebrochen, und die JVM leitet uns in den Exception-Block, der eine Meldung ausgibt. Das Problem: Dann schließt das Programm den Datenstrom nicht. Wir könnten verleitet werden, in den <span class="clisting">catch</span>-Zweig auch ein <span class="clisting">close()</span> zu schreiben, doch ist das eine Quellcodeduplizierung, die wir vermeiden müssen. Hier kommt ein <span class="clisting">finally</span>-Block zum Zuge. <span class="clisting">finally</span>-Blöcke stehen immer hinter <span class="clisting">catch</span>-Blöcken, und ihre wichtigste Eigenschaft ist die, dass der Programmcode im <span class="clisting">finally</span>-Block immer ausgeführt wird, egal, ob es einen Fehler gab oder ob es keinen Fehler gab und die Routine glatt durchlief. Das ist genau, was wird hier bei der Ressourcenfreigabe brauchen. Da <span class="clisting">finally</span> immer ausgeführt wird, wird die Datei geschlossen (und der interne File-Handle freigegeben), wenn alles gut ging &#8211; und ebenso im Fehlerfall:</p>
<p class="tabunter"><strong>Listing 6.10    </strong>ReadGifSize.java, main()</p>
<div class="listing"><pre class="prettyprint">RandomAccessFile f = null;

try
{
  f = new RandomAccessFile( "duke.gif", "r" );
  f.seek( 6 );

  System.out.printf( "%s x %s Pixel%n", f.read() + f.read() * 256,
                     f.read() + f.read() * 256 );

  f.close();
}
catch ( FileNotFoundException e )
{
  System.err.println( "Datei ist nicht vorhanden!" );
}
catch ( IOException e )
{
  System.err.println( "Allgemeiner Ein-/Ausgabefehler!" );
}<span class="cfett">
finally
{</span>
 <span class="cfett"> if ( f != null )</span>
   <span class="cfett"> try { f.close(); } catch ( IOException e ) { }
}</span></pre></div>
<p>Ein kleiner Schönheitsfehler bleibt: <span class="clisting">close()</span> selbst muss mit einem <span class="clisting">try</span>-<span class="clisting">catch</span> ummantelt werden. Das führt zu etwas abschreckenden Konstruktionen, die TCFTC (<span class="clisting">try</span>-<span class="clisting">catch</span>-<span class="clisting">finally</span>-<span class="clisting">try</span>-<span class="clisting">catch</span>) genannt werden. Ein zweiter Schönheitsfehler ist der, dass die Variable <span class="clisting">f</span> nun außerhalb des <span class="clisting">try</span>-Blocks deklariert werden muss. Das gibt ihr als lokaler Variablen einen größeren Radius &#8211; größer, als er eigentlich sein sollte.</p>
<h4 class="t4">Zusammenfassung</h4>
<p>Nach einem (oder mehreren) <span class="clisting">catch</span> kann optional ein <span class="clisting">finally</span>-Block folgen. Die Laufzeitumgebung führt die Anweisungen im <span class="clisting">finally</span>-Block immer aus, egal, ob ein Fehler auftrat oder die Anweisungen im <span class="clisting">try</span>-<span class="clisting">catch</span>-Block optimal durchliefen. Das heißt, der Block wird auf jeden Fall ausgeführt &#8211; lassen wir <span class="clisting">System.exit()</span> oder Systemfehler einmal außen vor &#8211;, auch wenn im <span class="clisting">try</span>-<span class="clisting">catch</span>-Block ein <span class="clisting">return</span>, <span class="clisting">break</span> oder <span class="clisting">continue</span> steht oder eine Anweisung eine neue Ausnahme auslöst. Der Programmcode im <span class="clisting">finally</span>-Block bekommt auch gar nicht mit, ob vorher eine Ausnahme auftrat oder alles glattlief. [Wenn das von Interesse ist, lässt sich am Ende des <span class="clisting">try</span>-<span class="clisting">catch</span>-Blocks ein Flag belegen.
] </p>
<p>Sinnvoll sind Anweisungen im <span class="clisting">finally</span>-Block immer dann, wenn Operationen stets ausgeführt werden sollen. Eine typische Anwendung ist die Freigabe von Ressourcen oder das Schließen von Dateien.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Es gibt bei Objekten einen Finalizer, doch der hat mit <span class="clisting">finally</span> nichts zu tun. Der Finalizer ist eine besondere Methode, die immer dann aufgerufen wird, wenn der Garbage-Collector ein Objekt wegräumt.</p>
</td>
</tr>
</table><br><h4 class="t4">Ein »try« ohne »catch«</h4>
<p>Es kommt zu einer merkwürdigen Konstellation, wenn mit <span class="clisting">throws</span> eine <span class="clisting">Exception</span> nach oben geleitet wird. Dann ist ein <span class="clisting">catch</span> für diese Fehlerart nicht notwendig. Dennoch lässt sich dann ein Block mit einer Ereignisbehandlung umrahmen, um ein <span class="clisting">finally</span> auszuführen:</p>
<div class="listing"><pre class="prettyprint">void read() throws MyException
{
 <span class="cfett"> try</span>
 <span class="cfett"> {</span>
    // hier etwas verarbeiten, was eine MyException auslösen könnte
    return;
 <span class="cfett"> }</span>
 <span class="cfett"> finally</span>
 <span class="cfett"> {</span>
    System.out.println( "Ja, das kommt danach" );
 <span class="cfett"> }</span>
}</pre></div><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="6 Exceptions"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_05_014.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_06_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
