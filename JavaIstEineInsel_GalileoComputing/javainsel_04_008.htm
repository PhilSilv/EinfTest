<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 4.8 Zerlegen von Zeichenketten</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 4.8 Zerlegen von Zeichenketten">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 4.8 Zerlegen von Zeichenketten">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_04_007.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_04_009.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2" class="navnav">4 Der Umgang mit Zeichenketten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_001.htm#mj5b63e17de6120d8f4db3409131f2a86c" class="navnav">4.1 Einzelne Zeichen behandeln</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_001.htm#mjc7f12843e36b26e5931db779648c134a" class="navnav">4.1.1 Von ASCII über ISO-8859-1 zu Unicode</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_001.htm#mj367a73ec9189cdf83cea885b4e5f492c" class="navnav">4.1.2 Die Character-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_002.htm#mj1ce18a66f5cc0a95bbe689a9d8271a3d" class="navnav">4.2 Strings und deren Anwendung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mj87816fe537a5f78f1f0c0158b90c2bc8" class="navnav">4.2.1 String-Literale als String-Objekte für konstante Zeichenketten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mj0deae7da940491bac63ca1ef16eb3552" class="navnav">4.2.2 String-Länge und Test auf Leerstring</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mjfb86382026187a557451c0b681ad1085" class="navnav">4.2.3 Nach enthaltenen Zeichen und Zeichenfolgen suchen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mj5ee730cda1f64998edf27bd440d36bf1" class="navnav">4.2.4 Gut, dass wir verglichen haben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mjac0dccd09d1a2ec631387a6918cd6768" class="navnav">4.2.5 Phonetische Vergleiche</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mjc6bf6272c679c8daa6715a7e8985f1c6" class="navnav">4.2.6 String-Teile extrahieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mjc18e7a29f3c160214dca9d72db9a1942" class="navnav">4.2.7 Strings anhängen, Groß-/Kleinschreibung und Leerraum</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mjcea37d75dba4d69967de4d1e249dbcc2" class="navnav">4.2.8 Suchen und ersetzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_002.htm#mjae1154bac3cab076ee42a9a2dc61c6cc" class="navnav">4.2.9 String-Objekte mit Konstruktoren neu anlegen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_003.htm#mj267aa5287155844072bc1987dd3b46b3" class="navnav">4.3 Konvertieren zwischen Primitiven und Strings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_003.htm#mj3f9f2b4d25b64111b3aba0aa049989ed" class="navnav">4.3.1 Unterschiedliche Typen in String-Repräsentationen konvertieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_003.htm#mja9e33f55a33c59da61e960c2023780c1" class="navnav">4.3.2 Stringinhalt in primitiven Wert konvertieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_003.htm#mj5a9a0a42e317bd6d405a3c8d0ba5d4f7" class="navnav">4.3.3 Unterschiedliche Ausgabeformate (Binär, Hex, Oktal) *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_004.htm#mjc49a6b30f15f92cfaa850a38756238c9" class="navnav">4.4 Veränderbare Zeichenketten mit StringBuilder und StringBuffer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_004.htm#mj83f6ed07e8fdfe6af14e18edf6218235" class="navnav">4.4.1 Anlegen von StringBuilder/StringBuffer-Objekten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_004.htm#mj0d68aa867da26c23ab1c863a6f9ed03d" class="navnav">4.4.2 StringBuilder/StringBuffer in andere Zeichenkettenformate konvertieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_004.htm#mj3f07186fbf65f98df2b985234cc07990" class="navnav">4.4.3 Daten anhängen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_004.htm#mj993ba2d25f3b2f2cf18eedc1dbd7e5ca" class="navnav">4.4.4 Zeichen(folgen) setzen, erfragen, löschen und umdrehen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_004.htm#mj5dca8c7e847d7bbfeea8604976bebbf9" class="navnav">4.4.5 Länge und Kapazität eines StringBuilder/StringBuffer-Objekts *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_004.htm#mj49dcd52f127505866171474743dac369" class="navnav">4.4.6 Vergleichen von String mit StringBuilder und StringBuffer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_004.htm#mjfcc09b72a35d873d5db103bdf4e4d1c3" class="navnav">4.4.7 »hashCode()« bei StringBuilder/StringBuffer *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_005.htm#mjc824d83eace3a6d1a6f009039461af93" class="navnav">4.5 CharSequence als Basistyp *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_006.htm#mj99de4087a46a9de05745fee5e80eb080" class="navnav">4.6 Sprachabhängiges Vergleichen und Normalisierung *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_006.htm#mje5efed3fcaf2a5c0e494ccbc901ac5d4" class="navnav">4.6.1 Die Klasse »Collator«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_006.htm#mjdc835aa7b61dc6f449d3d4cd1d3f2871" class="navnav">4.6.2 Effiziente interne Speicherung für die Sortierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_006.htm#mjffb5d2a9021a5520cecfe6f6b589bff5" class="navnav">4.6.3 Normalisierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_007.htm#mj26fc5cf60311afbddd72295cdd646a48" class="navnav">4.7 Reguläre Ausdrücke</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_007.htm#mjd5b5d84cb3f1b5bcb7638ea9221a491f" class="navnav">4.7.1 Arbeiten mit der Fassade: String#matches()</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_007.htm#mj10b152411c18f403a01181de6805ffab" class="navnav">4.7.2 Die Klassen Pattern und Matcher</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_007.htm#mjf7cf6ba5fe7a1ff4534771fe3acdcb82" class="navnav">4.7.3 Finden und nicht matchen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_007.htm#mjec24b38a489c334c89e79b5d93a7407c" class="navnav">4.7.4 Gierige und nicht gierige Operatoren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_007.htm#mj2895cc789e3750872721abe1a018c166" class="navnav">4.7.5 Mit MatchResult alle Ergebnisse einsammeln *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_007.htm#mj1abbf8af8df05805ee6bdc65f332be5c" class="navnav">4.7.6 Suchen und Ersetzen mit Mustern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjea76920fd083ba12b49068b2113a5f62" class="navh">4.8 Zerlegen von Zeichenketten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj8173df624dd4e503133672215a4fb5b2" class="navh">4.8.1 Splitten von Zeichenketten mit »split()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj93a3cb6f9d58defedbc989a780cf6c99" class="navh">4.8.2 Die Klasse Scanner</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj1f9dc3aad0907a177bf204b21eae4ddd" class="navh">4.8.3 Die Klasse StringTokenizer *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja636105fd65ffad38a6c118a42268154" class="navh">4.8.4 BreakIterator als Zeichen-, Wort-, Zeilen- und Satztrenner *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_009.htm#mj8ef58986d2961c26b8707c1a8afb4d11" class="navnav">4.9 Zeichenkodierungen, XML/HTML-Entitys, Base64 *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_009.htm#mjb87cc00c80880e927ff29ee8ce0e1f50" class="navnav">4.9.1 Unicode und 8-Bit-Abbildungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_009.htm#mjf513be2231479f85d1af7ab5d6f80a8b" class="navnav">4.9.2 Konvertieren mit »OutputStreamWriter«-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_009.htm#mje99d09ac96d967c3bb0d030f145ec3b3" class="navnav">4.9.3 Das Paket »java.nio.charset«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_009.htm#mj449273bd5294b09262f137915733a778" class="navnav">4.9.4 XML/HTML-Entitys ausmaskieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_009.htm#mj19dbf52792d98cd964b1133e5108ec63" class="navnav">4.9.5 Base64-Kodierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_010.htm#mj53b74ba10bc69f50ef35fec994a0e0cf" class="navnav">4.10 Ausgaben formatieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_010.htm#mj858fbf1c224f5da2028e472edf93dba4" class="navnav">4.10.1 Formatieren und Ausgeben mit »format()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_010.htm#mj87b0fa4e81f1eed16d205ce033d86124" class="navnav">4.10.2 Die Formatter-Klasse *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_010.htm#mjcb99bccbb69f33858ae88eb50f4973fc" class="navnav">4.10.3 Formatieren mit Masken *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_010.htm#mjf3f02de332c4f2de75442068ee669fef" class="navnav">4.10.4 Format-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_04_010.htm#mj8ba0378eee002645ede566d73c70c8f0" class="navnav">4.10.5 Zahlen, Prozente und Währungen mit »NumberFormat« und »DecimalFormat« formatieren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_04_011.htm#mjf6c9a513b65380464457c07fcb456181" class="navnav">4.11 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjea76920fd083ba12b49068b2113a5f62" name="mjea76920fd083ba12b49068b2113a5f62"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">4.8</span> Zerlegen von Zeichenketten  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Die Java-Bibliothek bietet einige Klassen und Methoden, um nach bestimmten Mustern große Zeichenketten in kleinere zu zerlegen. In diesem Kontext sind die Begriffe <span class="ckursiv">Token</span> und <span class="ckursiv">Delimiter</span> zu nennen: Ein Token ist ein Teil eines Strings, der durch bestimmte Trennzeichen (engl. <span class="ckursiv">delimiter</span>) von anderen Tokens getrennt wird. Nehmen wir als Beispiel den Satz »Moderne Musik ist Instrumentespielen nach Noten« (Peter Sellers). Wählen wir Leerzeichen als Trennzeichen, lauten die einzelnen Tokens »Moderne«, »Musik« und so weiter.</p>
<p>Die Java-Bibliothek bietet eine Reihe von Möglichkeiten zum Zerlegen von Zeichenfolgen, von denen einige in den nachfolgenden Abschnitten vorgestellt werden:</p>
<ul class="gp">
<li><span class="clisting">split()</span> von <span class="clisting">String</span>. Aufteilen mit einem Delimiter, der durch reguläre Ausdrücke beschrieben wird.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Scanner</span>. Schöne Klasse zum Ablaufen einer Eingabe.</li>
</ul>
<ul class="gp">
<li><span class="clisting">StringTokenizer</span>. Der Klassiker aus Java 1.0. Delimiter sind nur einzelne Zeichen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">BreakIterator</span>. Findet Zeichen-, Wort-, Zeilen- oder Satz-Grenzen.</li>
</ul><a id="mj8173df624dd4e503133672215a4fb5b2" name="mj8173df624dd4e503133672215a4fb5b2"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">4.8.1</span> Splitten von Zeichenketten mit »split()«  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Objektmethode <span class="clisting">split()</span> eines String-Objekts zerlegt die eigene Zeichenkette in Teilzeichenketten. Die Trenner sind völlig frei wählbar und als regulärer Ausdruck beschrieben. Die Rückgabe ist ein Feld der Teilzeichenketten.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zerlege einen Domain-Namen in seine Bestandteile:</p>
<div class="listing"><pre class="prettyprint">String path = "www.tutego.com";
String[] segs = <span class="cfett">path.split</span>( Pattern.quote( "." ) );
System.out.println( Arrays.toString(segs) ); // [www, tutego, com]</pre></div>
<p class="BStandard">Da der Punkt als Trennzeichen ein Sonderzeichen für reguläre Ausdrücke ist, muss er passend mit dem Backslash auskommentiert werden. Das erledigt die statische Methode <span class="clisting">quote()</span>. Anderfalls liefert <span class="clisting">split(".")</span> auf jedem String ein Feld der Länge 0.</p>
</td>
</tr>
</table><br><p>Ein häufiger Trenner ist <span class="clisting">\s</span>, also Weißraum.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zähle die Anzahl der Wörter in einem Satz:</p>
<div class="listing"><pre class="prettyprint">String string = "Es kann jeden treffen. Auch dich!";
int nrOfWords = <span class="cfett">string.split( "(\\s|\\p{Punct})+" )</span>.length;
System.out.println( nrOfWords );  //</pre></div>
<p class="BStandard">Der Trenner ist entweder Weißraum oder ein Satzeichen.</p>
</td>
</tr>
</table><br><h4 class="t4">»String.split()« geht auf »Pattern#split()«</h4>
<p>Die <span class="clisting">split()</span>-Methode aus der <span class="clisting">String</span>-Klasse delegiert wie auch bei <span class="clisting">match()</span> an das <span class="clisting">Pattern</span>-Objekt:</p>
<div class="listing"><pre class="prettyprint">public String[] split( String regex, int limit )
{
  return Pattern.compile( regex ).split( this, limit );
}

public String[] split( String regex )
{
  return split( regex, 0 );
}</pre></div>
<p>Am Quellcode ist zu erkennen, dass für jeden Methodenaufruf von <span class="clisting">split()</span> auf dem <span class="clisting">String</span>-Objekt ein <span class="clisting">Pattern</span> übersetzt wird. Das ist nicht ganz billig, und so soll bei mehrmaligem Split mit dem gleichen Zerlege-Muster gleich ein <span class="clisting">Pattern</span>-Objekt und dort das <span class="clisting">split()</span> verwendet werden:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.<span class="cfett">String</span>
implements CharSequence, Comparable&lt;String&gt;, Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String[] split( String regex )</span>
Zerlegt die aktuelle Zeichenkette mit dem regulären Ausdruck.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String[] split( String regex, int limit )</span>
Zerlegt die aktuelle Zeichenkette mit dem regulären Ausdruck, liefert jedoch maximal begrenzt viele Teilzeichenfolgen.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.util.regex.<span class="cfett">Pattern</span>
implements Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String[] split( CharSequence input )</span>
Zerlegt die Zeichenfolge <span class="clisting">input</span> in Teilzeichenketten, wie es das aktuelle <span class="clisting">Pattern</span>-Objekt befiehlt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String[] split( CharSequence input, int limit )</span>
Wie <span class="clisting">split(CharSequence)</span>, doch nur höchstens <span class="clisting">limit</span> viele Teilzeichenketten.</li>
</ul><a id="mj93a3cb6f9d58defedbc989a780cf6c99" name="mj93a3cb6f9d58defedbc989a780cf6c99"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">4.8.2</span> Die Klasse Scanner  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klasse <span class="clisting">java.util.Scanner</span> kann eine Zeichenkette in Tokens zerlegen und einfach Dateien zeilenweise einlesen. Bei der Zerlegung kann ein regulärer Ausdruck den Delimiter beschreiben. Damit ist <span class="clisting">Scanner</span> flexibler als ein <span class="clisting">StringTokenizer</span>, der nur einzelne Zeichen als Trenner zulässt.</p>
<p>Zum Aufbau der <span class="clisting">Scanner</span>-Objekte bietet die Klasse einige Konstruktoren an, die die zu zerlegenden Zeichenfolgen unterschiedlichen Quellen entnehmen, etwa einem String, einem Datenstrom (beim Einlesen von der Kommandozeile wird das <span class="clisting">System.in</span> sein), einem <span class="clisting">File</span>-Objekt oder diversen NIO-Objekten. Falls ein Objekt vom Typ <span class="clisting">Closeable</span> dahintersteckt, wie ein <span class="clisting">Writer</span>, sollte mit <span class="clisting">close()</span> der Scanner geschlossen werden, der das <span class="clisting">close()</span> zum <span class="clisting">Closeable</span> weiterleitet. Beim String ist das nicht nötig, und bei <span class="clisting">File</span> schließt der <span class="clisting">Scanner</span> selbstständig.</p>
<div class="bildbox">
<p><a name="IDA0PYD"></a><a onClick="OpenWin('bilder/scanneruml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinscanneruml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.util.<span class="cfett">Scanner</span>
implements Iterator&lt;String&gt;, Closeable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Scanner( String source )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Scanner( File source ), Scanner( File source, String charsetName )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Scanner( InputStream source ), Scanner( InputStream source, String charsetName )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Scanner( Readable source )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Scanner( ReadableByteChannel source )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Scanner( ReadableByteChannel source, String charsetName )</span>
Erzeugt ein neues <span class="clisting">Scanner</span>-Objekt.</li>
</ul>
<h4 class="t4">Zeilenweises Einlesen einer Datei</h4>
<p>Ist das <span class="clisting">Scanner</span>-Objekt angelegt, lässt sich mit dem Paar <span class="clisting">hasNextLine()</span> und <span class="clisting">nextLine()</span> einfach eine Datei zeilenweise auslesen:</p>
<p class="tabunter"><strong>Listing 4.24    </strong>ReadAllLines.java</p>
<div class="listing"><pre class="prettyprint">import java.io.*;
import java.util.Scanner;

public class ReadAllLines
{
  public static void main( String[] args ) throws FileNotFoundException
  {
   <span class="cfett"> Scanner scanner = new Scanner( new File("EastOfJava.txt") );</span>
   <span class="cfett"> while ( scanner.hasNextLine() )</span>
     <span class="cfett"> System.out.println( scanner.nextLine() );</span>
  }
}</pre></div>
<p>Da der Konstruktor von <span class="clisting">Scanner</span> mit der Datei eine Ausnahme auslösen kann, müssen wir diesen möglichen Fehler behandeln. Wir machen es uns einfach und leiten einen möglichen Fehler an die Laufzeitumgebung weiter. Den Umgang mit Exceptions erklärt das gleichnamige Kapitel 6 genauer.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.util.<span class="cfett">Scanner</span>
implements Iterator&lt;String&gt;, Closeable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean hasNextLine()</span>
Liefert <span class="clisting">true</span>, wenn eine nächste Zeile gelesen werden kann.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String nextLine()</span>
Liefert die nächste Zeile.</li>
</ul>
<h4 class="t4">Der Nächste, bitte</h4>
<p>Nach dem Erzeugen des <span class="clisting">Scanner</span>-Objekts liefert die Methode <span class="clisting">next()</span> die nächste Zeichenfolge, wenn denn ein <span class="clisting">hasNext()</span> die Rückgabe <span class="clisting">true</span> ergibt. (Das sind dann auch die Methoden der Schnittstelle <span class="clisting">Iterator</span>, wobei <span class="clisting">remove()</span> nicht implementiert ist.)</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Von der Standardeingabe soll ein <span class="clisting">String</span> gelesen werden:</p>
<div class="listing"><pre class="prettyprint">Scanner scanner = new Scanner( System.in );
String s = scanner.next();</pre></div>
</td>
</tr>
</table><br><p>Neben der <span class="clisting">next()</span>-Methode, die nur einen String als Rückgabe liefert, bietet <span class="clisting">Scanner</span> diverse <span class="clisting">next&lt;Typ&gt;()</span>-Methoden an, die das nächste Token einlesen und in ein gewünschtes Format konvertieren, etwa in ein <span class="clisting">double</span> bei <span class="clisting">nextDouble()</span>. Über gleich viele <span class="clisting">hasNext&lt;Typ&gt;()</span>-Methoden lässt sich erfragen, ob ein weiteres Token von diesem Typ folgt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Die einzelnen <span class="clisting">nextXXX()</span>- und <span class="clisting">hasNextXXX()</span>-Methoden sind:</p>
<p class="tabunter"><strong>Listing 4.25    </strong>ScannerDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">Scanner scanner = new Scanner( "tutego 12 1973 12,03 True 123456789000" );
System.out.println( scanner.<span class="cfett">hasNext()</span> );        // true
System.out.println( scanner.<span class="cfett">next()</span> );           // tutego
System.out.println( scanner.<span class="cfett">hasNextByte()</span> );    // true
System.out.println( scanner.<span class="cfett">nextByte()</span> );       // 12
System.out.println( scanner.<span class="cfett">hasNextInt()</span> );     // true
System.out.println( scanner.<span class="cfett">nextInt()</span> );        // 1973
System.out.println( scanner.<span class="cfett">hasNextDouble()</span> );  // true
System.out.println( scanner.<span class="cfett">nextDouble()</span> );     // 12.03
System.out.println( scanner.<span class="cfett">hasNextBoolean()</span> ); // true
System.out.println( scanner.<span class="cfett">nextBoolean()</span> );    // true
System.out.println( scanner.<span class="cfett">hasNextLong()</span> );    // true
System.out.println( scanner.<span class="cfett">nextLong()</span> );       // 123456789000
System.out.println( scanner.<span class="cfett">hasNext()</span> );        // false</pre></div>
</td>
</tr>
</table><br><p>Sind nicht alle Tokens interessant, überspringt <span class="clisting">Scanner skip(Pattern pattern)</span> beziehungsweise <span class="clisting">Scanner skip(String pattern)</span> sie &#8211; Delimiter werden nicht beachtet.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.util.<span class="cfett">Scanner</span>
implements Iterator&lt;String&gt;, Closeable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean hasNext()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasNextBigDecimal()</span>, <span class="clisting">boolean hasNextBigInteger()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasNextBigInteger( int radix )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasNextBoolean()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasNextByte()</span>, <span class="clisting">boolean hasNextByte( int radix )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasNextDouble()</span>, <span class="clisting">boolean hasNextFloat()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasNextInt()</span>, <span class="clisting">boolean hasNextInt( int radix )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasNextLong()</span>, <span class="clisting">boolean hasNextLong( int radix )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasNextShort()</span>, <span class="clisting">boolean hasNextShort( int radix )</span>
Liefert <span class="clisting">true</span>, wenn ein Token des gewünschten Typs gelesen werden kann.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String next()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">BigDecimal nextBigDecimal()</span>, <span class="clisting">BigInteger nextBigInteger()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">BigInteger nextBigInteger( int radix )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean nextBoolean()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">byte nextByte()</span>, <span class="clisting">byte nextByte( int radix )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">double nextDouble()</span>, <span class="clisting">float nextFloat()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">int nextInt()</span>, <span class="clisting">int nextInt( int radix )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">long nextLong()</span>, <span class="clisting">long nextLong( int radix )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">short nextShort()</span>, <span class="clisting">short nextShort( int radix )</span>
Liefert das nächste Token.</li>
</ul>
<p>Die Basis für Zahlen ändert <span class="clisting">useRadix(int)</span> und erfragt <span class="clisting">radix()</span>.</p>
<h4 class="t4">Trennzeichen definieren *</h4>
<p><span class="clisting">useDelimiter()</span> setzt für die folgenden Filter-Vorgänge den Delimiter. Um nur lokal für das nächste Zerlegen einen Trenner zu setzen, lässt sich mit <span class="clisting">next(String)</span> oder <span class="clisting">next(Pattern)</span> ein Trennmuster angeben. <span class="clisting">hasNext(String)</span> beziehungsweise <span class="clisting">hasNext(Pattern)</span> liefern <span class="clisting">true</span>, wenn das nächste Token dem Muster entspricht.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Der String <span class="clisting">s</span> enthält eine Zeile wie <span class="clisting">a := b</span>. Uns interessieren der linke und der rechte Teil:</p>
<div class="listing"><pre class="prettyprint">String s = "Url := http://www.tutego.com";
Scanner scanner = new Scanner( s ).useDelimiter( "\\s*:=\\s*" );
System.out.printf( "%s = %s", scanner.next(), scanner.next() );
// Url = http://www.tutego.com</pre></div>
</td>
</tr>
</table><br><p>Mit <span class="clisting">findInLine(String)</span> beziehungsweise <span class="clisting">findInLine(Pattern)</span> wird der <span class="clisting">Scanner</span> angewiesen, nach dem Muster nur bis zum nächsten Zeilenendezeichen zu suchen; Delimiter ignoriert er.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Suche mit <span class="clisting">findInLine()</span> nach einem Muster:</p>
<div class="listing"><pre class="prettyprint">String text = "Hänsel-und-Gretel\ngingen-durch-den-Wald";
Scanner scanner = new Scanner( text ).useDelimiter( "-" );
System.out.println( scanner.findInLine( "Wald" ) ); // null
System.out.println( scanner.findInLine( "ete" ) );  // "ete"
System.out.println( scanner.next() );               // "l" "gingen"
System.out.println( scanner.next() );               // "durch"</pre></div>
</td>
</tr>
</table><br><p>Mit <span class="clisting">findWithinHorizon(Pattern, int)</span> beziehungsweise <span class="clisting">findWithinHorizon(String, int)</span> lässt sich eine Obergrenze von Code-Points (vereinfacht ausgedrückt, von Zeichen) angeben. Liefert die Methode in dieser Grenze kein Token, liefert sie <span class="clisting">null</span> und setzt auch den Positionszeiger nicht weiter.</p>
<h4 class="t4">Landessprachen *</h4>
<p>Auch ist die <span class="clisting">Scanner</span>-Klasse in der Lage, die Dezimalzahlen unterschiedlicher Sprachen zu erkennen. Mit dem passenden <span class="clisting">Locale</span>-Objekt wird dann auch <span class="clisting">nextDouble("12,34")</span> funktionieren:</p>
<div class="listing"><pre class="prettyprint">Scanner scanner = new Scanner( "12,34" ).useLocale( Locale.GERMAN );
System.out.println( scanner.nextDouble() );   // 12.34</pre></div>
<p>Das klingt logisch, funktioniert aber auch ohne <span class="clisting">useLocale(Locale.GERMAN)</span>! Der Grund ist einfach: Der Scanner setzt das <span class="clisting">Locale</span> vorher standardmäßig auf <span class="clisting">Locale.getDefault()</span>, und bei auf Deutsch eingestellten Betriebssystemen ist das eben <span class="clisting">Locale.GERMAN</span>. Andersherum bedeutet das, dass eine in englischer Schreibweise angegebene Zahl wie 12.34 nicht erkannt wird und der <span class="clisting">Scanner</span> eine <span class="clisting">java.util.InputMismatchException</span> meldet.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.util.<span class="cfett">Scanner</span>
implements Iterator&lt;String&gt;, Closeable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Scanner useLocale( Locale locale )</span>
Setzt die Sprache zum Erkennen der <span class="ckursiv">lokalisierten Zahlen</span>, insbesondere der Fließkommazahlen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Locale locale()</span>
Liefert die eingestellte Sprache.</li>
</ul>
<h4 class="t4">IO-Fehler während des Parsens *</h4>
<p>Bezieht der <span class="clisting">Scanner</span> die Daten von einem <span class="clisting">Readable</span>, kann es Ein-/Ausgabefehler in Form von <span class="clisting">IOExceptions</span> geben. Methoden wie <span class="clisting">next()</span> geben diese Fehler nicht weiter, sondern fangen sie ab und speichern sie intern. Die Methode <span class="clisting">ioException()</span> liefert dann das letzte <span class="clisting">IOException</span>-Objekt oder <span class="clisting">null</span>, falls es keinen Fehler gab.</p><a id="mj1f9dc3aad0907a177bf204b21eae4ddd" name="mj1f9dc3aad0907a177bf204b21eae4ddd"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">4.8.3</span> Die Klasse StringTokenizer *  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klasse <span class="clisting">StringTokenizer</span> zerlegt ebenfalls eine Zeichenkette in Tokens. Der <span class="clisting">StringTokenizer</span> ist jedoch auf <span class="ckursiv">einzelne</span> Zeichen als Trennsymbole beschränkt, während die Methode <span class="clisting">split()</span> und die Klassen um <span class="clisting">Pattern</span> einen regulären Ausdruck zur Beschreibung der Trennsymbole erlauben. Es sind keine Zeichenfolgen wie »:=« denkbar.</p>
<div class="bildbox">
<p><a name="IDAKGZD"></a><a onClick="OpenWin('bilder/365_java_04_001.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_04_001.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Um einen String mithilfe eines <span class="clisting">StringTokenizer</span>-Objekts zu zerlegen, wird dem Konstruktor der Klasse der zu unterteilende Text als Argument übergeben:</p>
<div class="listing"><pre class="prettyprint">String s = "Faulheit ist der Hang zur Ruhe ohne vorhergehende Arbeit";<span class="cfett">
StringTokenizer tokenizer = new StringTokenizer( s );</span>
while <span class="cfett">( tokenizer.hasMoreTokens()</span> )
  System.out.println( <span class="cfett">tokenizer.nextToken()</span> );</pre></div>
<p class="BStandard">Der Text ist ausschließlich ein Objekt vom Typ <span class="clisting">String</span>.</p>
</td>
</tr>
</table><br><p>Um den Text abzulaufen, gibt es die Methoden <span class="clisting">nextToken()</span> und <span class="clisting">hasMoreTokens()</span>. [Die Methode <span class="clisting">hasMoreElements()</span> ruft direkt <span class="clisting">hasMoreTokens()</span> auf und wurde nur implementiert, da ein <span class="clisting">StringTokenizer</span> die Schnittstelle <span class="clisting">Enumeration</span> implementiert.
]  Die Methode <span class="clisting">nextToken()</span> liefert das nächste Token im String. Ist kein Token mehr vorhanden, wird eine <span class="clisting">NoSuchElementException</span> ausgelöst. Damit wir frei von diesen Überraschungen sind, können wir mit der Methode <span class="clisting">hasMoreTokens()</span> nachfragen, ob noch weitere Tokens vorliegen.</p>
<p>In der Voreinstellung sind Tabulator, Leerzeichen und Zeilentrenner die Delimiter. Sollen andere Zeichen als die voreingestellten Trenner den Satz zerlegen, kann dem Konstruktor als zweiter String eine Liste von Trennern übergeben werden. Jedes Zeichen, das in diesem String vorkommt, fungiert als einzelnes Trennzeichen:</p>
<div class="listing"><pre class="prettyprint">StringTokenizer st = new StringTokenizer( "Blue=0000ff\nRed:ff0000\n", "=:\n" );</pre></div>
<p>Neben den beiden Konstruktoren existiert noch ein dritter, der auch die Trennzeichen als eigenständige Bestandteile bei <span class="clisting">nextToken()</span> übermittelt.</p>
<div class="bildbox">
<p><a name="IDA1IZD"></a><a onClick="OpenWin('bilder/stringtokenizer.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinstringtokenizer.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.<span class="cfett">StringTokenizer</span>
implements Enumeration&lt;Object&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">StringTokenizer( String str, String delim, boolean returnDelims )</span>
Ein String-Tokenizer für <span class="clisting">str</span>, wobei jedes Zeichen in <span class="clisting">delim</span> als Trennzeichen gilt. Ist <span class="clisting">returnDelims</span> gleich <span class="clisting">true</span>, so sind auch die Trennzeichen Tokens der Aufzählung.</li>
</ul>
<ul class="gp">
<li><span class="clisting">StringTokenizer( String str, String delim )</span>
Ein String-Tokenizer für <span class="clisting">str</span>, wobei alle Zeichen in <span class="clisting">delim</span> als Trennzeichen gelten. Entspricht dem Aufruf von <span class="clisting">this(str, delim, false);</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">StringTokenizer( String str )</span>
Ein String-Tokenizer für <span class="clisting">str</span>. Entspricht dem Aufruf von <span class="clisting">this(str, " \t\n\r\f", false);</span>. Die Trennzeichen sind Leerzeichen, Tabulator, Zeilenende und Seitenvorschub.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasMoreTokens()</span>, <span class="clisting">boolean hasMoreElements()</span>
Testet, ob weitere Tokens verfügbar sind. <span class="clisting">hasMoreElements()</span> implementiert die Methode für <span class="clisting">Enumeration</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String nextToken()</span>, <span class="clisting">Object nextElement()</span>
Liefert das nächste Token vom String-Tokenizer. <span class="clisting">nextElement()</span> existiert nur, damit der Tokenizer als <span class="clisting">Enumeration</span> benutzt werden kann. Der weniger spezifische Ergebnistyp <span class="clisting">Object</span> macht eine Typumwandlung erforderlich.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String nextToken( String delim )</span>
Setzt die Delimiter-Zeichen neu und liefert anschließend das nächste Token.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int countTokens()</span>
Zählt die Anzahl der noch möglichen <span class="clisting">nextToken()</span>-Methodenaufrufe, ohne die aktuelle Position zu berühren. Der Aufruf der Methode ist nicht billig.</li>
</ul><a id="mja636105fd65ffad38a6c118a42268154" name="mja636105fd65ffad38a6c118a42268154"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">4.8.4</span> BreakIterator als Zeichen-, Wort-, Zeilen- und Satztrenner *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Benutzer laufen Zeichenketten aus ganz unterschiedlichen Gründen ab. Ein Anwendungsszenario ist das Ablaufen eines Strings Zeichen für Zeichen. In anderen Fällen sind nur einzelne Wörter interessant, die durch Wort- oder Satztrenner separiert sind. In wieder einem anderen Fall ist eine Textausgabe auf eine bestimmte Zeilenlänge gewünscht.</p>
<p>Zum Zerlegen von Zeichenfolgen sieht die Standardbiblitothek im Java-Paket <span class="clisting">java.text</span> die Klasse <span class="clisting">BreakIterator</span> vor. Einen konkreten Iterator erzeugen diverse statische Methoden, die optional auch nach speziellen Kriterien einer Sprache trennen. Wenn keine Sprache übergeben wird, wird automatisch die Standardsprache verwendet.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.text.<span class="cfett">BreakIterator</span>
implements Cloneable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static BreakIterator getCharacterInstance()
static BreakIterator getCharacterInstance( Locale where )</span>
Trennt nach Zeichen. Vergleichbar mit einer Iteration über <span class="clisting">charAt()</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static BreakIterator getSentenceInstance()
static BreakIterator getSentenceInstance( Locale where )</span>
Trennt nach Sätzen. Delimiter sind übliche Satztrenner wie ».«, »!«, »?«.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static BreakIterator getWordInstance()
static BreakIterator getWordInstance( Locale where )</span>
Trennt nach Wörtern. Trenner wie Leerzeichen und Satzzeichen gelten auch als Wörter.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static BreakIterator getLineInstance()
static BreakIterator getLineInstance( Locale where )</span>
Trennt <span class="ckursiv">nicht</span> nach Zeilen, wie der Name vermuten lässt, sondern ebenfalls nach Wörtern. Nur werden Satzzeichen, die am Wort »hängen«, zum Wort hinzugezählt. Praktisch ist dies für Algorithmen, die Textblöcke in eine bestimmte Breite bringen wollen. Ein Beispiel für die drei Typen zeigt das gleich folgende Programm.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Auf den ersten Blick ergibt ein <span class="clisting">BreakIterator</span> von <span class="clisting">getCharacterInstance()</span> keinen großen Sinn, denn für das Ablaufen einer Zeichenkette ließe sich viel einfacher eine Schleife nehmen und mit <span class="clisting">charAt()</span> arbeiten. Der <span class="clisting">BreakIterator</span> kann jedoch korrekt mit Unicode 4 umgehen, wo zwei <span class="clisting">char</span> ein Unicode 4-Zeichen bilden. Zum zeichenweisen Iterieren über Strings ist auch <span class="clisting">CharacterIterator</span> eine gute Lösung.</p>
</td>
</tr>
</table><br><h4 class="t4">Beispiel für die drei BreakIterator-Typen</h4>
<p>Das nächste Beispiel zeigt, wie ohne großen Aufwand durch Zeichenketten gewandert werden kann. Die Verwendung eines String-Tokenizers ist nicht nötig. Unsere statische Hilfsmethode <span class="clisting">out()</span> gibt die Abschnitte der Zeichenkette bezüglich eines <span class="clisting">BreakIterator</span> aus:</p>
<p class="tabunter"><strong>Listing 4.26    </strong>BreakIteratorDemo.java, out()</p>
<div class="listing"><pre class="prettyprint">static void out( String s,<span class="cfett"> BreakIterator iter</span> )
{
  iter.setText( s );

  for (<span class="cfett"> int last = iter.first(),next = iter.next();</span>
       <span class="cfett"> next != BreakIterator.DONE;</span>
       <span class="cfett"> last = next, next = iter.next()</span> )
  {
   <span class="cfett"> CharSequence part = s.subSequence( last, next );
</span><span class="clisting">
    if ( Character.isLetterOrDigit( part.charAt( 0 ) ) )
      System.out.println( part );
  }
}</span></pre></div>
<div class="bildbox">
<p><a name="IDA3OZD"></a><a onClick="OpenWin('bilder/breakiteratoruml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinbreakiteratoruml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Einmal sollen die Wörter und einmal die Sätze ausgegeben werden:</p>
<p class="tabunter"><strong>Listing 4.27    </strong>BreakIteratorDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">public static void main( String[] args )
{
  String helmutKohl1 = "Ich weiß, dass ich 1945 fünfzehn war und 1953 achtzehn.",
         helmutKohl2 = "Das ist eine klassische journalistische Behauptung. " +
                       "Sie ist zwar richtig, aber sie ist nicht die Wahrheit.";

  BreakIterator sentenceIter = BreakIterator.getSentenceInstance();
  BreakIterator wordIter     = BreakIterator.getWordInstance();
  BreakIterator lineIter     = BreakIterator.getLineInstance();

  out( helmutKohl1, sentenceIter );
  out( helmutKohl2, sentenceIter  );

  System.out.println( "-----------------" );

  out( helmutKohl1, wordIter );
  out( helmutKohl2, wordIter );

  System.out.println( "-----------------" );

  out( helmutKohl1, lineIter );
  out( helmutKohl2, lineIter );
}</pre></div>
<p>Die Ausgabe enthält (skizziert):</p>
<div class="listing"><pre class="prettyprint">Ich weiß, dass ich 1945 fünfzehn war und 1953 achtzehn.
Das ist eine klassische journalistische Behauptung.
Sie ist zwar richtig, aber sie ist nicht die Wahrheit.
-----------------
Ich
weiß
...
die
Wahrheit
-----------------
Ich
weiß,
...
die
Wahrheit.</pre></div>
<p>Im letzten Beispiel ist gut zu sehen, dass die Wörter am Ende ihre Leer- und Satzzeichen behalten.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="4.8 Zerlegen von Zeichenketten"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_04_007.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_04_009.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
