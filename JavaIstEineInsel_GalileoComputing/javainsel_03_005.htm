<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 3.5 Mit Referenzen arbeiten, Identität und Gleichheit</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 3.5 Mit Referenzen arbeiten, Identität und Gleichheit">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 3.5 Mit Referenzen arbeiten, Identität und Gleichheit">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navh" href="##mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_03_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_03_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf" class="navnav">3 Klassen und Objekte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_001.htm#mj14adccb998e49849e4cf60fea8a67179" class="navnav">3.1 Objektorientierte Programmierung (OOP)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_001.htm#mjb0eec540c2ccdc740aab19214a1f693f" class="navnav">3.1.1 Warum überhaupt OOP?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_001.htm#mj69adbf2f11e355d1e7d031e8ad309320" class="navnav">3.1.2 Denk ich an Java, denk ich an Wiederverwendbarkeit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_002.htm#mj5b619d9f15dfdb8c74f6dd581e8ae52e" class="navnav">3.2 Eigenschaften einer Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_002.htm#mj6d290cc6103e146af08763c9458a4f6e" class="navnav">3.2.1 Die Klasse Point</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_003.htm#mj120069350af17581cd54657a662eac08" class="navnav">3.3 Die UML (Unified Modeling Language) *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_003.htm#mj4a927ff99dbea7d0e3cc439fffbcbad4" class="navnav">3.3.1 Hintergrund und Geschichte zur UML</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_003.htm#mjfc37567f1830529a886ff45e660849f1" class="navnav">3.3.2 Wichtige Diagrammtypen der UML</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_003.htm#mj2cb798ef9fd7e336d385ba789fb4c16f" class="navnav">3.3.3 UML-Werkzeuge</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_004.htm#mj188cb023a2e250d061fbf7c4d5c358e2" class="navnav">3.4 Neue Objekte erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_004.htm#mjfb7e8fdd741bd1a69915f536838150a6" class="navnav">3.4.1 Ein Exemplar einer Klasse mit dem new-Operator anlegen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_004.htm#mjc322bfcdc7b9d9ca13c2f7fea535fac3" class="navnav">3.4.2 Garbage-Collector (GC) &#8211; Es ist dann mal weg</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_004.htm#mj8e78f63eedef225017005b13f5547df6" class="navnav">3.4.3 Deklarieren von Referenzvariablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_004.htm#mj0b5cf146c1b62f723db236bd7ebc5245" class="navnav">3.4.4 Zugriff auf Variablen und Methoden mit dem ».«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_004.htm#mja82dea77b8e3be5715de3f263f3f1798" class="navnav">3.4.5 Konstruktoren nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjaf1a068d749bd6f94d968e3de46e70dc" class="navh">3.5 Mit Referenzen arbeiten, Identität und Gleichheit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj21b86db09c28ddf9b92b692620c00cdb" class="navh">3.5.1 Die null-Referenz</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj5b75348c12a8a76224c3a28c7148b211" class="navh">3.5.2 null-Referenzen testen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj095218f6687d829b7b8cbf2f5dca4bf5" class="navh">3.5.3 Zuweisungen bei Referenzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj6fe8d2344da520f9a0e1f3d482613f14" class="navh">3.5.4 Methoden mit nicht-primitiven Parametern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj5ce8c0d2c9d1e78654a284dc9d91dacd" class="navh">3.5.5 Identität von Objekten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj4e22a27f86fe89bff20e4581e87c5c65" class="navh">3.5.6 Gleichheit und die Methode »equals()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_006.htm#mjcb5ba14934515b667f05cac0be6da85b" class="navnav">3.6 Kompilationseinheiten, Imports und Pakete schnüren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj5d25bb73620d12f4c40fc1e7ff537fad" class="navnav">3.6.1 Volle Qualifizierung und import-Deklaration</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mjf76adfcb77237accb6dd9a07caca8ed8" class="navnav">3.6.2 Mit import p1.p2.* alle Typen eines Pakets erreichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj1e65252e2f478166362e30ea3f74c456" class="navnav">3.6.3 Hierarchische Strukturen über Pakete</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj69f88a3bc5adac9bede26abe6fa3c166" class="navnav">3.6.4 Die package-Deklaration</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj36d2326bddd0f478fa0882b5a27d6230" class="navnav">3.6.5 Unbenanntes Paket (default package)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj929793f794e65ac195413a8ba075bac3" class="navnav">3.6.6 Klassen mit gleichen Namen in unterschiedlichen Paketen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj2fa9205c29a0f239d6e8fcb591e3be3e" class="navnav">3.6.7 Compilationseinheit (Compilation Unit)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj6dc709bf9e6ebef1937ea0c49e6585a2" class="navnav">3.6.8 Statischer Import</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj3931543d527206ffd3e586ef443e087b" class="navnav">3.6.9 Eine Verzeichnisstruktur für eigene Projekte *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_007.htm#mj11a4689950bdbe50e0c6342eb22737a6" class="navnav">3.7 Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj23a745f6df230125f0760b9755f8996e" class="navnav">3.7.1 Deklaration von Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mjc64e20fbebf1d1caf31860939b5d54eb" class="navnav">3.7.2 Arrays mit Inhalt</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj1f442b91fd4893d74e1fff78ea7a8b76" class="navnav">3.7.3 Die Länge eines Arrays über das Attribut length auslesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mjd5d447739968e0cd80112c7eb6cbbb3e" class="navnav">3.7.4 Zugriff auf die Elemente über den Index</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj5cde73b74f5421b00c5119616a69ac0b" class="navnav">3.7.5 Array-Objekte mit new erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj7d78b8e145bd133cc355b5ccd3e276b9" class="navnav">3.7.6 Fehler bei Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mja25a7f5d459dfc1dc052d23b42c40371" class="navnav">3.7.7 Die erweiterte for-Schleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj96f432d89b981f10f8c3be24373779ec" class="navnav">3.7.8 Arrays mit nicht-primitiven Elementen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj2627223aa77094452c665b55e7640b8b" class="navnav">3.7.9 Mehrdimensionale Arrays *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj7100c45624457324338529ef85e21324" class="navnav">3.7.10 Vorinitialisierte Arrays *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj83719cf25a616582d6a0ae43dc356cc6" class="navnav">3.7.11 Mehrere Rückgabewerte *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj7da5fd18833c690818519a0c82e8be6e" class="navnav">3.7.12 Methode mit variabler Argumentanzahl (Vararg)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mjd0a6c6bf70eb16174a7c44411d2afbf4" class="navnav">3.7.13 Klonen kann sich lohnen &#8211; Arrays vermehren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mja91938f74923b4f8ab51724e9530e8cb" class="navnav">3.7.14 Feldinhalte kopieren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj84d959216ad1aa6d5c9ccf5c270e4545" class="navnav">3.7.15 Die Klasse Arrays zum Vergleichen, Füllen und Suchen nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_008.htm#mj7795b13ad8d0d5a6aef1cfcc54ae1245" class="navnav">3.8 Der Einstiegspunkt für das Laufzeitsystem: »main()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_008.htm#mj1f3849b282fa092f3e15359abec6f7ed" class="navnav">3.8.1 Kommandozeilenargumente verarbeiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_008.htm#mj9236ac97667f672f1ca5bc79ac371e3f" class="navnav">3.8.2 Der Rückgabewert von »main()« und »System.exit()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_009.htm#mj670406e2fdaac338f8527952d3305745" class="navnav">3.9 Annotationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_009.htm#mj118f79ae762b7f700a379a4588737dd0" class="navnav">3.9.1 Annotationstypen @Override, @Deprecated, @SuppressWarnings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_010.htm#mj4c916b181f9b9d4767c8acb844fe8bf8" class="navnav">3.10 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjaf1a068d749bd6f94d968e3de46e70dc" name="mjaf1a068d749bd6f94d968e3de46e70dc"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">3.5</span> Mit Referenzen arbeiten, Identität und Gleichheit  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>In Java gibt es mit <span class="clisting">null</span> eine sehr spezielle Referenz, die Auslöser vieler Probleme ist. Doch ohne sie geht es nicht, und warum das so ist, wird der folgende Abschnitt zeigen. Anschließend wollen wir sehen, wie Objektvergleiche funktionieren und was der Unterschied zwischen Identität und Gleichheit ist.</p><a id="mj21b86db09c28ddf9b92b692620c00cdb" name="mj21b86db09c28ddf9b92b692620c00cdb"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">3.5.1</span> Die null-Referenz  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>In Java gibt es drei spezielle Referenzen: <span class="clisting">null</span>, <span class="clisting">this</span> und <span class="clisting">super</span>. (Wir verschieben <span class="clisting">this</span> und <span class="clisting">super</span> auf Kapitel 5, »Eigene Klassen schreiben«.) Das spezielle Literal <span class="clisting">null</span> lässt sich zur Initialisierung von Referenzvariablen verwenden. Die <span class="clisting">null</span>-Referenz ist typenlos, kann also jeder Referenzvariablen zugewiesen und jeder Methode übergeben werden, die ein Objekt erwartet. [<span class="clisting">null</span> verhält sich also so, als ob es Untertyp jeden anderen Typs wäre.
]  Daher ist Folgendes gültig:</p>
<div class="listing"><pre class="prettyprint">Point  p = null;
String s = null;
System.out.println( null );</pre></div>
<p>Da es nur ein <span class="clisting">null</span> gibt, ist zum Beispiel <span class="clisting">(Point) null == (String) null</span>. Der Wert ist ausschließlich für Referenzen vorgesehen und kann in keinen primitiven Typ wie die Ganzzahl 0 umgewandelt werden. [Hier unterscheiden sich C(++) und Java.
] </p>
<p>Mit <span class="clisting">null</span> lässt sich eine ganze Menge machen. Der Haupteinsatz sieht vor, damit uninitialisierte Referenzvariablen zu kennzeichnen, also auszudrücken, dass eine Referenzvariable auf kein Objekt verweist. In Listen oder Bäumen kennzeichnet <span class="clisting">null</span> aber auch das Fehlen eines gültigen Nachfolgers; <span class="clisting">null</span> ist dann ein gültiger Indikator und kein Fehlerfall.</p>
<h4 class="t4">Auf »null« geht nix, nur die NullPointerException</h4>
<p>Da sich hinter <span class="clisting">null</span> kein Objekt verbirgt, ist es auch nicht möglich, eine Methode aufzurufen. Der Compiler kennt zwar den Typ jedes Objekts, aber erst die Laufzeitumgebung (JVM) weiß, was referenziert wird. Wird versucht, über die <span class="clisting">null</span>-Referenz auf eine Eigenschaft eines Objekts zuzugreifen, löst eine JVM eine <span class="clisting">NullPointerException</span> [Der Name zeigt das Überbleibsel von Zeigern. Zwar haben wir es in Java nicht mit Zeigern zu tun, sondern mit Referenzen, doch heißt es <span class="clisting">NullPointerException</span> und nicht <span class="clisting">NullReferenceException</span>. Das erinnert daran, dass eine Referenz ein Objekt identifiziert und eine Referenz auf ein Objekt ein Pointer ist. Das .NET Framework ist hier konsequenter und nennt die Ausnahme <span class="clisting">NullReferenceException</span>.
]  aus:</p>
<p class="tabunter"><strong>Listing 3.2    </strong>NullPointer.java</p>
<div class="listing"><pre class="prettyprint">/*  1 */import java.awt.Point;
/*  2 */
/*  3 */public class NullPointer
/*  4 */{
/*  5 */  public static void main( String[] args )
/*  6 */  {
/*  7 */    Point  p = null;
/*  8 */    String s = null;
/*  9 */
/* 10 */   <span class="cfett"> p.</span>setLocation( 1, 2 );
/* 11 */    s.length();
/* 12 */  }
/* 13 */}</pre></div>
<p>Wir beobachten eine <span class="clisting">NullPointerException</span>, denn das Programm bricht bei <span class="clisting">p.setLocation()</span> mit folgender Ausgabe ab:</p>
<div class="listing"><pre class="prettyprint">java.lang.NullPointerException
    at NullPointer.main(NullPointer.java:<span class="cfett">10</span>)
 Exception in thread "main"</pre></div>
<p>Die Laufzeitumgebung teilt uns in der Fehlermeldung mit, dass sich der Fehler, die <span class="clisting">NullPointerException</span>, in Zeile 10 befindet.</p><a id="mj5b75348c12a8a76224c3a28c7148b211" name="mj5b75348c12a8a76224c3a28c7148b211"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">3.5.2</span> null-Referenzen testen  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mit dem Vergleichsoperator <span class="clisting">==</span> oder dem Test auf Ungleichheit mit <span class="clisting">!=</span> lässt sich leicht herausfinden, ob eine Referenzvariable wirklich ein Objekt referenziert oder nicht:</p>
<div class="listing"><pre class="prettyprint">if ( object == null )
  // Variable referenziert nichts, ist aber gültig mit null initialisert
else
  // Variable referenziert ein Objekt</pre></div>
<h4 class="t4">null-Test und Kurzschluss-Operatoren</h4>
<p>Wir wollen an dieser Stelle noch einmal auf die üblichen logischen Kurzschluss-Operatoren und den logischen, nicht kurzschließenden Operator zu sprechen kommen. Erstere werten Operanden nur so lange von links nach rechts aus, bis das Ergebnis der Operation feststeht. Auf den ersten Blick scheint es nicht viel auszumachen, ob alle Teilausdrücke ausgewertet werden oder nicht, in einigen Ausdrücken ist dies aber wichtig, wie das folgende Beispiel für die Variable <span class="clisting">s</span> vom Typ <span class="clisting">String</span> zeigt:</p>
<div class="listing"><pre class="prettyprint">if ( s != null &amp;&amp; ! s.isEmpty() )
  ...</pre></div>
<p>Die Bedingung testet, ob <span class="clisting">s</span> überhaupt auf ein Objekt verweist und ob die Länge größer 0 ist. Diese Schreibweise tritt häufig auf, und der Und-Operator zur Verknüpfung muss ein Kurzschluss-Operator sein, da es in diesem Fall ausdrücklich darauf ankommt, dass die Länge nur dann bestimmt wird, wenn die Variable <span class="clisting">s</span> überhaupt auf ein <span class="clisting">String</span>-Objekt verweist und nicht <span class="clisting">null</span> ist. Andernfalls bekämen wir bei <span class="clisting">s.length()</span> eine <span class="clisting">NullPointerException</span>, wenn jeder Teilausdruck ausgewertet würde und <span class="clisting">s</span> gleich <span class="clisting">null</span> wäre.   </p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Null in anderen Programmiersprachen   </span>Ist Java eine pure objektorientiere Programmiersprache? Nein, da Java einen Unterschied zwischen primitiven Typen und Referenztypen macht. Nehmen wir für einen Moment an, dass es primitive Typen nicht gibt. Wäre Java dann eine reine objektorientierte Programmiersprache, bei der jede Referenz ein pures Objekt referenziert? Die Antwort ist immer noch nein, da es mit <span class="clisting">null</span> etwas gibt, mit dem Referenzvariablen initialisiert werden können, aber was kein Objekt repräsentiert und keine Methoden besitzt. Und das kann bei der Dereferenzierung eine <span class="clisting">NullPointerException</span> geben. Andere Programmiersprachen haben andere Lösungsansätze, und <span class="clisting">null</span>-Referenzierungen sind nicht möglich. In der Sprache Ruby zum Beispiel ist immer alles ein Objekt. Wo Java mit null ein »nicht belegt« ausdrückt, macht das Ruby mit <span class="clisting">nil</span>. Der feine Unterschied ist, dass nil ein Exemplar der Klasse <span class="clisting">NilClass</span> ist, genau genommen ein Singleton, was es im System nur einmal gibt. <span class="clisting">nil</span> hat auch ein paar öffentliche Methoden wie <span class="clisting">to_s</span> (wie Javas <span class="clisting">toString()</span>), was dann einen leeren String liefert. Mit <span class="clisting">nil</span> gibt es keine <span class="clisting">NullPointerException</span> mehr, aber natürlich immer noch einen Fehler, wenn auf diesem Objekt vom Typ <span class="clisting">NilClass</span> eine Methode aufgerufen wird, die es nicht gibt. In Objective-C, der Standardsprache für iPhone-Programme, gibt es das Null-Objekt <span class="clisting">nil</span>. Üblicherweise passiert nichts, wenn eine Nachricht an das <span class="clisting">nil</span>-Objekt gesendet wird; die Nachricht wird einfach ignoriert.[Es gibt auch Compiler wie den GCC, der mit der Option <span class="clisting">-fno-nil-receivers</span> dieses Verhalten abschaltet, um schnelleren Maschinencode zu erzeugen. Denn letztendlich muss in Maschinencode immer ein Test stehen, der auf 0 prüft.
]</p>
</td>
</tr>
</table><br><a id="mj095218f6687d829b7b8cbf2f5dca4bf5" name="mj095218f6687d829b7b8cbf2f5dca4bf5"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">3.5.3</span> Zuweisungen bei Referenzen  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine Referenz erlaubt den Zugriff auf das referenzierte Objekt. Es kann durchaus mehrere Kopien dieser Referenz geben, die in Variablen mit unterschiedlichen Namen abgelegt sind &#8211; so wie eine Person von den Mitarbeitern als »Chefin« angesprochen wird, aber von ihrem Mann als »Schnuckiputzi«. Dies nennt sich auch <span class="ckursiv">Alias</span>.</p>
<p>Wir wollen uns dies an einem Punkt-Objekt näher ansehen, das wir unter einem alternativen Variablennamen ansprechen wollen:</p>
<div class="listing"><pre class="prettyprint">Point p = new Point();
Point q = p;</pre></div>
<div class="bildbox">
<p><a name="IDAVPYV"></a><a onClick="OpenWin('bilder/365_java_03_006.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_03_006.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Ein Punkt-Objekt wird erzeugt und mit der Variablen <span class="clisting">p</span> referenziert. Die zweite Zeile speichert nun dieselbe Referenz in der Variablen <span class="clisting">q</span>. Danach verweisen <span class="clisting">p</span> und <span class="clisting">q</span> auf dasselbe Objekt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Dies hat zur Konsequenz, dass bei einer Änderung des Punkt-Objekts über die in der Variablen <span class="clisting">p</span> gespeicherte Referenz die Änderung auch bei einem Zugriff über die Variable <span class="clisting">q</span> beobachtet werden kann:</p>
<div class="listing"><pre class="prettyprint">Point p = new Point();
Point q = p;
p.x = 10;
System.out.println( q.x );            // 10
q.y = 5;
System.out.println( p.y );            // 5</pre></div>
</td>
</tr>
</table><br><a id="mj6fe8d2344da520f9a0e1f3d482613f14" name="mj6fe8d2344da520f9a0e1f3d482613f14"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">3.5.4</span> Methoden mit nicht-primitiven Parametern  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Dass sich das gleiche Objekt unter zwei Namen (über zwei verschiedene Variablen) ansprechen lässt, können wir gut bei Methoden beobachten. Eine Methode, die über den Parameter eine Objektreferenz erhält, kann auf das übergebene Objekt zugreifen. Das bedeutet, die Methode kann dieses Objekt mit den angebotenen Methoden ändern oder auf die Attribute zugreifen:</p>
<p class="tabunter"><strong>Listing 3.3    </strong>InitPoint.java</p>
<div class="listing"><pre class="prettyprint">import java.awt.*;

public class InitPoint
{

  static void clear(<span class="cfett"> Point p</span> )
  {
   <span class="cfett"> p</span>.setLocation( 0, 0 );
  }

  public static void main( String[] args )
  {
   <span class="cfett"> Point q</span> = new Point( 47, 11 );   // Koordinaten gesetzt auf (x=47,y=11)
    clear(<span class="cfett"> q</span> );
    System.out.println(<span class="cfett"> q</span>.x );     // 0
  }
}</pre></div>
<p>In dem Moment, in dem <span class="clisting">main()</span> die statische Methode <span class="clisting">clear()</span> aufruft, gibt es sozusagen die Namen <span class="clisting">q</span> und <span class="clisting">p</span> für das Objekt, wobei nur <span class="clisting">clear()</span> das Objekt unter <span class="clisting">p</span> kennt und <span class="clisting">main()</span> nicht und <span class="clisting">clear()</span> von dem Namen <span class="clisting">q</span> keine Ahnung hat.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Der Name einer Parametervariablen darf durchaus mit dem Namen einer lokalen Variablen übereinstimmen, was die Semantik nicht verändert. In unserem Fall hätte <span class="clisting">clear()</span> die <span class="clisting">Point</span>-Variable auch <span class="clisting">q</span> nennen können.</p>
</td>
</tr>
</table><br><h4 class="t4">Wertübergabe und Referenzübergabe per »Call by Value«</h4>
<p>Primitive Variablen werden immer per Wert kopiert (engl. <span class="ckursiv">Call by Value</span>). Das Gleiche gilt für Referenzen. Daher hat auch die folgende statische Methode keine Nebenwirkungen:</p>
<div class="listing"><pre class="prettyprint">static void clear( Point p )
{
  p = new Point();
}</pre></div>
<p>Nach der Zuweisung referenziert die Variable <span class="clisting">p</span> ein anderes Punkt-Objekt, und das an die Methode übergebene Argument geht verloren. Diese Änderung wird nach außen hin nicht sichtbar, was bedeutet, dass der Aufrufer kein neues Objekt unter sich hat.</p>
<h4 class="t4">»Call by Reference« gibt es in Java nicht &#8211; ein Blick auf C und C++ *</h4>
<p>In C++ gibt es eine weitere Argumentübergabe, die sich <span class="ckursiv">Call by Reference</span> nennt. Würde eine Methode wie <span class="clisting">clear()</span> mit Referenzsemantik deklariert, würde die Variable <span class="clisting">p</span> ein Synonym darstellen, also einen anderen Namen für eine Variable &#8211; in unserem Fall <span class="clisting">q</span>. Damit würde die Zuweisung im Rumpf den Zeiger auf ein neues Objekt legen. Die <span class="clisting">swap()</span>-Funktion ist ein gutes Beispiel für die Nützlichkeit von Call by Reference:</p>
<div class="listing"><pre class="prettyprint">void swap( int&amp; a, int&amp; b )
{
  int tmp = a;
  a = b;
  b = tmp;
}</pre></div>
<p>Zeiger und Referenzen sind in C++ etwas anderes, was Spracheinsteiger leicht irritiert. Denn in C++ und auch C hätte eine vergleichbare <span class="clisting">swap()</span>-Funktion auch mit Zeigern implementiert werden können:</p>
<div class="listing"><pre class="prettyprint">void swap( int *a, int *b )
{
   int tmp = *a;
   *a = *b;
   *b = tmp;
}</pre></div>
<p>Die Implementierung gibt in C(++) einen Verweis auf das Argument.</p><a id="mj5ce8c0d2c9d1e78654a284dc9d91dacd" name="mj5ce8c0d2c9d1e78654a284dc9d91dacd"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">3.5.5</span> Identität von Objekten  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der Vergleichsoperator <span class="clisting">==</span> ist für alle Datentypen so definiert, dass er die vollständige Übereinstimmung zweier Werte testet. Bei primitiven Datentypen ist das einfach einzusehen und bei Referenztypen im Prinzip genauso. Der Operator <span class="clisting">==</span> testet bei Referenzen, ob diese übereinstimmen, also auf das gleiche Objekt verweisen. Demnach sagt der Test etwas über die Identität der referenzierten Objekte aus, aber nichts darüber, ob zwei verschiedene Objekte möglicherweise den gleichen Inhalt haben. Der Inhalt der Objekte spielt bei <span class="clisting">==</span> keine Rolle.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zwei Objekte mit drei unterschiedlichen Punktvariablen <span class="clisting">p</span>, <span class="clisting">q</span>, <span class="clisting">r</span> und die Bedeutung von <span class="clisting">==</span>:</p>
<div class="listing"><pre class="prettyprint">Point p = new Point( 10, 10 );
Point q = p;
Point r = new Point( 10, 10 );
if ( p == q )    // wahr, da p und q dasselbe Objekt referenzieren
  ...
if ( p == r )    // falsch, da p und r zwei verschiedene Punkt-Objekte
  ...            // referenzieren, die zufällig dieselben Koordinaten haben</pre></div>
</td>
</tr>
</table><br><p>Da <span class="clisting">p</span> und <span class="clisting">q</span> auf dasselbe Objekt verweisen, ergibt der Vergleich <span class="clisting">true</span>. <span class="clisting">p</span> und <span class="clisting">r</span> referenzieren unterschiedliche Objekte, die aber zufälligerweise den gleichen Inhalt haben. Doch woher soll der Compiler wissen, wann zwei Punkt-Objekte inhaltlich gleich sind? Weil sich ein Punkt durch die Attribute <span class="clisting">x</span> und <span class="clisting">y</span> auszeichnet? Die Laufzeitumgebung könnte voreilig die Belegung jeder Objektvariablen vergleichen, doch das entspricht nicht immer einem korrekten Vergleich, so wie wir ihn uns wünschen. Ein Punkt-Objekt könnte etwa zusätzlich die Anzahl der Zugriffe zählen, die jedoch für einen Vergleich, der auf der Lage zweier Punkte basiert, nicht berücksichtigt werden darf.</p><a id="mj4e22a27f86fe89bff20e4581e87c5c65" name="mj4e22a27f86fe89bff20e4581e87c5c65"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">3.5.6</span> Gleichheit und die Methode »equals()«  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die allgemein gültige Lösung besteht darin, die Klasse festlegen zu lassen, wann Objekte gleich sind. Dazu kann jede Klasse eine Methode <span class="clisting">equals()</span> implementieren, die Exemplare dieser Klasse mit beliebigen anderen Objekten vergleichen kann. Die Klassen entscheiden immer nach Anwendungsfall, welche Attribute sie für einen Gleichheitstest heranziehen, und <span class="clisting">equals()</span> liefert <span class="clisting">true</span>, wenn die gewünschten Zustände (Objektvariablen) übereinstimmen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zwei inhaltlich gleiche Punkt-Objekte, verglichen mit <span class="clisting">==</span> und <span class="clisting">equals()</span>:</p>
<div class="listing"><pre class="prettyprint">Point p = new Point( 10, 10 );
Point q = new Point( 10, 10 );

  ...
if ( p.<span class="cfett">equals</span>(q) )    // true. Da symmetrisch auch q.<span class="cfett">equals</span>(p)
  ...</pre></div>
<p class="BStandard">Nur <span class="clisting">equals()</span> testet in diesem Fall die inhaltliche Gleichheit.</p>
</td>
</tr>
</table><br><p>Bei den unterschiedlichen Bedeutungen müssen wir demnach die Begriffe »Identität« und »Gleichheit« von Objekten sorgfältig unterscheiden. Daher noch einmal eine Zusammenfassung:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 3.1    </strong>Identität und Gleichheit von Objekten</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Identität/Gleichheit</span>
</td>
<td class="tabellenkopf"><span class="cfett">Getestet mit</span>
</td>
<td class="tabellenkopf"><span class="cfett">Implementierung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="cfett"><span class="cfett">Identität der Referenzen</span></span></p>
</td>
<td class="tabellentext">
<p><span class="cfett"></span><span class="clisting"><span class="cfett">==</span></span></p>
</td>
<td class="tabellentext">
<p><span class="cfett">nichts zu tun</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="cfett"><span class="cfett">Gleichheit der Zustände</span></span></p>
</td>
<td class="tabellentext">
<p><span class="cfett"></span><span class="clisting"><span class="cfett">equals()</span></span></p>
</td>
<td class="tabellentext">
<p><span class="cfett">abhängig von der Klasse</span></p>
</td>
</tr>
</table><br><h4 class="t4">Es gibt immer ein »equals()« *</h4>
<p>Glücklicherweise müssen wir als Programmierer nicht lange darüber nachdenken, ob eine Klasse eine <span class="clisting">equals()</span>-Methode anbieten soll oder nicht. Jede Klasse besitzt sie, da die universelle Oberklasse <span class="clisting">Object</span> sie vererbt. Wir greifen hier auf Kapitel 5, »Eigene Klassen schreiben«, vor; der Abschnitt kann aber übersprungen werden.</p>
<p>Die Unterklasse <span class="clisting">Point</span> überschreibt <span class="clisting">equals()</span>, wie die API-Dokumentation zeigt. Werfen wir einen Blick auf die <span class="clisting">equals()</span>-Methode aus <span class="clisting">Point</span>, um eine Vorstellung von der Arbeitsweise zu bekommen:</p>
<div class="listing"><pre class="prettyprint">public boolean equals( Object obj )
{
  if ( obj instanceof Point ) {
    Point pt = (Point) obj;
    return<span class="cfett"> (x == pt.x) &amp;&amp; (y == pt.y)</span>;   // (*)
  }
  return super.equals( obj );
}</pre></div>
<p>Obwohl bei diesem Beispiel für uns einiges neu ist, erkennen wir den Vergleich in der Zeile (*). Hier vergleicht das <span class="clisting">Point</span>-Objekt seine eigenen Attribute mit den Attributen des Objekts, das als Argument an <span class="clisting">equals()</span> übergeben wurde.</p>
<h4 class="t4">Die Oberklasse »Object« und ihr »equals()« *</h4>
<p>Wenn eine Klasse keine <span class="clisting">equals()</span>-Methode angibt, dann erbt sie eine Implementierung aus der Klasse <span class="clisting">Object</span>, die wie folgt aussieht:</p>
<div class="listing"><pre class="prettyprint">public boolean equals( Object obj )
{
  return ( this == obj );
}</pre></div>
<p>Wir erkennen, dass hier die Gleichheit auf die Gleichheit der Referenzen abgebildet wird. Ein inhaltlicher Vergleich findet nicht statt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Der Datentyp für den Parameter in der <span class="clisting">equals()</span>-Methode ist immer <span class="clisting">Object</span> und niemals etwas anderes, da sonst <span class="clisting">equals()</span> nicht überschrieben, sondern überladen wird. Folgendes für eine Klasse <span class="clisting">C</span> ist also falsch:</p>
<div class="listing"><pre class="prettyprint">public class C
{
  private int v;
  public boolean equals( <span class="cfett">C</span> that ) { return this.v == that.v; }
}</pre></div>
<p class="BStandard">Im Vokabular der Informatiker gesprochen: Java unterstützt bisher keine kovarianten Typ-Parameter, wohl aber seit Java 5 kovariante Rückgabetypen.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="3.5 Mit Referenzen arbeiten, Identität und Gleichheit"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_03_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_03_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
