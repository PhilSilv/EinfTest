<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 22.3 Auf der Serverseite</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 22.3 Auf der Serverseite">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 22.3 Auf der Serverseite">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_22_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_22_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675" class="navnav">22 Verteilte Programmierung mit RMI</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_22_001.htm#mjc8d01e7b1e609727665672704136f7cf" class="navnav">22.1 Entfernte Objekte und Methoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_001.htm#mje82095329689bf89c1862e2b6fbeb0c9" class="navnav">22.1.1 Stellvertreter helfen bei entfernten Methodenaufrufen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_001.htm#mje99961d03b127857d323bffd2089185b" class="navnav">22.1.2 Standards für entfernte Objekte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_22_002.htm#mj6bad98aba14b045e29e151814ab5955e" class="navnav">22.2 Java Remote Method Invocation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_002.htm#mj59ee9008b291869222f1cc601f3b5901" class="navnav">22.2.1 Zusammenspiel von Server, Registry und Client</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_002.htm#mj562fca032268f8b8bf8bb924e056f0b9" class="navnav">22.2.2 Wie die Stellvertreter die Daten übertragen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_002.htm#mj4ce4bbe40e2078d648ec4bf9f52fdddf" class="navnav">22.2.3 Probleme mit entfernten Methoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_002.htm#mj735a47023debfa1e3c9c5ec200d7c515" class="navnav">22.2.4 Nutzen von RMI bei Middleware-Lösungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_002.htm#mj7b2415eae1326c7ce0c895b14a8e1b2d" class="navnav">22.2.5 Zentrale Klassen und Schnittstellen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_002.htm#mj8624c38d33eb94920191a427255da931" class="navnav">22.2.6 Entfernte und lokale Objekte im Vergleich</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj749f2b984cd308a326164014d0d2d948" class="navh">22.3 Auf der Serverseite</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjbcd32ef2677eeef470ce29bc53979102" class="navh">22.3.1 Entfernte Schnittstelle deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjd2064ee46fcea675cbbd8cb3a2cc3c17" class="navh">22.3.2 Remote-Objekt-Implementierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj4e65ba9a4b9e5ce9ad5a469c45c82497" class="navh">22.3.3 Stellvertreterobjekte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj8111351751b28126150fb2f1fe85b38d" class="navh">22.3.4 Der Namensdienst (Registry)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj0832e9161f5e1108a79701c1c5631376" class="navh">22.3.5 Remote-Objekt-Implementierung exportieren und beim Namensdienst anmelden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj06c3e7c6fb23aeeea372cada9e2f6be3" class="navh">22.3.6 Einfaches Logging</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj776dcf0a126131ad729018e1611e76a2" class="navh">22.3.7 Aufräumen mit dem DGC</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_22_004.htm#mj0a4bec468c90522e147ffb2e2618a1cb" class="navnav">22.4 Auf der Clientseite</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_22_005.htm#mj275664e5596157f99cef24d531079ea6" class="navnav">22.5 Entfernte Objekte übergeben und laden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_22_005.htm#mjb58028444800b63e52f52616692ebc5f" class="navnav">22.5.1 Klassen vom RMI-Klassenlader nachladen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_22_006.htm#mj990f3bd8367337d678c2a028be584a63" class="navnav">22.6 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mj749f2b984cd308a326164014d0d2d948" name="mj749f2b984cd308a326164014d0d2d948"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">22.3</span> Auf der Serverseite  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Um entfernte Objekte mit ihren Methoden in Java-Programmen zu nutzen, sind einige Arbeitsschritte nötig, die wir im Folgenden kurz skizzieren. An den Schritten spiegelt sich der Programmieraufwand wider:</p>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>1.</strong></td>
<td valign="top" width="100%" align="left"> Eine entfernte Schnittstelle deklariert Methoden.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>2.</strong></td>
<td valign="top" width="100%" align="left"> Eine Klasse implementiert die Schnittstelle und füllt die Methode mit Leben. Dies bildet die Remote-Objekt-Implementierung.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>3.</strong></td>
<td valign="top" width="100%" align="left"> Mit dieser Implementierung benötigen wir ein exportiertes Exemplar. Wir melden es beim Namensdienst an, damit der Client es finden kann. Dies schließt die Serverseite ab.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table><a id="mjbcd32ef2677eeef470ce29bc53979102" name="mjbcd32ef2677eeef470ce29bc53979102"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">22.3.1</span> Entfernte Schnittstelle deklarieren  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Damit der Client eine entfernte Methode nutzen kann, muss er ein Stellvertreterobjekt befragen. Dieses packt die Daten ein und übermittelt sie. Die Stellvertreterobjekte erzeugt Java selbstständig. Damit der Generator korrekten Quellcode für die Übertragung erstellen kann, ist eine Beschreibung nötig. Die Deklaration muss die Signatur eindeutig spezifizieren, und damit weiß der Client, wie die Methode aussieht, die er aufrufen kann, und der Server kann die Methode dann beschreiben. Normalerweise gibt es für die Spezifikation der entfernten Methoden spezielle Beschreibungssprachen (wie IDL bei CORBA), doch bei RMI reicht es, ein Java-Interface mit den Methoden zu deklarieren:</p>
<p class="tabunter"><strong>Listing 22.1    </strong>com/tutego/insel/rmi/Adder.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.rmi;

import java.rmi.Remote;
import java.rmi.RemoteException;

public interface Adder<span class="cfett"> extends Remote</span>
{
  int add( int x, int y )<span class="cfett"> throws RemoteException</span>;
}</pre></div>
<p>An diesem Beispiel können wir mehrere wichtige Eigenschaften der Schnittstelle ablesen:</p>
<ul class="gp">
<li>Die entfernte Schnittstelle ist öffentlich. Wenn sie nur paketsichtbar oder eingeschränkter ist, kann der Client die entfernte Methode nicht finden, wenn er danach verlangt.</li>
</ul>
<ul class="gp">
<li>Die eigene Schnittstelle erweitert die Schnittstelle <span class="clisting">Remote</span>. Nur die Klassen, die <span class="clisting">Remote</span> implementieren, können entfernte Methoden anbieten. <span class="clisting">Remote</span> ist allerdings leer und damit eine Markierungsschnittstelle.</li>
</ul>
<ul class="gp">
<li>Die angebotenen Methoden können unbeabsichtigte Fehler auslösen, zum Beispiel, wenn das Transportsystem zusammenbricht. Für diesen Fall muss jede Methode <span class="clisting">RemoteException</span> in einer <span class="clisting">throws</span>-Anweisung aufführen.</li>
</ul>
<ul class="gp">
<li>Eine entfernte Methode darf Parameter besitzen. Sind die Argumente primitive Werte, werden diese einfach übertragen. Handelt es sich um Objekte, so müssen diese serialisierbar sein.</li>
</ul><a id="mjd2064ee46fcea675cbbd8cb3a2cc3c17" name="mjd2064ee46fcea675cbbd8cb3a2cc3c17"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">22.3.2</span> Remote-Objekt-Implementierung  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der Client nutzt letztendlich das vom Server bereitgestellte entfernte Objekt. Der Server steht in der Pflicht, eine Implementierung der Remote-Schnittstelle anzugeben, sodass diese im nächsten Schritt exportiert und damit angemeldet werden kann.</p>
<p>Die Implementierung der Geschäftslogik ist einfach:</p>
<p class="tabunter"><strong>Listing 22.2    </strong>com/tutego/insel/rmi/AdderImpl.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.rmi;

public class AdderImpl<span class="cfett"> implements Adder</span>
{
  @Override public int add( int x, int y )
  {
    return x + y;
  }
}</pre></div>
<p>Da die Klasse eine Implementierung der Schnittstelle ist, geben wir ihr die Endung <span class="ckursiv">Impl</span> (das ist eine übliche Namensgebung, aber keine Pflicht).</p>
<p>Es steht frei, andere Methoden anzugeben, die nicht in der Schnittstelle vorgegeben sind, doch sind diese natürlich nicht nach außen hin sichtbar. Die Argumente und Rückgabewerte können von jedem beliebigen Datentyp sein. Bei primitiven Datentypen werden spezielle <span class="clisting">read()</span>- und <span class="clisting">write()</span>-Folgen generiert. Objekte müssen die Schnittstelle <span class="clisting">Serializable</span> implementieren (oder <span class="clisting">Remote</span> sein). Dann werden die lokalen Objekte als Kopie übertragen. Über die Serialisierung werden alle nicht-statischen und nicht-transienten Attribute übermittelt. Ist das Argument wiederum <span class="clisting">instanceof Remote</span>, wird dieser Verweis als einfache Referenz übergeben. In Wirklichkeit ist die Referenz ein Verweis auf den Stellvertreter.</p><a id="mj4e65ba9a4b9e5ce9ad5a469c45c82497" name="mj4e65ba9a4b9e5ce9ad5a469c45c82497"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">22.3.3</span> Stellvertreterobjekte  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Stellvertreter sind Objekte auf der Client- und Serverseite, die die tatsächliche Kommunikation betreiben. Unsere Clients programmieren ausschließlich gegen eine Remote-Schnittstelle, aber der Stellvertreter (Proxy) auf der Clientseite ist die Implementierung der Remote-Schnittstelle, die tatsächlich die Clientanfrage annimmt und auch an das Netzwerk weitergibt. Von Hand müssen diese Stellvertreter nicht programmiert werden; Java generiert sie zur Laufzeit.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Vor Java 5 musste der RMI-Compiler rmic verwendet werden. Der Generator erzeugte den Stub (Stellvertreter auf der Clientseite) und den Skeleton (Proxy auf der Serverseite) aus der Methodenbeschreibung der Remote-Klasse. Steht auf einer Seite der Client-Server-Kommunikation nicht mindestens eine Java 5-Implementierung, so muss doch wieder rmic zum Einsatz kommen.</p>
</td>
</tr>
</table><br><a id="mj8111351751b28126150fb2f1fe85b38d" name="mj8111351751b28126150fb2f1fe85b38d"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">22.3.4</span> Der Namensdienst (Registry)  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der RMI-Dienst muss im nächsten Schritt beim Namensdienst das entfernte Objekt unter einem öffentlichen Namen anmelden, sodass der Client es finden kann. Java bietet zwei Namensdienste, die in Frage kommen: die RMI-Registry und den JNDI-Dienst. [Weiteres dazu unter <span class="ckursiv">http://java.sun.com/javase/6/docs/technotes/guides/jndi/jndi-rmi.html</span>.
]  Beides lässt sich in Java nutzen, aber die RMI-Registry ist etwas leichter zu verwenden.</p>
<p>Die Registry ist ein eigenständiger Dienst, der auf zwei Arten gestartet werden kann:</p>
<ul class="gp">
<li>beim Server selbst, der über <span class="clisting">LocateRegistry.createRegistry()</span> den Namensdienst vor dem Exportieren aufbaut</li>
</ul>
<ul class="gp">
<li>über ein externes in Java programmiertes Dienstprogramm <span class="ckursiv">rmiregistry</span>, das im <span class="ckursiv">bin</span>-Verzeichnis eines JDKs mitgeliefert wird</li>
</ul>
<p>Die <span class="clisting">rmiregistry</span> von Hand zu starten, hat den Vorteil, dass Client, RMI-Dienst und Registry auf drei unterschiedlichen Servern laufen können, die abweichende Lebenszyklen haben dürfen. Wenn der RMI-Server die Registry automatisch startet, ist das praktisch und hat den Vorteil, dass Anpassungen am Klassenpfad nicht nötig sind und der Anwender es nicht vergessen kann.</p>
<h4 class="t4">Der Server startet die Registry selbst</h4>
<p>Um die RMI-Registry zu starten, wird einfach <span class="clisting">LocateRegistry</span><span class="clisting">.createRegistry()</span> aufgerufen:</p>
<div class="listing"><pre class="prettyprint">try
{
  LocateRegistry.createRegistry( Registry.REGISTRY_PORT );
}
catch ( RemoteException e )  { /* ... */ }</pre></div>
<p>Anschließend ist der Namensdienst gestartet, und der Server kann seine Dienste dort anmelden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.rmi.registry.<span class="cfett">LocateRegistry</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static Registry createRegistry()</span>
Startet den Namensdienst auf dem Port 1099.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static Registry createRegistry( int port )</span>
Startet den Namensdienst auf dem angegebenen Port. <span class="clisting">Registry.REGISTRY_PORT</span> ist der Standard-Port 1099.</li>
</ul>
<h4 class="t4">Das Dienstprogramm »rmiregistry«</h4>
<p>Unter Windows starten wir den Dienst in einer neuen DOS-Box (sozusagen im Hintergrund) mit folgender Zeile:</p>
<div class="listing"><pre class="prettyprint">$<span class="cfett"> start rmiregistry</span></pre></div>
<p>Unter Unix-Systemen so:</p>
<div class="listing"><pre class="prettyprint">$<span class="cfett"> rmiregistry &amp;</span></pre></div>
<p>Die Registry können wir uns somit als einen einfachen Assoziativspeicher vorstellen, der Namen und Stub-Objekte verbindet. Der Zustand des Stubs wird bei der Registry hinterlegt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die RMI-Registry ist ein Java-Programm, welches zwingend die Remote-Schnittstellen unserer RMI-Klassen im Klassenpfad benötigt. Entweder ist dazu <span class="ckursiv">rmiregistry</span> auf der Konsole in dem Pfad zu starten, in dem die Klassendateien des RMI-Servers stehen, oder mit dem Schalter -Djava.rmi.server.codebase=file:/pfad der Ort der Typen zu bestimmen. [Mehr zur Codebase unter <span class="ckursiv">http://java.sun.com/javase/6/docs/technotes/guides/rmi/codebase.html</span>.] Der Start der RMI-Registry über <span class="clisting">LocateRegistry.createRegistry()</span> spart das natürlich, denn so stehen die Klassen automatisch im Suchpfad.</p>
</td>
</tr>
</table><br><h4 class="t4">Der Port</h4>
<p>Der Namensdienst läuft standardmäßig auf dem Port 1099. Für Dienste hinter einer Firewall ist es bedeutend, dass dieser Port auch anders lauten kann. Eine andere Port-Nummer lässt sich einfach als Argument angeben:</p>
<div class="listing"><pre class="prettyprint">$<span class="cfett"> start rmiregistry 2001</span></pre></div>
<p>Der angegebene Port dient nur der Vermittlung vom Client zum Namensdienst. Die Kommunikation von Client und Server läuft über einen anderen Port.</p>
<p>An dieser Stelle haben wir schon fast alles beisammen. Der Namensdienst läuft und wartet auf den Server und den Client. Beginnen wir mit dem Server. Er ist ein normales Java-Programm ohne Einschränkungen und muss weder etwas mit <span class="clisting">Remote</span> noch mit <span class="clisting">Serializable</span> zu schaffen haben.</p><a id="mj0832e9161f5e1108a79701c1c5631376" name="mj0832e9161f5e1108a79701c1c5631376"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">22.3.5</span> Remote-Objekt-Implementierung exportieren und beim Namensdienst anmelden  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Bevor ein Client sich mit dem Server verbinden und die entfernten Methoden aufrufen kann, muss unser Server für eingehende Netzwerkverbindungen bereitet sein. Aus diesem Grund muss unsere Remote-Objekt-Implementierung exportiert werden. Dann erst kann unser Server eingehende RMI-Verbindungen annehmen. [Java setzt für die Netzwerkkommunikation vorübersetzte Stubs oder automatische generierte Proxy-Objekte ein. Mehr dazu unter in der API-Dokumentation unter <span class="ckursiv">http://java.sun.com/javase/6/docs/api/java/</span><span class="ckursiv">rmi/server/UnicastRemoteObject.html.</span>
]  Nach dem Exportieren erfolgt die Anmeldung beim Namensdienst, und der Server-Code ist abgeschlossen. Wir starten vorher die RMI-Registry aus dem Programm, und dann ist der Server bereit:</p>
<p class="tabunter"><strong>Listing 22.3    </strong>com/tutego/insel/rmi/Server.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.rmi;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.RemoteServer;
import java.rmi.server.UnicastRemoteObject;

public class Server
{
  public static void main( String[] args ) throws RemoteException
  {
    LocateRegistry.createRegistry( Registry.REGISTRY_PORT );

    AdderImpl adder = new AdderImpl();
    Adder stub = (Adder)<span class="cfett"> UnicastRemoteObject.exportObject( adder, 0 )</span>;
    RemoteServer.setLog( System.out );

    Registry registry = LocateRegistry.getRegistry();
    registry.<span class="cfett">rebind</span>( "Adder", stub );

    System.out.println( "Adder angemeldet" );
  }
}</pre></div>
<h4 class="t4">Remote-Objekt-Implementierung exportieren</h4>
<p>Zum Exportieren von Remote-Objekten wird die Klasse <span class="clisting">UnicastRemoteObject</span> verwendet. Sie lässt sich auf zwei Arten nutzen:</p>
<ul class="gp">
<li>Das Remote-Objekt wird mit der statischen Methode <span class="clisting">UnicastRemoteObject.exportObject(Remote)</span> exportiert. Die Rückgabe ist ein Remote-Objekt-Proxy, der beim Anmelden beim Namensdienst verwendet wird.</li>
</ul>
<ul class="gp">
<li>Die Remote-Objekt-Klasse erweitert <span class="clisting">UnicastRemoteObject</span>. Im Konstruktor von <span class="clisting">UnicastRemoteObject</span>, den unsere Unterklasse ja automatisch aufrufen wird, steht ein Aufruf von <span class="clisting">exportObject()</span>, sodass sich das Objekt selbst exportiert. [Eine Unterklasse von <span class="clisting">UnicastRemoteObject</span> zu erzeugen, hat gegenüber <span class="clisting">exportObject()</span> den Vorteil, dass die Methoden <span class="clisting">hashCode()</span>, <span class="clisting">equals()</span>, <span class="clisting">toString()</span> über die <span class="clisting">UnicastRemoteObject</span>-Oberklasse <span class="clisting">RemoteObject</span> implementiert sind. Das ist interessant, wenn unser exportiertes Objekt als Parameter oder Rückgabe eines Methodenaufrufs über die Leitung geht und die drei Methoden etwa beim Hashing wichtig sind.
] </li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.rmi.server.<span class="cfett">UnicastRemoteObject</span>
extends RemoteServer</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static RemoteStub exportObject( Remote obj ) throws RemoteException</span>
Exportiert das Remote-Objekt und liefert einen Proxy zurück.</li>
</ul>
<h4 class="t4">Anmelden/Abmelden am Namensdienst</h4>
<p>Ist das Remote-Proxy-Objekt exportiert, wird es dem Namensdienst mit <span class="clisting">rebind()</span> oder <span class="clisting">bind()</span> bekannt gemacht. Die RMI-Registry ist als assoziative Datenstruktur zu verstehen, die einen Objektnamen mit einem entfernten Objekt-Proxy assoziiert (es ist der Proxy und nicht das Remote-Objekt <span class="clisting">AdderImpl</span>, obwohl beide die <span class="clisting">Remote</span>-Schnittstelle implementieren &#8211; <span class="clisting">Adder</span> in unserem Fall).</p>
<p>Die Notation für den Objekt-Namen beim Anmelden ist wie bei einer URL:</p>
<p><span class="ckursiv">rmi://</span><span class="ckursiv">Host:Port/Objektname</span></p>
<p>Ist ein alternativer Port für den Namensdienst gewählt, stellen wir diesen mit einem Doppelpunkt wie üblich hintenan &#8211; sonst läuft der Namensdienst standardmäßig unter 1099. Der vorangestellte Protokollname <span class="clisting">rmi</span> ist optional, sodass er auch weggelassen werden kann. Ist kein Rechnername angegeben, wird <span class="clisting">localhost</span> angenommen. Daher steht im oberen Beispiel einfach nur <span class="clisting">rebind("Adder", stub)</span>.</p>
<p>Zum Binden der Informationen bietet der Namensdienst zwei unterschiedliche Methoden an:</p>
<ul class="gp">
<li><span class="clisting">bind()</span> trägt den Service im Namensdienst ein, aber wenn schon ein anderer Dienst unter dem gleichen Namen läuft, wird eine <span class="clisting">AlreadyBoundException</span> ausgelöst.</li>
</ul>
<ul class="gp">
<li><span class="clisting">rebind()</span> dagegen fügt einen neuen Eintrag mit dem gleichen Namen hinzu oder überschreibt den alten.</li>
</ul>
<p>Ist der Dienst nicht mehr erwünscht, meldet <span class="clisting">unbind()</span> ihn wieder ab. Der Namensdienst muss wie beim Anmelden laufen. Aus Sicherheitsgründen erlaubt der Namensdienst nur dem Server, der das Objekt seinerzeit angemeldet hat, es wieder abzumelden. Einen zusätzlichen Namen müssen wir nicht angeben.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.rmi.registry.<span class="cfett">LocateRegistry</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static void static Registry getRegistry()</span>
Liefert einen Verweis auf die Registry oder löst eine <span class="clisting">RemoteException</span> aus, wenn die Registry nicht lokalisiert werden konnte.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">interface java.rmi.registry.<span class="cfett">Registry</span>
extends Remote</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">void bind( String name, Remote obj )</span>
  <span class="clisting">throws AlreadyBoundException, MalformedURLException, RemoteException</span>
Bindet das Objekt <span class="clisting">obj</span>, das in der Regel der Stub ist, an den Namen <span class="clisting">name</span> und trägt es so in der Registrierung ein. Eine <span class="clisting">AlreadyBoundException</span> zeigt an, dass der Name schon vergeben ist. Die <span class="clisting">MalformedURLException</span> informiert, wenn der Name ungültig gebunden ist. Eine <span class="clisting">RemoteException</span> wird ausgelöst, wenn der Namensdienst nicht erreicht werden konnte. Fehlende Rechte führen zu einer <span class="clisting">AccessException</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void rebind( String name, Remote obj )</span>
Verhält sich wie <span class="clisting">bind()</span>, mit dem Unterschied, dass Objekte ersetzt werden, sofern sie schon angemeldet sind.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void unbind( String name )</span>
Entfernt das Objekt aus der Registrierung. Ist das Objekt nicht gebunden, folgt eine <span class="clisting">NotBoundException</span>. Die anderen Fehler sind wie bei <span class="clisting">bind()</span>.</li>
</ul><a id="mj06c3e7c6fb23aeeea372cada9e2f6be3" name="mj06c3e7c6fb23aeeea372cada9e2f6be3"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">22.3.6</span> Einfaches Logging  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um die Aktivität von RMI verfolgen zu können, haben die Entwickler einen einfachen Login-Mechanismus eingebaut. Er gibt Auskunft über die Objekte und entfernte Referenzen. Hier erfahren wir auch, ob alle gewünschten Objekte korrekt gefunden wurden. Das Logging lässt sich mit der Eigenschaft <span class="clisting">java.rmi.server.logClass</span> einschalten, wenn der Wert auf <span class="clisting">true</span> gesetzt ist. Dann erscheinen Ausgaben auf dem <span class="clisting">System.err</span>-Fehlerkanal. Außerdem setzt die statische Methode <span class="clisting">RemoteServer.setLog(OutputStream)</span> einen Fehlerausgabestrom. Die statische Methode <span class="clisting">getLog()</span> liefert diesen Fehlerkanal allerdings als aufgewerteten <span class="clisting">PrintStream</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.rmi.server.<span class="cfett">RemoteServer</span>
extends RemoteObject</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static void setLog( OutputStream out )</span>
Loggt RMI-Aufrufe, indem sie in den Ausgabestrom <span class="clisting">out</span> geschrieben werden. Ist <span class="clisting">out=null</span>, wird das Logging beendet.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static PrintStream getLog()</span>
Liefert den Ausgabestrom für das RMI-Logging.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Das Paket <span class="clisting">java.rmi.server</span> hält noch eine andere Klasse bereit, die recht nützlich sein kann: <span class="clisting">UID</span>. Mit dieser Klasse lässt sich eine einfache ID berechnen:</p>
<div class="listing"><pre class="prettyprint">String s = new java.rmi.server.UID().toString();</pre></div>
</td>
</tr>
</table><br><a id="mj776dcf0a126131ad729018e1611e76a2" name="mj776dcf0a126131ad729018e1611e76a2"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">22.3.7</span> Aufräumen mit dem DGC  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Im Fall von verteilten Anwendungen reicht der normale GC nicht, und das Konzept muss um einen verteilten GC (engl. <span class="ckursiv">distributed GC</span>, kurz <span class="ckursiv">DGC</span>) erweitert werden. Im lokalen Fall weiß die lokale Maschine immer, ob ein Objekt referenziert wird, bei verteilten Anwendungen kann aber auf dem Server ein Objekt existieren, für das sich kein Mensch mehr interessiert. Damit bei verteilten Anwendungen auch der GC nicht mehr benutzte Objekte auf der Serverseite wegräumen kann, verschickt die Maschine beim Nutzen und Lösen von Verbindungen <span class="ckursiv">referenced-</span> beziehungsweise <span class="ckursiv">dereferenced-</span>Meldungen. Ist die Verbindung dann gelöst, bleibt die Klasse jedoch noch einige Zeit auf dem Server und wird nicht sofort gelöst. Aussagen über die Verweildauer gibt die <span class="ckursiv">Lease</span> an, die sich über eine Eigenschaft verändern lässt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Setze die Verweildauer für Objekte auf eine halbe Stunde hoch:</p>
<div class="listing"><pre class="prettyprint">$ <span class="cfett">java -Djava.rmi.dgc.leaseValue</span><span class="cfett">=1800000 MyClass</span></pre></div>
<p class="BStandard">Die Standarddauer ist auf 10 Minuten gesetzt.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="22.3 Auf der Serverseite"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_22_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_22_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
