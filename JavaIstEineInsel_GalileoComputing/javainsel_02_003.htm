<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 2.3 Datentypen, Typisierung, Variablen und Zuweisungen</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 2.3 Datentypen, Typisierung, Variablen und Zuweisungen">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 2.3 Datentypen, Typisierung, Variablen und Zuweisungen">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_02_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_02_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2" class="navnav">2 Sprachbeschreibung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_001.htm#mj4c39ccec48a76ae30226f3f932121636" class="navnav">2.1 Elemente der Programmiersprache Java</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mj5b64c72b27b5a6ab0a66c5e72bb198cf" class="navnav">2.1.1 Token</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mjecb61a9b6f9af4b3942699e5e3bd68d1" class="navnav">2.1.2 Textkodierung durch Unicode-Zeichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mjc69b2ac175f46ac3528ed4a2a25453bc" class="navnav">2.1.3 Literale</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mjea18182a41b645e6fbe90ee51045338f" class="navnav">2.1.4 Bezeichner</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mj6c435823530664f454748e31c7501bf7" class="navnav">2.1.5 Reservierte Schlüsselwörter</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mj5a0b15f1dc322e8b94e434a98bb500b4" class="navnav">2.1.6 Zusammenfassung der lexikalischen Analyse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mj60051b94eb75aff76b77b34080d60b4c" class="navnav">2.1.7 Kommentare</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_002.htm#mje6cf7db9d2efcd52e5d81fc832f8b139" class="navnav">2.2 Anweisungen formen Programme</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj41f7748a6816ed4f9e4936292f838c48" class="navnav">2.2.1 Was sind Anweisungen?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mjf3869f794db9bf16bbaf9a79668c17d3" class="navnav">2.2.2 Klassendeklaration</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mjd13c9e060033d31199f1482b71660888" class="navnav">2.2.3 Die Reise beginnt am main()</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mjb81c2e28c2fe110a0b7a2ef9da7d10a4" class="navnav">2.2.4 Der erste Methodenaufruf: println()</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj17be0d5f85aa24f9db2bee70ea355e9c" class="navnav">2.2.5 Atomare Anweisungen und Anweisungssequenzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mje4439fc88c3da817f3de3838c4d83baa" class="navnav">2.2.6 Mehr zu print(), println() und printf() für Bildschirmausgaben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj31d33be82ee48d560fea2597234eb467" class="navnav">2.2.7 Die API-Dokumentation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj2d3ffeacbc5d2d61393972d4204f73c4" class="navnav">2.2.8 Ausdrucksanweisung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj641d7792a19c51b88ef2fe06bf079712" class="navnav">2.2.9 Erste Idee der Objektorientierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj5892f57ef257e41d40b817935ca8595f" class="navnav">2.2.10 Modifizierer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjfa63996892f690e96d6bdc12b0045e24" class="navh">2.3 Datentypen, Typisierung, Variablen und Zuweisungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj2a9abd617099b9fd801bd838feae09cc" class="navh">2.3.1 Primitive Datentypen im Überblick</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj2eae18508a8cdb7b415dcb04a19eba9f" class="navh">2.3.2 Variablendeklarationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mje0a1a7aa587e4ef38dc8a8d84cfcd506" class="navh">2.3.3 Variablendeklaration mit Wertinitialisierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb5488e9f0c7c9d35049e1d883a370c30" class="navh">2.3.4 Zuweisungsoperator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjf64878f5c2fa2b31ae20a20c7ef2d2e2" class="navh">2.3.5 Wahrheitswerte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc11164cdd5eedb52b21ddd19b16f0385" class="navh">2.3.6 Ganzzahlige Datentypen und Literale</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjbd61f831aaea6b174b7a007af1a67476" class="navh">2.3.7 Das binäre (Basis 2), oktale (Basis 8), hexadezimale (Basis 16) Stellenwertsystem *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjaed1f301e088df504ed1f24dae0d0caf" class="navh">2.3.8 Die Fließkommazahlen »float« und »double«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj45c99ccfafcac85ec9c0e87222047c6f" class="navh">2.3.9 Alphanumerische Zeichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj76f1b77014dafca1b945790800d9aedd" class="navh">2.3.10 Gute Namen, schlechte Namen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_004.htm#mjb044d5eb156360a6192e0bde3eeaceb0" class="navnav">2.4 Blöcke, Initialisierung und Sichtbarkeit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_004.htm#mj266d7a655884ea92d24ba0aa380f56f3" class="navnav">2.4.1 Gruppieren von Anweisungen mit Blöcken</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_004.htm#mjeb2ef4723a3c26e8c0a6ae1eec3a5626" class="navnav">2.4.2 Initialisierung von lokalen Variablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_004.htm#mj47f0fa7692df8df688cd6a8a6cf9fefd" class="navnav">2.4.3 Sichtbarkeit und Gültigkeitsbereich</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_005.htm#mj727e5a27eac7c9b15b5799f50c4a2895" class="navnav">2.5 Ausdrücke, Operanden und Operatoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj9a3af0f9509c60c1a268346af4c9aedb" class="navnav">2.5.1 Ausdrücke</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj998e5fa30c9c8bd8a0d12f9b09f3f71d" class="navnav">2.5.2 Arithmetische Operatoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj03da32a2fe369215529830de87a204d1" class="navnav">2.5.3 Unäres Minus und Plus</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj63bbbb7a2e0d9190bab41140a3bb33c2" class="navnav">2.5.4 Zuweisung mit Operation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj54700b6f99a3a2cf4f2a38465dc17289" class="navnav">2.5.5 Präfix- oder Postfix-Inkrement und -Dekrement</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mjb37eafd775d803d67baf4aae75ee97d7" class="navnav">2.5.6 Die relationalen Operatoren und die Gleichheitsoperatoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mje27fd167a2ddda300630b8d5c405d763" class="navnav">2.5.7 Logische Operatoren: Nicht, Und,Oder, Xor</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj001aa1d35c1746f2106c8a28aff843e8" class="navnav">2.5.8 Der Rang der Operatoren in der Auswertungsreihenfolge</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj714856e56857d03d2d050f84d418981d" class="navnav">2.5.9 Die Typanpassung (das Casting)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj93a46c1206bdba6ff4c9adf47674d2a7" class="navnav">2.5.10 Überladenes Plus für Strings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj9431e0ffd2d053ce73e865c35801f571" class="navnav">2.5.11 Operator vermisst *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_006.htm#mj3530d43fab0c366ff75b1414feef64e3" class="navnav">2.6 Bedingte Anweisungen oder Fallunterscheidungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_006.htm#mj5c02f22dd3cf727da8cf465e7a3ec9a0" class="navnav">2.6.1 Die if-Anweisung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_006.htm#mjb94647aaf953d4eac34b42a303575c94" class="navnav">2.6.2 Die Alternative mit einer if-else-Anweisung wählen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_006.htm#mj0ed4e5c52acd8f230d31a246ccd268c6" class="navnav">2.6.3 Der Bedingungsoperator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_006.htm#mj448e6960f284a4beda96b23e994ebd5e" class="navnav">2.6.4 Die switch-Anweisung bietet die Alternative</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_007.htm#mjb517285509ecebe1bb38c15fc43eb4c2" class="navnav">2.7 Schleifen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_007.htm#mja1bc0775bbd3451450d183be28eeb3eb" class="navnav">2.7.1 Die while-Schleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_007.htm#mj6e1455d87e650c79a9c4af1df370cf26" class="navnav">2.7.2 Die do-while-Schleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_007.htm#mjdcbb2e90942d428b2c033d90ed115f3b" class="navnav">2.7.3 Die for-Schleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_007.htm#mj0a12edb4c2de73996536d2a0cfa93253" class="navnav">2.7.4 Schleifenbedingungen und Vergleiche mit ==</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_007.htm#mj86b3106463107c046e4f10288be23d6f" class="navnav">2.7.5 Ausbruch planen mit break und Wiedereinstieg mit »continue«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_007.htm#mjb66a4e86916302730701a5ea728c4602" class="navnav">2.7.6 »break« und »continue« mit Marken *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_008.htm#mjc2d5868bd7bba72c8f470a1eff29b8f8" class="navnav">2.8 Methoden einer Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj03b21193a0b840663819e08cdcf6aa9a" class="navnav">2.8.1 Bestandteil einer Methode</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj6cd639c6b783b1a61957698d1c4d5428" class="navnav">2.8.2 Signatur-Beschreibung in der Java-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mje562fc58793dd3e128a981b070731e31" class="navnav">2.8.3 Aufruf einer Methode</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mjd30f308b95326a708d51f03f631ca749" class="navnav">2.8.4 Methoden ohne Parameter deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj2836d5713aaa7620f0e534af0f44159c" class="navnav">2.8.5 Statische Methoden (Klassenmethoden)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj9b0d4e5b321975f9fc5fd010a7b19af8" class="navnav">2.8.6 Parameter, Argument und Wertübergabe</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mje82aa3de4956da1e1f98332c14f73c54" class="navnav">2.8.7 Methoden vorzeitig mit return beenden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj8f915a85179c256c6ea97f1a4c2c6640" class="navnav">2.8.8 Nicht erreichbarer Quellcode bei Methoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mjd33fee2b0c0e1f589dc7bed1badb5329" class="navnav">2.8.9 Rückgabewerte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj021ec31631b9b7c44011343c7fbe8def" class="navnav">2.8.10 Methoden überladen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mjf8e7549c7c3a573dcfba78077f9cf7e1" class="navnav">2.8.11 Vorgegebener Wert für nicht aufgeführte Argumente *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj93af18e3273e580bb7a4395eeec2f1f8" class="navnav">2.8.12 Finale lokale Variablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mje1fd0b8e4f3262cd2aa633ff59abaab5" class="navnav">2.8.13 Rekursive Methoden *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mja99d7594870ad07a0d98217193f32790" class="navnav">2.8.14 Die Türme von Hanoi *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_009.htm#mj5080aed8bdb6bf2ecab222e8a24e2514" class="navnav">2.9 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjfa63996892f690e96d6bdc12b0045e24" name="mjfa63996892f690e96d6bdc12b0045e24"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">2.3</span> Datentypen, Typisierung, Variablen und Zuweisungen  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Java nutzt, wie es für imperative Programmiersprachen typisch ist, Variablen zum Ablegen von Daten. Eine Variable ist ein reservierter Speicherbereich und belegt &#8211; abhängig vom Inhalt &#8211; eine feste Anzahl von Bytes. Alle Variablen (und auch Ausdrücke) haben einen <span class="ckursiv">Typ</span>, der zur Übersetzungszeit bekannt ist. Der Typ wird auch <span class="ckursiv">Datentyp</span> genannt, da eine Variable einen Datenwert, auch <span class="ckursiv">Datum</span> genannt, enthält. Beispiele für einfache Datentypen sind: Ganzzahlen, Fließkommazahlen, Wahrheitswerte und Zeichen. Der Typ bestimmt auch die zulässigen Operationen, denn Wahrheitswerte lassen sich nicht addieren, Ganzzahlen schon. Dagegen lassen sich Fließkommazahlen addieren, aber nicht Xor-verknüpfen. Da jede Variable einen vom Programmierer vorgegebenen festen Datentyp hat, der zur Übersetzungszeit bekannt ist und sich später nicht mehr ändern lässt, und Java stark darauf achtet, welche Operationen erlaubt sind, und auch von jedem Ausdruck spätestens zur Laufzeit den Typ kennt, ist Java eine <span class="ckursiv">statisch typisierte</span> und <span class="ckursiv">streng (stark) typisierte</span> Programmiersprache. [Während in der Literatur bei den Begriffen <em><strong>statisch getypt</strong></em> und <em><strong>dynamisch getypt</strong></em> mehr oder weniger Einigkeit herrscht, haben verschiedene Autoren unterschiedliche Vorstellungen von den Begriffen <em><strong>streng (stark) typisiert</strong></em> und <em><strong>schwach typisiert.</strong></em>
] </p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>In Java muss der Datentyp einer Variablen zur Übersetzungszeit bekannt sein. Das nennt sich dann <span class="ckursiv">statisch typisiert</span>. Das Gegenteil ist eine <span class="ckursiv">dynamische Typisierung</span>, wie sie etwa JavaScript verwendet. Hier kann sich der Typ einer Variablen zur Laufzeit ändern, je nachdem, was die Variable enthält.</p>
</td>
</tr>
</table><br><h4 class="t4">Primitiv- oder Verweis-Typ</h4>
<p>Die Datentypen in Java zerfallen in zwei Kategorien:</p>
<ul class="gp">
<li><span class="ckursiv">Primitive Typen</span>. Die primitiven (einfachen) Typen sind die eingebauten Datentypen für Zahlen, Unicode-Zeichen und Wahrheitswerte.</li>
</ul>
<ul class="gp">
<li><span class="ckursiv">Referenztypen</span>. Mit diesem Datentyp lassen sich Objektverweise etwa auf Zeichenketten, Dateien oder Datenstrukturen verwalten.</li>
</ul>
<p>Warum sich damals Sun für diese Teilung entschieden hat, lässt sich mit zwei Gründen erklären:</p>
<ul class="gp">
<li>Zu der Zeit, als Java eingeführt wurde, kannten viele Programmierer die Syntax und Semantik von C(++) und ähnlichen imperativen Programmiersprachen. Zur neuen Sprache Java zu wechseln, fiel dadurch leichter, und es half, sich sofort auf der Insel zurechtzufinden. Es gibt aber auch Programmiersprachen wie Smalltalk, die keine primitiven Datentypen besitzen.</li>
</ul>
<ul class="gp">
<li>Der andere Grund ist die Tatsache, dass häufig vorkommende elementare Rechenoperationen schnell durchgeführt werden müssen und bei einem einfachen Typ leicht Optimierungen durchzuführen sind.</li>
</ul>
<p>Wir werden uns im Folgenden erst mit primitiven Datentypen beschäftigen. Referenzen werden nur dann eingesetzt, wenn Objekte ins Spiel kommen. Die nehmen wir uns in Kapitel 3, »Klassen und Objekte«, vor.</p><a id="mj2a9abd617099b9fd801bd838feae09cc" name="mj2a9abd617099b9fd801bd838feae09cc"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">2.3.1</span> Primitive Datentypen im Überblick  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>In Java gibt es zwei Arten eingebauter Datentypen:</p>
<ul class="gp">
<li><span class="ckursiv">arithmetische Typen</span> (ganze Zahlen &#8211; auch integrale Typen genannt &#8211;, Fließkommazahlen nach IEEE 754, Unicode-Zeichen)</li>
</ul>
<ul class="gp">
<li><span class="ckursiv">Wahrheitswerte</span> für die Zustände wahr und falsch</li>
</ul>
<p>Strings werden bevorzugt behandelt, sind aber lediglich Verweise auf Objekte. Die folgende Tabelle vermittelt dazu einen Überblick. Anschließend betrachten wir jeden Datentyp präziser.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 2.6    </strong>Java-Datentypen und ihre Wertebereiche</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Typ</span>
</td>
<td class="tabellenkopf"><span class="cfett">Belegung (Wertebereich)</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">boolean</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">true</span> oder <span class="clisting">false</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">char</span></p>
</td>
<td class="tabellentext">
<p>16-Bit-Unicode-Zeichen (0x0000 ... 0xFFFF)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">byte</span></p>
</td>
<td class="tabellentext">
<p>&#8211;2^7 bis 2^7 &#8211; 1 (&#8211;128 ... 127)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">short</span></p>
</td>
<td class="tabellentext">
<p>&#8211;2^15 bis 2^15 &#8211; 1 (&#8211;32.768 ... 32.767)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">int</span></p>
</td>
<td class="tabellentext">
<p>&#8211;2^31 bis 2^31 &#8211; 1 (&#8211;2.147.483.648 ... 2.147.483.647)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">long</span></p>
</td>
<td class="tabellentext">
<p>&#8211;2^63 bis 2^63 &#8211; 1
(&#8211;9.223.372.036.854.775.808 ... 9.223.372.036.854.775.807)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">float</span></p>
</td>
<td class="tabellentext">
<p>1,40239846E-45f … 3,40282347E+38f</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">double</span></p>
</td>
<td class="tabellentext">
<p>4,94065645841246544E-324 ... 1,79769131486231570E+308</p>
</td>
</tr>
</table><br><p>Es fällt bei den Ganzzahlen auf, dass es eine positive Zahl »weniger« gibt als negative.</p>
<p>Für <span class="clisting">float</span> und <span class="clisting">double</span> ist das Vorzeichen nicht angegeben, da die kleinsten und größten darstellbaren Zahlen sowohl positiv wie auch negativ sein können. Mit anderen Worten: Die Wertebereiche unterscheiden sich nicht &#8211; anders als etwa bei <span class="clisting">int</span> &#8211; in Abhängigkeit vom Vorzeichen. Wer eine »klassische« Darstellung wünscht, kann sich das so verstellen: Der Wertebereich (vom <span class="clisting">double</span>) ist 4,94065645841246544E-324 bis 1,79769131486231570E+308 bzw. mit dem Vorzeichen &#8211;4,94065645841246544E-324 bis &#8211;1,79769131486231570E+308. So könnten wir sagen, er reicht von etwa &#8211;4,9E-324 bis +1,8E+308. [Es gibt bei Fließkommazahlen noch »Sonderzahlen«, wie plus oder minus Unendlich, aber dazu später mehr.
] </p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Detailwissen   </span>Genau genommen sieht die Sprachgrammatik von Java keine negativen Zahlenliterale vor. Bei einer Zahl wie &#8211;1.2 oder &#8211;1 ist das Minus der unäre Operator und gehört nicht zur Zahl. Im Bytecode selbst sind die negativen Zahlen natürlich wieder abgebildet.</p>
</td>
</tr>
</table><br><div class="bildbox">
<p><a name="IDAJ30D"></a><a onClick="OpenWin('bilder/365_java_02_009.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_02_009.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Die folgende Tabelle zeigt eine etwas andere Darstellung:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 2.7    </strong>Java-Datentypen und ihre Größen und Formate</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Typ</span>
</td>
<td class="tabellenkopf"><span class="cfett">Größe</span>
</td>
<td class="tabellenkopf"><span class="cfett">Format</span>
</td>
</tr>
<tr>
<td class="tabellentext" colspan="3">
<p>Ganzzahlen</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">byte</span></p>
</td>
<td class="tabellentext">
<p>8 Bit</p>
</td>
<td class="tabellentext">
<p>Zweierkomplement</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">short</span></p>
</td>
<td class="tabellentext">
<p>16 Bit</p>
</td>
<td class="tabellentext">
<p>Zweierkomplement</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">int</span></p>
</td>
<td class="tabellentext">
<p>32 Bit</p>
</td>
<td class="tabellentext">
<p>Zweierkomplement</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">long</span></p>
</td>
<td class="tabellentext">
<p>64 Bit</p>
</td>
<td class="tabellentext">
<p>Zweierkomplement</p>
</td>
</tr>
<tr>
<td class="tabellentext" colspan="3">
<p>Fließkommazahlen</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">float</span></p>
</td>
<td class="tabellentext">
<p>32 Bit</p>
</td>
<td class="tabellentext">
<p>IEEE 754</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">double</span></p>
</td>
<td class="tabellentext">
<p>64 Bit</p>
</td>
<td class="tabellentext">
<p>IEEE 754</p>
</td>
</tr>
<tr>
<td class="tabellentext" colspan="3">
<p>Weitere Datentypen</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">boolean</span></p>
</td>
<td class="tabellentext">
<p>1 Bit</p>
</td>
<td class="tabellentext">
<p><span class="clisting">true</span>, <span class="clisting">false</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">char</span></p>
</td>
<td class="tabellentext">
<p>16 Bit</p>
</td>
<td class="tabellentext">
<p>16-Bit-Unicode</p>
</td>
</tr>
</table><br><p>Zwei wesentliche Punkte zeichnen die primitiven Datentypen aus:</p>
<ul class="gp">
<li>Alle Datentypen haben eine festgesetzte Länge, die sich unter keinen Umständen ändert. Der Nachteil, dass sich bei einigen Hochsprachen die Länge eines Datentyps ändern kann, besteht in Java nicht. In den Sprachen C(++) bleibt dies immer unsicher, und die Umstellung auf 64-Bit-Maschinen bringt viele Probleme mit sich. Bei der Betrachtung der Auflistung fällt auf, dass <span class="clisting">char</span> 16 Bit lang ist.</li>
</ul>
<ul class="gp">
<li>Die numerischen Datentypen <span class="clisting">byte</span>, <span class="clisting">short</span>, <span class="clisting">int</span> und <span class="clisting">long</span> sind vorzeichenbehaftet, Fließkommazahlen sowieso. Dies ist leider nicht immer praktisch, aber wir müssen stets daran denken. Probleme gibt es, wenn wir einem Byte zum Beispiel den Wert 240 zuweisen wollen, denn der Wertebereich ist &#8211;128 bis 127. Ein <span class="clisting">char</span> ist im Prinzip ein vorzeichenloser Ganzzahltyp.</li>
</ul>
<p>Wenn wir also die numerischen Datentypen (lassen wir hier <span class="clisting">char</span> außen vor) nach ihrer Größe sortieren wollten, könnten wir zwei Linien für Ganzzahlen und Fließkommazahlen aufbauen:</p>
<div class="listing"><pre class="prettyprint">byte &lt; short &lt; int &lt; long
float &lt; double</pre></div>
<p>In C# gibt es den Datentyp <span class="clisting">decimal</span>, der mit 128 Bit (also 16 Byte) auch genügend Präzision bietet, um eine Zahl wie 0,000000000000000000000000001 auszudrücken.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die Klassen <span class="clisting">Byte</span>, <span class="clisting">Integer</span>, <span class="clisting">Long</span>, <span class="clisting">Short</span>, <span class="clisting">Character</span>, <span class="clisting">Double</span> und <span class="clisting">Float</span> deklarieren die Konstanten <span class="clisting">MAX_VALUE</span> und <span class="clisting">MIN_VALUE</span>, die den größten und kleinsten zulässigen Wert des jeweiligen Wertebereichs bzw. die Grenzen der Wertebereiche der jeweiligen Datentypen angeben.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">System.out.println( Byte.MIN_VALUE );       // &#8211;128
System.out.println( Byte.MAX_VALUE );       // 127
System.out.println( Character.MIN_VALUE );  // '\u0000'
System.out.println( Character.MAX_VALUE );  // '\uFFFF'
System.out.println( Double.MIN_VALUE );     // 4.9E-324
System.out.println( Double.MAX_VALUE );     // 1.7976931348623157E308</pre></div>
</td>
</tr>
</table><br><a id="mj2eae18508a8cdb7b415dcb04a19eba9f" name="mj2eae18508a8cdb7b415dcb04a19eba9f"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">2.3.2</span> Variablendeklarationen  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mit Variablen lassen sich Daten speichern, die vom Programm gelesen und geschrieben werden können. Um Variablen zu nutzen, müssen sie deklariert (definiert [In C(++) bedeuten Definition und Deklaration etwas Verschiedenes. In Java kennen wir diesen Unterschied nicht und betrachten daher beide Begriffe als gleichwertig. Die Spezifikation spricht nur von <em><strong>Deklarationen</strong></em>.
] ) werden. Die Schreibweise einer Variablendeklaration ist immer die gleiche: Hinter dem Typnamen folgt der Name der Variablen. Sie ist eine Anweisung und wird daher mit einem Semikolon abgeschlossen. In Java kennt der Compiler von jeder Variablen und jedem Ausdruck genau den Typ.</p>
<p>Deklarieren wir ein paar (lokale) Variablen in der <span class="clisting">main()</span>-Methode:</p>
<p class="tabunter"><strong>Listing 2.5    </strong>FirstVariable.java</p>
<div class="listing"><pre class="prettyprint">public class FirstVariable
{
   public static void main( String[] args )
  {
   <span class="cfett"> String  name;               </span> // Name
   <span class="cfett"> int     age;                </span> // Alter
   <span class="cfett"> double  income;             </span> // Einkommen
   <span class="cfett"> char    gender;             </span> // Geschlecht (f oder m)
   <span class="cfett"> boolean isPresident;        </span> // Ist Präsident (true oder false)
  }
}</pre></div>
<p>Der Typname ist entweder ein einfacher Typ (wie <span class="clisting">int</span>) oder ein Referenztyp. Viel schwieriger ist eine Deklaration nicht &#8211; kryptische Angaben wie in C gibt es in Java nicht. [Das ist natürlich eine Anspielung auf C, in dem Deklarationen wie <span class="clisting">char (*(*a[2])())[2]</span> möglich sind. Gut, dass es mit cdecl ein Programm zum »Vorlesen« solcher Definitionen gibt.
]  Ein Variablenname (der dann Bezeichner ist) kann alle Buchstaben und Ziffern des Unicode-Zeichensatzes beinhalten, mit der Ausnahme, dass am Anfang des Bezeichners keine Ziffer stehen darf. Auch darf der Bezeichnername mit keinem reservierten Schlüsselwort identisch sein.</p><a id="mje0a1a7aa587e4ef38dc8a8d84cfcd506" name="mje0a1a7aa587e4ef38dc8a8d84cfcd506"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">2.3.3</span> Variablendeklaration mit Wertinitialisierung  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Den Variablen kann gleich bei der Deklaration ein Wert zugewiesen werden. Hinter einem Gleichheitszeichen steht der Wert, der oft ein Literal ist. Eine Zuweisung gilt nur für immer genau eine Variable:</p>
<p class="tabunter"><strong>Listing 2.6    </strong>Obama.java</p>
<div class="listing"><pre class="prettyprint">public class Obama
{
  public static void main( String[] args )
  {
   <span class="cfett"> String  name = "Barack Hussein Obama II";</span>
   <span class="cfett"> int     age = 48;</span>
   <span class="cfett"> double  income = 400000;</span>
   <span class="cfett"> char    gender = 'm';</span>
   <span class="cfett"> boolean isPresident = true;</span>
  }
}</pre></div>
<p>Werden mehrere Variablen gleichen Typs bestimmt, so trennt sie ein Komma.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Deklaration mehrerer Variablen auf einen Schlag. <span class="clisting">x</span> und <span class="clisting">y</span> bleiben uninitialisiert:</p>
<div class="listing"><pre class="prettyprint">double x<span class="cfett">,</span> y,
       bodyHeight = 183;</pre></div>
</td>
</tr>
</table><br><a id="mjb5488e9f0c7c9d35049e1d883a370c30" name="mjb5488e9f0c7c9d35049e1d883a370c30"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">2.3.4</span> Zuweisungsoperator  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>In Java dient das Gleichheitszeichen <span class="clisting">=</span> der <span class="ckursiv">Zuweisung</span> (engl. <span class="ckursiv">assignment</span>). [Die Zuweisungen sehen zwar so aus wie mathematische Gleichungen, doch existiert ein wichtiger Unterschied: Die Formel <span class="clisting">a = a + 1</span> ist &#8211; zumindest im Dezimalsystem ohne zusätzliche Algebra &#8211; mathematisch nicht zu erfüllen, da es kein <span class="clisting">a</span> geben kann, das <span class="clisting">a = a + 1</span> erfüllt. Aus Programmiersicht ist es in Ordnung, da die Variable <span class="clisting">a</span> um eins erhöht wird.
]  Der Zuweisungsoperator ist ein binärer Operator, bei dem auf der linken Seite die zu belegende Variable steht und auf der rechten Seite ein Ausdruck:</p>
<div class="listing"><pre class="prettyprint">int a;
a<span class="cfett"> =</span> 12 * 3;</pre></div>
<p>Erst nach dem Auswerten des Ausdrucks kopiert der Zuweisungsoperator das Ergebnis in die Variable. Gibt es Laufzeitfehler, etwa durch eine Division durch null, gibt es keinen Schreibzugriff auf die Variable.</p>
<h4 class="t4">Beispiel zur Variablendeklaration, -initialisierung und -ausgabe</h4>
<p>Schreiben wir ein einfaches Programm, das zwei Variablen deklariert und zuweist. Die Variablenbelegung erscheint anschließend auf dem Bildschirm:</p>
<p class="tabunter"><strong>Listing 2.7    </strong>DiscoData.java</p>
<div class="listing"><pre class="prettyprint">public class DiscoData
{
  public static void main( String[] args )
  {
    boolean hasVisitors;
    hasVisitors = true;
    int numberOfPersons = 102220;

    System.out.print( "Sind Personen in der Disko? " );
    System.out.println( hasVisitors );
    System.out.println( "Wie viele? " + numberOfPersons );
  }
}</pre></div>
<p>Die Zeile <span class="clisting">hasVisitors = true</span> ist eine Zuweisung und somit ein Ausdruck (genau genommen ein Zuweisungsausdruck), da sie einen Wert liefert. Zuweisungsausdrücke können mit einem Semikolon abgeschlossen werden und sind dann Zuweisungsanweisungen. In unserem Fall initialisiert eine Zuweisungsanweisung die Variable <span class="clisting">hasVisitors</span> mit <span class="clisting">true</span>. Steht auf der rechten Seite keine Variable, so steht dort ein Literal, eine Konstante, wie in unserem Fall <span class="clisting">true</span>, oder eine Verknüpfung mit einem Operator. Wir erwähnten bereits, dass es für Wahrheitswerte nur die Literale <span class="clisting">true</span> und <span class="clisting">false</span> gibt.</p>
<p>Das obige Beispiel macht ebenfalls deutlich, dass Strings mit dem Plus aneinandergehängt werden können; ist ein Teil kein String, so wird er in einen String konvertiert.</p>
<h4 class="t4">Zuweisungen sind auch Ausdrücke</h4>
<p>Zwar finden sich Zuweisungen oft als Anweisungen wieder, doch können sie an jeder Stelle stehen, an der ein Ausdruck erlaubt ist, etwa in einem Methodenaufruf wie <span class="clisting">print()</span>:</p>
<div class="listing"><pre class="prettyprint">int a = 1;                          // Deklaration mit Initialisierung
a = 2;                              // Anweisung mit Zuweisung
System.out.println( a<span class="cfett"> =</span> 3 );        // Ausdruck mit Zuweisung. Liefert 3</pre></div>
<p>Das Gleichheitszeichen dient in Java nur der Zuweisung; in anderen Programmiersprachen wird die Zuweisung durch ein anderes Symbol deutlich gemacht, etwa wie in Pascal mit <span class="clisting">:=</span>. Um Zuweisungen von Vergleichen trennen zu können, definiert Java hier der C(++)-Tradition folgend einen binären Vergleichsoperator <span class="clisting">==</span>. Der Vergleichsoperator liefert den Ergebnistyp <span class="clisting">boolean</span>:</p>
<div class="listing"><pre class="prettyprint">System.out.println( a<span class="cfett"> ==</span> 3 );       // Ausdruck mit Vergleich. Liefert true</pre></div>
<h4 class="t4">Mehrere Zuweisungen in einem Schritt</h4>
<p>Zuweisungen der Form <span class="clisting">a = b = c = 0;</span> sind erlaubt und gleichbedeutend mit den drei Anweisungen <span class="clisting">c = 0; b = c; a = b;</span>. Die explizite Klammerung <span class="clisting">a = (b = (c = 0))</span> macht noch einmal deutlich, dass sich Zuweisungen verschachteln lassen und Zuweisungen wie <span class="clisting">c = 0</span> Ausdrücke sind, die einen Wert liefern. Doch auch dann, wenn wir meinen, dass</p>
<div class="listing"><pre class="prettyprint">a = (b = c + d) + e;</pre></div>
<p>eine coole Vereinfachung im Vergleich zu</p>
<div class="listing"><pre class="prettyprint">b = c + d;
a = b + e;</pre></div>
<p>ist, sollten wir mit einer Zuweisung pro Zeile auskommen.</p>
<p>Die Reihenfolge der Auswertung zeigt anschaulich folgendes Beispiel:</p>
<div class="listing"><pre class="prettyprint">int b = 10;
System.out.println( (b = 20) * b );    // 400</pre></div><a id="mjf64878f5c2fa2b31ae20a20c7ef2d2e2" name="mjf64878f5c2fa2b31ae20a20c7ef2d2e2"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">2.3.5</span> Wahrheitswerte  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der Datentyp <span class="clisting">boolean</span> beschreibt einen Wahrheitswert, der entweder <span class="clisting">true</span> oder <span class="clisting">false</span> ist. Die Zeichenketten <span class="clisting">true</span> und <span class="clisting">false</span> sind reservierte Wörter und bilden neben konstanten Strings und primitiven Datentypen <span class="ckursiv">Literale</span>. Kein anderer Wert ist für Wahrheitswerte möglich, insbesondere werden numerische Werte nicht als Wahrheitswerte interpretiert.</p>
<p>Der boolesche Typ wird beispielsweise bei Bedingungen, Verzweigungen oder Schleifen benötigt.</p><a id="mjc11164cdd5eedb52b21ddd19b16f0385" name="mjc11164cdd5eedb52b21ddd19b16f0385"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">2.3.6</span> Ganzzahlige Datentypen und Literale  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Java stellt vier ganzzahlige Datentypen zur Verfügung: <span class="clisting">byte</span>, <span class="clisting">short</span>, <span class="clisting">int</span> und <span class="clisting">long</span>. Die feste Länge von jeweils 1, 2, 4 und 8 Byte ist eine wesentliche Eigenschaft von Java. Ganzzahlige Typen (mit der Ausnahme von <span class="clisting">char</span>, wenn wir diesen auch in die Reihe einordnen möchten) sind in Java immer vorzeichenbehaftet; einen Modifizierer <span class="clisting">unsigned</span> wie in C(++) gibt es nicht. [In Java bilden <span class="clisting">long</span> und <span class="clisting">short</span> einen eigenen Datentyp. Sie dienen nicht wie in C(++) als Modifizierer. Eine Deklaration wie <span class="clisting">long int</span> ist also falsch. Auf den iSeries-Servern von IBM &#8211; früher AS/400 &#8211; gibt es auch einen Datentyp <span class="clisting">unsigned long long int</span>.
]  Negative Zahlen werden durch Voranstellen eines Minuszeichens gebildet. Ein Pluszeichen für positive Zeichen ist möglich. <span class="clisting">int</span> und <span class="clisting">long</span> sind die bevorzugten Typen. <span class="clisting">byte</span> kommt selten vor und <span class="clisting">short</span> nur in wirklich sehr seltenen Fällen, etwa bei Feldern mit Bilddaten.</p>
<h4 class="t4">Ganzzahlen sind standardmäßig vom Typ »int«</h4>
<p>Betrachten wir folgende Zeile, so ist auf den ersten Blick kein Fehler zu erkennen:</p>
<div class="listing"><pre class="prettyprint">System.out.println( 123456789012345 );      // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"></pre></div>
<p>Dennoch übersetzt der Compiler die Zeile nicht, da er ein Ganzzahlliteral ohne explizite Größenangabe als 32 Bit langes <span class="clisting">int</span> annimmt. Die obige Zeile führt daher zu einem Compilerfehler, da unsere Zahl nicht im Wertebereich von &#8211;2147483648 … +2147483647 liegt, sondern weit außerhalb: 2147483647 &lt; 123456789012345. Java reserviert also <span class="ckursiv">nicht</span> so viele Bits wie benötigt und wählt nicht automatisch den passenden Wertebereich. [Allerdings ist das Compilerverhalten verwirrend, denn bei der Anweisung <span class="clisting">byte b = 12;</span> »denkt« der Compiler ja auch nicht, dass 12 ein <span class="clisting">int</span> ist.
] </p>
<h4 class="t4">Der Datentyp »long«</h4>
<p>Dass eine Zahl <span class="clisting">long</span> ist, muss ausdrücklich angegeben werden. Dazu wird an das Ende von Ganzzahlliteralen vom Typ <span class="clisting">long</span> ein »l« oder »L« gesetzt. Um die Zahl <span class="clisting">123456789012345</span> gültig ausgeben zu lassen, müssen wir Folgendes schreiben:</p>
<div class="listing"><pre class="prettyprint">System.out.println( 123456789012345<span class="cfett">L</span> );</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Das kleine »l« hat sehr viel Ähnlichkeit mit der Ziffer Eins. Daher sollte bei Längenangaben immer ein großes »L« eingefügt werden.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Frage   </span>Was gibt die folgende Anweisung aus?</p>
<div class="listing"><pre class="prettyprint">System.out.println( 123456789 + 5432l );</pre></div>
</td>
</tr>
</table><br><h4 class="t4">Der Datentyp »byte«</h4>
<p>Ein <span class="clisting">byte</span> ist ein Datentyp mit einem Wertebereich von &#8211;128 bis +127. Eine Initialisierung wie</p>
<div class="listing"><pre class="prettyprint">byte b = 200;      // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"></pre></div>
<p>ist also nicht erlaubt, da 200 &gt; 127 ist. Somit fallen alle Zahlen von 128 bis 255 (80<sub>16</sub> &#8211; FF<sub>16</sub>) raus. In der Datenverarbeitung ist das Java-<span class="clisting">byte</span>, weil es ein Vorzeichen trägt, nur mittelprächtig brauchbar, da insbesondere in der Dateiverarbeitung Wertebereiche von 0 bis 255 gewünscht sind.</p>
<p>Java erlaubt zwar keine vorzeichenlosen Ganzzahlen, aber mit zwei Schreibweisen lassen sich doch Zahlen wie 200 in einem <span class="clisting">byte</span> speichern.</p>
<div class="listing"><pre class="prettyprint">byte b =<span class="cfett"> (byte)</span> 200;
byte b = 200y;                // Erst ab Java 7</pre></div>
<p>Der Java-Compiler nimmt dazu einfach die Bitbelegung von 200 und interpretiert das oberste dann gesetzte Bit als Vorzeichenbit. Bei der Ausgabe fällt das auf:</p>
<div class="listing"><pre class="prettyprint">byte b = (byte) 200;
System.out.println( b );      // &#8211;56</pre></div>
<p>Die Schreibweise mit dem hinten angesetzten »y« oder »Y« ist erst seit Java 7 möglich.</p>
<h4 class="t4">Der Datentyp »short« *</h4>
<p>Der Datentyp <span class="clisting">short</span> ist selten anzutreffen. Mit seinen 2 Byte kann er einen Wertebereich von &#8211;32.768 bis +32.767 darstellen. Das Vorzeichen »kostet« wie bei den anderen Ganzzahlen 1 Bit, sodass nicht 16 Bit, sondern nur 15 Bit für Zahlen zu Verfügung stehen. Allerdings gilt wie beim <span class="clisting">byte</span>, dass auch ein <span class="clisting">short</span> ohne Vorzeichen auf zwei Arten initialisiert werden kann:</p>
<div class="listing"><pre class="prettyprint">short s =<span class="cfett"> (short)</span> 33000;
short s = 33000s;             // Erst in Java 7
System.out.println( s );      // &#8211;32536</pre></div>
<p>Im zweiten Fall ist die Syntax neu in Java 7.</p><a id="mjbd61f831aaea6b174b7a007af1a67476" name="mjbd61f831aaea6b174b7a007af1a67476"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">2.3.7</span> Das binäre (Basis 2), oktale (Basis 8), hexadezimale (Basis 16) Stellenwertsystem *  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Literale für Ganzzahlen lassen sich in vier unterschiedlichen Stellenwertsystemen angeben. Das natürlichste ist das <span class="ckursiv">Dezimalsystem</span> (auch <span class="ckursiv">Zehnersystem</span> genannt), bei dem die Literale aus den Ziffern »0« bis »9« bestehen. Zusätzlich existieren die <span class="ckursiv">Binär</span>- (erst ab Java 7), <span class="ckursiv">Oktal</span>- und <span class="ckursiv">Hexadezimalsysteme</span>, die die Zahlen zur Basis 2, 8 und 16 schreiben. Bis auf Dezimalzahlen beginnen die Zahlen in anderen Formaten mit einem besonderen Präfix.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 2.8    </strong>Die Stellenwertsysteme und ihre Schreibweise</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Präfix</span>
</td>
<td class="tabellenkopf"><span class="cfett">Stellenwertsystem</span>
</td>
<td class="tabellenkopf"><span class="cfett">Basis</span>
</td>
<td class="tabellenkopf"><span class="cfett">Darstellung von 1</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">0b</span> oder <span class="clisting">0B</span></p>
</td>
<td class="tabellentext">
<p>binär</p>
</td>
<td class="tabellentext">
<p>2</p>
</td>
<td class="tabellentext">
<p><span class="clisting">0b1</span> oder <span class="clisting">0B1</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">0</span></p>
</td>
<td class="tabellentext">
<p>oktal</p>
</td>
<td class="tabellentext">
<p>8</p>
</td>
<td class="tabellentext">
<p><span class="clisting">01</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p>kein</p>
</td>
<td class="tabellentext">
<p>dezimal</p>
</td>
<td class="tabellentext">
<p>10</p>
</td>
<td class="tabellentext">
<p><span class="clisting">1</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">0x</span> oder <span class="clisting">0X</span></p>
</td>
<td class="tabellentext">
<p>hexadezimal</p>
</td>
<td class="tabellentext">
<p>16</p>
</td>
<td class="tabellentext">
<p><span class="clisting">0x1</span> oder <span class="clisting">0X1</span></p>
</td>
</tr>
</table><br><p>Ein hexadezimaler Wert beginnt mit »0x« oder »0X«. Da zehn Ziffern für 16 hexadezimale Zahlen nicht ausreichen, besteht eine Zahl zur Basis 16 zusätzlich aus den Buchstaben »a« bis »f« (beziehungsweise »A« bis »F«). [Da »b«/»B« ein gültiges Hexadezimalzeichen ist, kann es (leider) nicht als Suffix für ein Byte gelten. Für <span class="clisting">byte</span>s musste der zweite Buchstabe aus Bytes herhalten: »y«. So ist <span class="clisting">0xby</span> eindeutig.
]  Das Hexadezimalsystem heißt auch <span class="ckursiv">Sedezimalsystem</span>. [Das Präfix »octo« bei »Oktalsystem« stammt aus dem Lateinischen. Das Wort »Hexadezimal« enthält zwei Bestandteile aus zwei verschiedenen Sprachen: »hexa« stammt aus dem Griechischen und »decem« (zehn) aus dem Lateinischen. Die alternative Bezeichnung Sedezimalzahl bzw. sedezimal (engl. sexadecimal &#8211; nicht sexagesimal, das ist Basis 60) ist rein aus dem Lateinischen abgeleitet, aber im Deutschen unüblich. Über den Ursprung des Wortes »Hexadezimal« finden Sie mehr unter http://en.wikipedia.org/wiki/Hexadecimal#Etymology.
] </p>
<p>Ein oktaler Wert beginnt mit dem Präfix »0«. Mit der Basis 8 werden nur die Ziffern »0« bis »7« für oktale Werte benötigt. Der Name stammt aus dem lateinischen »octo«, was auf Deutsch »acht« heißt. Das Oktalsystem war früher eine verbreitete Darstellung, da nicht mehr einzelne Bits solo betrachtet werden mussten, sondern 3 Bits zu einer Gruppe zusammengefasst wurden. In der Kommunikationselektronik ist das Oktalsystem noch weiterhin beliebt, spielt aber sonst keine Rolle.</p>
<p>Für Dualzahlen (also Binärzahlen zur Basis 2) wurde eine neue Notation in Java 7 eingeführt. Das Präfix ist »0b« oder »0B«. Es sind nur die Ziffern »0« und »1« erlaubt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gib Dezimal-, Binär, Oktal- und Hexadezimalzahlen aus:</p>
<div class="listing"><pre class="prettyprint">System.out.println( 1243 );         // 1243
System.out.println( 0b10111011 );   // 187</pre></div>
<div class="listing"><pre class="prettyprint">System.out.println( 01230 );        // 664
System.out.println( 0xcafebabe );   // &#8211;889275714</pre></div>
<div class="listing"><pre class="prettyprint">System.out.println( 0xC0B0<span class="cfett">L</span> );      // 49328</pre></div>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">In Java-Programmen sollten Oktalzahlen mit Bedacht eingesetzt werden. Wer aus optischen Gründen mit der 0 eine Zahl linksbündig auffüllt, erlebt eine Überraschung:</p>
<div class="listing"><pre class="prettyprint">int i = 118;
int j = 012;                        // Oktal 012 ist dezimal 10</pre></div>
</td>
</tr>
</table><br><a id="mjaed1f301e088df504ed1f24dae0d0caf" name="mjaed1f301e088df504ed1f24dae0d0caf"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">2.3.8</span> Die Fließkommazahlen »float« und »double«  <a href="#t2t310"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Für Fließkommazahlen (auch <span class="ckursiv">Gleitkommazahlen</span> genannt) einfacher und erhöhter Genauigkeit bietet Java die Datentypen <span class="clisting">float</span> und <span class="clisting">double</span>. Die Datentypen sind im IEEE-754-Standard beschrieben und haben eine Länge von 4 Byte für <span class="clisting">float</span> und 8 Byte für <span class="clisting">double</span>. Fließkommaliterale können einen Vorkommateil und einen Nachkommateil besitzen, die durch einen Dezimalpunkt (kein Komma) getrennt sind. Ein Fließkommaliteral muss keine Vor- oder Nachkommastellen besitzen, sodass auch Folgendes gültig ist:</p>
<div class="listing"><pre class="prettyprint">double d = 10.0 + 20. + .11;</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Der Datentyp <span class="clisting">float</span> ist mit 4 Byte, also 32 Bit, ein schlechter Scherz. Der Datentyp <span class="clisting">double</span> geht mit 64 Bit ja gerade noch, wobei in Hardware eigentlich 80 Bit üblich sind.</p>
</td>
</tr>
</table><br><h4 class="t4">Der Datentyp »float« *</h4>
<p>Standardmäßig sind die Literale vom Typ <span class="clisting">double</span>. Ein nachgestelltes »f« (oder »F«) zeigt an, dass es sich um ein <span class="clisting">float</span> handelt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gültige Zuweisungen für Fließkommazahlen vom Typ <span class="clisting">double</span> und <span class="clisting">float</span>:</p>
<div class="listing"><pre class="prettyprint">double pi = 3.1415, delta = .001;
float  ratio  = 4.33F;</pre></div>
</td>
</tr>
</table><br><p>Auch für den Datentyp <span class="clisting">double</span> lässt sich ein »d« (oder »D«) nachstellen, was allerdings nicht nötig ist, wenn Literale für Kommazahlen im Quellcode stehen; Zahlen wie 3.1415 sind automatisch vom Typ <span class="clisting">double</span>. Während jedoch bei 1 + 2 + 3.0 erst 1 und 2 als <span class="clisting">int</span> addiert werden, dann in <span class="clisting">double</span> und anschließend auf 3.0 addiert werden, würde 1D + 2 + 3.0 gleich mit der Fließkommazahl 1 beginnen. So ist auch 1D gleich 1.0.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Frage   </span>Was ist das Ergebnis der Ausgabe?</p>
<div class="listing"><pre class="prettyprint">System.out.println( 20000000000F == 20000000000F+1 );
System.out.println( 20000000000D == 20000000000D+1 );</pre></div>
<p class="BStandard">Tipp: Was sind die Wertebereiche von <span class="clisting">float</span> und <span class="clisting">double</span>?</p>
</td>
</tr>
</table><br><h4 class="t4">Noch genauere Auflösung bei Fließkommazahlen *</h4>
<p>Einen höher auflösenden beziehungsweise präziseren Datentyp für Fließkommazahlen als <span class="clisting">double</span> gibt es nicht. Die Standardbibliothek bietet für diese Aufgabe in <span class="clisting">java.math</span> die Klasse <span class="clisting">BigDecimal</span> an, die in Kapitel 12, »Bits und Bytes und Mathematisches«, näher beschrieben ist. Das ist sinnvoll für Daten, die eine sehr gute Genauigkeit aufweisen sollen, wie zum Beispiel Währungen. [Einige Programmiersprachen besitzen für Währungen eingebaute Datentypen, wie LotusScript mit <span class="clisting">Currency</span>, das mit 8 Byte einen sehr großen und genauen Wertebereich abdeckt. Erstaunlicherweise gab es einmal in C# den Datentyp <span class="clisting">currency</span> für ganzzahlige Währungen.
] </p><a id="mj45c99ccfafcac85ec9c0e87222047c6f" name="mj45c99ccfafcac85ec9c0e87222047c6f"></a><a name="t39"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t310"></a><h3 class="t3"><span class="cfett">2.3.9</span> Alphanumerische Zeichen  <a href="#t2t311"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t39"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der alphanumerische Datentyp <span class="clisting">char</span> (von engl. <span class="ckursiv">character</span>, Zeichen) ist 2 Byte groß und nimmt ein Unicode-Zeichen auf. Ein <span class="clisting">char</span> ist nicht vorzeichenbehaftet. Die Literale für Zeichen werden in einfache Hochkommata gesetzt. Spracheinsteiger verwechseln häufig die einfachen Hochkommata mit den Anführungszeichen der Zeichenketten (Strings). Die einfache Merkregel lautet: ein Zeichen &#8211; ein Hochkomma, mehrere Zeichen &#8211; zwei Hochkommata (Gänsefüßchen).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Korrekte Hochkommata für Zeichen und Zeichenketten:</p>
<div class="listing"><pre class="prettyprint">char   c = <span class="cfett">'</span>a<span class="cfett">'</span>;
String s = <span class="cfett">"</span>Heut' schon gebeckert?<span class="cfett">"</span>;</pre></div>
</td>
</tr>
</table><br><p>Da der Compiler ein <span class="clisting">char</span> automatisch in ein <span class="clisting">int</span> konvertieren kann, ist auch <span class="clisting">int c = 'a';</span> gültig.</p>
<h4 class="t4">Escape-Sequenzen/Fluchtsymbole</h4>
<p>Um spezielle Zeichen, etwa den Zeilenumbruch oder Tabulator, in einen String oder <span class="clisting">char</span> setzen zu können, stehen Escape-Sequenzen [Nicht alle aus C stammenden Escape-Sequenzen finden sich auch in Java wieder. Es gibt kein <span class="clisting">'\a'</span> (Alert), <span class="clisting">'\v'</span> (vertikaler Tabulator) und kein <span class="clisting">'\?'</span> (Fragezeichen).
]  zur Verfügung.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 2.9    </strong>Escape-Sequenzen</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Zeichen</span>
</td>
<td class="tabellenkopf"><span class="cfett">Bedeutung</span>
</td>
<td class="tabellenkopf"><span class="cfett">Umschreibung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\uXXXX</span></p>
</td>
<td class="tabellentext">
<p>Unicode-Zeichen. X steht für ein Hexadezimalzeichen.</p>
</td>
<td class="tabellentext"> </td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\b</span></p>
</td>
<td class="tabellentext">
<p>Rückschritt (Backspace)</p>
</td>
<td class="tabellentext">
<p><span class="clisting">\u0008</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\n</span></p>
</td>
<td class="tabellentext">
<p>Zeilenschaltung (Newline)</p>
</td>
<td class="tabellentext">
<p><span class="clisting">\u000a</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\f</span></p>
</td>
<td class="tabellentext">
<p>Seitenumbruch (Formfeed)</p>
</td>
<td class="tabellentext">
<p><span class="clisting">\u000c</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\r</span></p>
</td>
<td class="tabellentext">
<p>Wagenrücklauf (Carriage return)</p>
</td>
<td class="tabellentext">
<p><span class="clisting">\u000d</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\t</span></p>
</td>
<td class="tabellentext">
<p>horizontaler Tabulator</p>
</td>
<td class="tabellentext">
<p><span class="clisting">\u0009</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\"</span></p>
</td>
<td class="tabellentext">
<p>doppeltes Anführungszeichen</p>
</td>
<td class="tabellentext">
<p><span class="clisting">\u0022</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\'</span></p>
</td>
<td class="tabellentext">
<p>einfaches Anführungszeichen</p>
</td>
<td class="tabellentext">
<p><span class="clisting">\u0027</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">\\</span></p>
</td>
<td class="tabellentext">
<p>Backslash</p>
</td>
<td class="tabellentext">
<p><span class="clisting">\u005c</span></p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zeichenvariablen mit Initialwerten und Sonderzeichen:</p>
<div class="listing"><pre class="prettyprint">char theLetterA  = 'a',
     singlequote = '\'',
     newline     = '\n';</pre></div>
<p class="BStandard">Die Fluchtsymbole sind für Zeichenketten die gleichen. Auch dort können bestimmte Zeichen mit Escape-Sequenzen dargestellt werden:</p>
<div class="listing"><pre class="prettyprint">String s        = "Er fragte: \"Wer lispelt wie Katja Burkard?\"";</pre></div>
<div class="listing"><pre class="prettyprint">String filename = "C:\\Dokumente\\Siemens\\Schweigegeld.doc";</pre></div>
</td>
</tr>
</table><br><a id="mj76f1b77014dafca1b945790800d9aedd" name="mj76f1b77014dafca1b945790800d9aedd"></a><a name="t310"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t311"></a><h3 class="t3"><span class="cfett">2.3.10</span> Gute Namen, schlechte Namen  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t310"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Für die optimale Lesbarkeit und Verständlichkeit eines Programmcodes sollten Entwickler beim Schreiben einige Punkte berücksichtigen:</p>
<ul class="gp">
<li>Ein konsistentes Namensschema ist wichtig. Heißt ein Zähler <span class="clisting">no</span>, <span class="clisting">nr</span>, <span class="clisting">cnr</span> oder <span class="clisting">counter</span>? Auch sollten wir korrekt schreiben und auf Rechtschreibfehler achten, denn leicht wird aus <span class="clisting">necessaryConnection</span> dann <span class="clisting">nesesarryConnection</span>. Variablen ähnlicher Schreibweise, etwa <span class="clisting">counter</span> und <span class="clisting">counters</span>, sind zu vermeiden.</li>
</ul>
<ul class="gp">
<li>Abstrakte Bezeichner sind ebenfalls zu vermeiden. Die Deklaration <span class="clisting">int TEN = 10;</span> ist absurd. Eine unsinnige Idee ist auch die folgende: <span class="clisting">boolean FALSE = true, TRUE = false;</span>. Im Programmcode würde dann mit <span class="clisting">FALSE</span> und <span class="clisting">TRUE</span> gearbeitet. Einer der obersten Plätze bei einem Wettbewerb für die verpfuschtesten Java-Programme wäre uns gewiss …</li>
</ul>
<ul class="gp">
<li>Unicode-Sequenzen können zwar in Bezeichnern aufgenommen werden, doch sollten sie vermieden werden. In <span class="clisting">double übelkübel, \u00FCbelk\u00FCbel;</span> sind beide Bezeichnernamen gleich, und der Compiler meldet einen Fehler.</li>
</ul>
<ul class="gp">
<li>0 und O und 1 und l sind leicht zu verwechseln. Die Kombination »rn« ist schwer zu lesen und je nach Zeichensatz leicht mit »m« zu verwechseln.  [Eine Software wie Mathematica warnt vor Variablen mit fast identischem Namen.
]  Gültig &#8211; aber böse &#8211; ist auch: <span class="clisting">int ínt, ìnt, înt; boolean bôõleañ;</span></li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Bemerkung   </span>In China gibt es 90 Millionen Familien mit dem Nachnamen Li. Das wäre so, als ob wir jede Variable <span class="clisting">temp1</span>, <span class="clisting">temp2</span> … nennen würden.</p>
</td>
</tr>
</table><br><p><div class="eclipse"><img src="common/eclipseicon.gif" align="top" width="53" height="23" alt="Eclipse" title="Eclipse"></div>Ist ein Bezeichnername unglücklich gewählt (<span class="clisting">pneumonoultramicroscopicsilicovolcanoconiosis</span> ist schon etwas lang), so lässt er sich problemlos konsistent umbenennen. Dazu wählen wir im Menü <span class="kapitalchen">Refactor</span> 
    •
   <span class="kapitalchen">Rename</span> &#8211; oder auch kurz 
    <span class="tastenkappe">Alt</span>
  +
    <span class="tastenkappe">Umschalt</span>
  +
    <span class="tastenkappe">R</span>
  ; der Cursor muss auf dem Bezeichner stehen. Eine optionale Vorschau (engl. <span class="ckursiv">preview</span>) zeigt an, welche Änderungen die Umbenennung nach sich ziehen wird. Neben <span class="kapitalchen">Rename</span> gibt es auch noch eine andere Möglichkeit. Dazu lässt sich auf der Variablen mit 
    <span class="tastenkappe">Strg</span>
  +
    <span class="tastenkappe">1</span>
   ein Popup-Fenster mit <span class="kapitalchen">Local Rename</span> öffnen. Der Bezeichner wird selektiert und lässt sich ändern. Gleichzeitig ändern sich alle Bezüge auf die Variable mit.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="2.3 Datentypen, Typisierung, Variablen und Zuweisungen"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_02_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_02_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
