<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 13.10 Algorithmen in Collections</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 13.10 Algorithmen in Collections">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 13.10 Algorithmen in Collections">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_13_009.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_13_011.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b" class="navnav">13 Datenstrukturen und Algorithmen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_001.htm#mj6ccdb9587d160efa70d8ec6e341ed18d" class="navnav">13.1 Datenstrukturen und die Collection-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj1f6e6f95ae58be78d8c7c33d5ec49eb9" class="navnav">13.1.1 Designprinzip mit Schnittstellen, abstrakten und konkreten Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj93c1c1e6b86c74945bc9929e635b50ed" class="navnav">13.1.2 Die Basis-Schnittstellen Collection und Map</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj7a79efaff3ac0ccbf8d02255a3aaeb21" class="navnav">13.1.3 Das erste Programm mit Container-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj2026369214f78e117bc4014be1b17b42" class="navnav">13.1.4 Die Schnittstelle Collection und Kernkonzepte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj09ef8eba4417ef39ea4188a48e2b4fe7" class="navnav">13.1.5 Schnittstellen, die Collection erweitern, und Map</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj8a76d089e7c9ff06b5403c9e8cb0dbd5" class="navnav">13.1.6 Konkrete Container-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj20c3f4b9802e0f1a9aee25c67327fe8c" class="navnav">13.1.7 Welche Container-Klasse nehmen?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mj4eefaa341178c745bfceae42501036bb" class="navnav">13.1.8 Generische Datentypen in der Collection-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_001.htm#mje5050a5669fd9b4900809aa4e1d34308" class="navnav">13.1.9 Die Schnittstelle »Iterable« und das erweiterte »for«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_002.htm#mj6a20dd38f9c93abb1c32b6f2f56357af" class="navnav">13.2 Mit einem Iterator durch die Daten wandern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mj45b286662ec7b5715ef9c802f6c3513a" class="navnav">13.2.1 Die Schnittstellen Enumeration und Iterator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mja7762290bb6067a0fbd05b8f3464f59d" class="navnav">13.2.2 Iteratoren von Sammlungen und das erweiterte »for«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_002.htm#mj30dd8d057bfa61a6525e9269b03019c0" class="navnav">13.2.3 Fail-Fast-Iterator und die ConcurrentModificationException</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_003.htm#mjf4178c97cb04d7bdd4be130334579516" class="navnav">13.3 Listen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj924ffbfcb5de21fdf1a47f32930e42ce" class="navnav">13.3.1 Auswahlkriterium ArrayList oder LinkedList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mja4d1641a6292a2df6e31df7304ee0c9b" class="navnav">13.3.2 Die Schnittstelle List</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj63d4129737eb19c28d378dc37e103df2" class="navnav">13.3.3 ListIterator *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj10f6167ad1bdfb44e9b980a4a744a0c0" class="navnav">13.3.4 ArrayList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj6144fdfaf67c663736500be97c6834aa" class="navnav">13.3.5 LinkedList</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj28bdf78da3eae580db1861dbf88c91e3" class="navnav">13.3.6 Der Feld-Adapter »Arrays.asList()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mj1f8103e31724ff7e2fceb8bcb60aa67d" class="navnav">13.3.7 »toArray()« von Collection verstehen &#8211; die Gefahr einer Falle erkennen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_003.htm#mja85bfc5d8a94f925335e5488e8a3e81c" class="navnav">13.3.8 Primitive Elemente in den Collection-Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_004.htm#mje7632b0de42c17693defeebd48736c7f" class="navnav">13.4 Datenstrukturen mit Ordnung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj71f45ecb57e5f607156239ebc8ee1c86" class="navnav">13.4.1 Algorithmen mit Such- und Sortiermöglichkeiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj7a8c8fc5d6d143c1438c20607bff376f" class="navnav">13.4.2 Den größten und kleinsten Wert einer Collection finden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_004.htm#mj7a4c4509ffe85c1968d541492369c412" class="navnav">13.4.3 Sortieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_005.htm#mj45263b87fd44c62f2cde668164897a93" class="navnav">13.5 Mengen (Sets)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj3aa70559d61c305035645bb81b8d2469" class="navnav">13.5.1 HashSet</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj5eea6a1f66c7382900fdecd6e5865d3b" class="navnav">13.5.2 TreeSet &#8211; die Menge durch Bäume</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_005.htm#mj41ba16b6b9fd82b4ea19fa31e73fe365" class="navnav">13.5.3 LinkedHashSet</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_006.htm#mje2d6ca56ec06f93d3b2c8a18b73fde6e" class="navnav">13.6 Stack (Kellerspeicher, Stapel)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_006.htm#mj99b21bfdc1d5b5e12b826848170d6fc6" class="navnav">13.6.1 Die Methoden von »Stack«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_006.htm#mj0c9a4bc09c3ca7bb4407a33d4270d2b4" class="navnav">13.6.2 Ein »Stack« ist ein »Vector« &#8211; aha!</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_007.htm#mj0cdc7b3eb6a6b4dcdd7ac41f265dad03" class="navnav">13.7 Queues (Schlangen) und Deques</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mj490b2d33f4c96d064299bf581dd127af" class="navnav">13.7.1 Die Schnittstelle »Queue«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mjea3134c093b3ea42696ef5d64da7fe21" class="navnav">13.7.2 Blockierende Queues und Prioritätswarteschlangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_007.htm#mj716e961cbb2ed8dabc4e62745bf8907a" class="navnav">13.7.3 »Deque«-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_008.htm#mj836f3979bc516dee7023f5bc030ad627" class="navnav">13.8 Assoziative Speicher</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj6251e23375a9e2c3e729ddc747e1f2ed" class="navnav">13.8.1 Die Klassen »HashMap« und »TreeMap«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj748c34d0cdfc13971e9638ab713d6eff" class="navnav">13.8.2 Einfügen und Abfragen der Datenstruktur</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj3dc1756cf378db77cc9c38a682281404" class="navnav">13.8.3 Über die Bedeutung von »equals()«, »hashCode()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mje58b19cabdd91545346c9160bbf456fa" class="navnav">13.8.4 IdentityHashMap</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj4c0fb480d9f5dca8b0ac98ca26a8c0c3" class="navnav">13.8.5 Das Problem von veränderten Elementen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj03374baa89cf87ef02349f703180bd14" class="navnav">13.8.6 Aufzählungen und Ansichten des Assoziativspeichers</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj02c989d784a59defc8cb239a494d2b42" class="navnav">13.8.7 Der Gleichheitstest, Hash-Wert und Klon einer Hash-Tabelle*</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_008.htm#mj5260d04d10949c0ec2c9122090ea613a" class="navnav">13.8.8 Die Arbeitsweise einer Hash-Tabelle *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_009.htm#mj3caf7868aebd71a657cac5c47c87cec9" class="navnav">13.9 Die Properties-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj182eaee2a4ca8f8b458ab3d60d50537c" class="navnav">13.9.1 Properties setzen und lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj24463d6c9d1783930fb460cb62ff3921" class="navnav">13.9.2 Properties verketten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj604807f32ff53197c8b3667285c5f39c" class="navnav">13.9.3 Hierarchische Eigenschaften</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mj72243719024672251cb31a808440771d" class="navnav">13.9.4 Eigenschaften ausgeben *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_009.htm#mjf8ebe35d4f4fd0199f37e99984e7f732" class="navnav">13.9.5 Properties laden und speichern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj31b29f3f7c1152bc2f6997ab29af14b7" class="navh">13.10 Algorithmen in Collections</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjf5b4df2039dbfb4fc4e44f5e4ee93747" class="navh">13.10.1 Nicht-änderbare Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj7b5e23e879a8b82fc7967e3134b020a7" class="navh">13.10.2 Null Object Pattern und leere Sammlungen zurückgeben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc40940722b422ff38ddc02f6e4f223a8" class="navh">13.10.3 Mit der Halbierungssuche nach Elementen fahnden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj71789a9023a966258b7e3c417cc967c4" class="navh">13.10.4 Ersetzen, Kopieren, Füllen, Umdrehen, Rotieren, Durchmischen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj0ef664400e5bb7afaf45f07bc99fb342" class="navh">13.10.5 Häufigkeit eines Elements *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb2c1c49f74f26c58e17bfca0a558f725" class="navh">13.10.6 nCopies() *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj87b606bd070a3fe065d9e3235aa42215" class="navh">13.10.7 Singletons *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_011.htm#mj0ff161e9620174964e86be55a40f1eff" class="navnav">13.11 Synchronisation der Datenstrukturen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mjb7c8b7760ff21e6e5bb0ad40f4f29968" class="navnav">13.11.1 Lock-free-Algorithmen aus java.util.concurrent</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mjf1ac096770848daaaf781e0d6c15b8a0" class="navnav">13.11.2 Wrapper zur Synchronisation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_011.htm#mj587b04b2fa3737ce40a9118e27d1f818" class="navnav">13.11.3 »CopyOnWriteArrayList« und »CopyOnWriteArraySet«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_012.htm#mjbfcd83b3541482d2f9c2c4faee3b7013" class="navnav">13.12 Die Klasse »BitSet« für Bitmengen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mje31079a72ad10f37120efe1808f08c38" class="navnav">13.12.1 Ein »BitSet« anlegen, füllen und erfragen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjebe1a504ea1a65bd97894c79caae5b6f" class="navnav">13.12.2 Mengenorientierte Operationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjf275d8829b6e2f0bc03919159b7b96a8" class="navnav">13.12.3 Methodenübersicht</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_13_012.htm#mjb5daec6a05d52b553339ade302571692" class="navnav">13.12.4 Primzahlen in einem BitSet verwalten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_13_013.htm#mjc65ac117dfc6f17596056e9184d73038" class="navnav">13.13 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mj31b29f3f7c1152bc2f6997ab29af14b7" name="mj31b29f3f7c1152bc2f6997ab29af14b7"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">13.10</span> Algorithmen in Collections  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Um Probleme in der Informatik zu lösen, ist die Wahl einer geeigneten Datenstruktur nur der erste Schritt. Im zweiten Schritt müssen Algorithmen implementiert werden. Da viele Algorithmen immer wiederkehrende (Teil-)Probleme lösen, hilft uns auch hier die Java-Bibliothek mit einigen Standardalgorithmen weiter. Dazu zählen etwa Methoden zum Sortieren und Suchen in Containern und zum Füllen von Containern. Einige Algorithmen sind Teil der jeweiligen Datenstruktur selbst, andere wiederum befinden sich in der Extraklasse <span class="clisting">java.util.Collections</span>. Diese Utility-Klasse, die wir nicht mit dem Interface <span class="clisting">Collection</span> verwechseln dürfen, bietet Methoden, um zum Beispiel</p>
<ul class="gp">
<li>Listen zu sortieren, zu mischen, umzudrehen, zu kopieren und zu füllen,</li>
</ul>
<ul class="gp">
<li>Elemente nach der Halbierungssuche zu finden,</li>
</ul>
<ul class="gp">
<li>die Anzahl <span class="clisting">equals()</span>-gleicher Elemente zu ermitteln,</li>
</ul>
<ul class="gp">
<li>Extremwerte zu bestimmen,</li>
</ul>
<ul class="gp">
<li>Elemente in einer Liste zu ersetzen und</li>
</ul>
<ul class="gp">
<li>Wrapper um existierende Datenstrukturen zu legen.</li>
</ul>
<p>Viele Algorithmen sind nur auf <span class="clisting">List</span>-Objekten definiert, denn der einfache Typ <span class="clisting">Collection</span> reicht oft nicht aus. Das ist nicht erstaunlich, denn wenn ein Container keine Ordnung definiert, kann er nicht sortiert werden. Auch die binäre Suche erfordert Container mit einer impliziten Reihenfolge der Elemente. Nur Min- und Max-Methoden arbeiten auf allgemeinen <span class="clisting">Collection</span>-Objekten. Nutzt die <span class="clisting">Collections</span>-Klasse keine <span class="clisting">List</span>-Objekte, arbeitet sie doch nur mit <span class="clisting">Collection</span>-Objekten und nicht mit Iteratoren.</p>
<p>Alle Methoden sind statisch, sodass <span class="clisting">Collections</span> eine Utility-Klasse wie <span class="clisting">Math</span> ist. Ein Exemplar von <span class="clisting">Collections</span> lässt sich nicht anlegen &#8211; der Konstruktor ist privat.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Elemente gehen geordnet in eine Liste hinein und kommen durchgeschüttelt wieder heraus. Das wahllose Vertauschen der Elemente übernimmt <span class="clisting">Collections.shuffle()</span>. Da <span class="clisting">shuffle()</span> allgemein auf <span class="clisting">List</span>-Objekten arbeitet, können wir hier <span class="clisting">LinkedList</span>-, <span class="clisting">Vector</span>- und <span class="clisting">ArrayList</span>-Objekte einsetzen:</p>
<p class="tabunter"><strong>Listing 13.27    </strong>com/tutego/insel/util/Shuffle.java, main()</p>
<div class="listing"><pre class="prettyprint">List&lt;String&gt; v = new ArrayList&lt;String&gt;();
Collections.addAll( v, "Bube", "Dame", "König", "Ass" );<span class="cfett">
Collections.shuffle( v );</span>
System.out.println( v );  // z.B. [König, Ass, Bube, Dame]</pre></div>
</td>
</tr>
</table><br><a id="mjf5b4df2039dbfb4fc4e44f5e4ee93747" name="mjf5b4df2039dbfb4fc4e44f5e4ee93747"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">13.10.1</span> Nicht-änderbare Datenstrukturen  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Diverse <span class="clisting">Collections.unmodifiableXXX()</span>-Methoden legen eine Hülle um eine Datenstruktur und lassen nur die Lese-Methoden zum Container durch, blockieren aber Modifizierungsbefehle wie <span class="clisting">add()</span> durch eine <span class="clisting">UnsupportedOperationException</span>.</p><a id="mj7b5e23e879a8b82fc7967e3134b020a7" name="mj7b5e23e879a8b82fc7967e3134b020a7"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">13.10.2</span> Null Object Pattern und leere Sammlungen zurückgeben  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>In Java gilt es als guter Stil, auf <span class="clisting">null</span> wenn möglich in der Rückgabe zu verzichten. Das Problem ist, dass der Aufrufer dann eine Fallunterscheidung auf <span class="clisting">null</span>/ungleich <span class="clisting">null</span> vornehmen muss, ob die Operation durchführbar war. Insbesondere bei Methoden, die Datenstrukturen liefern, kann leicht auf die <span class="clisting">null</span>-Rückgabe verzichtet werden, denn sie geben einfach eine leere Sammlung zurück. Das nennt sich <span class="ckursiv">Null Object Pattern</span>, denn statt <span class="clisting">null</span> wird ein Objekt ohne Inhalt, eben ein Null-Objekt zurückgegeben.</p>
<p>Ein Beispiel soll dieses Vorgehen zeigen. Eine eigene statische Methode <span class="clisting">words()</span> soll eine Zeichenkette nach Worten zerlegen und diese Worte in einer List zurückgeben:</p>
<div class="listing"><pre class="prettyprint">public static List&lt;String&gt; words( String sentence )
{
  if ( sentence == null || sentence.trim().isEmpty() )
    return new ArrayList&lt;String&gt;( 0 );

  return Arrays.asList( sentence.split( "\\p{Punct}?\\s+|\\p{Punct}" ) );
}</pre></div>
<p>Ist ein übergebenes Argument <span class="clisting">null</span> oder nur Weißraum im String, so soll eine leere Liste zurückgegeben werden. Andernfalls zerlegen wir die Zeichenkette mit <span class="clisting">split()</span>, wobei als Trennausdruck der Einfachheit halber entweder ein Zeichensetzungszeichen alleine oder ein Zeichensetzungszeichen gefolgt von Leerraum möglich ist. Das ergibt in der Anwendung:</p>
<div class="listing"><pre class="prettyprint">words( "Du bist,  was du programmierst! !" )  [Du, bist, was, du, programmierst]
words( " \n   \t" ) );                        []
words( null ) );                              []</pre></div>
<p>Der Vorteil, dass das Null-Objekt, also die leere Liste, eine Fallunterscheidung auf <span class="clisting">null</span> unnötig macht, ist praktisch, da zum Beispiel einfach die Methode <span class="clisting">words()</span> im erweiterten for eingesetzt werden kann:</p>
<div class="listing"><pre class="prettyprint">for ( String word : words("The Eagle has landed.") )
  System.out.println( word );</pre></div>
<p>Ist der übergebene »String« bei <span class="clisting">words()</span> nun <span class="clisting">null</span>, so kümmert das die erweiterte <span class="clisting">for</span>-Schleife nicht, denn über eine leere Liste muss das erweiterte for nicht iterieren.</p>
<h4 class="t4">Im API-Design immutable Listen in der Rückgabe bevorzugen</h4>
<p>Nun lässt das API-Design drei Varianten bei Rückgaben von Sammlungen zu (nicht nur bezogen auf unseren Anwendungsfall):</p>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>1.</strong></td>
<td valign="top" width="100%" align="left"> Der Empfänger bekommt eine immutable Sammlung, die er also nicht ändern kann.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>2.</strong></td>
<td valign="top" width="100%" align="left"> Der Empfänger bekommt eine Kopie der Daten, und die empfangene Sammlung kann er nach Herzenslust ändern.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>3.</strong></td>
<td valign="top" width="100%" align="left"> Der Empfänger bekommt direkten Zugriff auf interne Zustände und kann diese somit modifizieren.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<p>Alle Varianten haben ihre Vor- und Nachteile, aber üblicherweise wählen Entwickler die erste Variante. Der Grund ist, dass, wie im dritten Fall, Aufrufern ungern Einblick in die Interna gegeben werden soll und dass, wie im zweiten Fall, der Aufrufer vielleicht gar keine Änderung vornehmen möchte, sodass die Kopie überflüssig ist &#8211; wenn ein Aufrufer eine veränderbare Kopie für sich möchte, erzeugt er einfach eine, etwa mit <span class="clisting">new ArrayList(resultList)</span>.</p>
<p>Szenarien, in denen aufgrund von Bedingungen leere Datenstrukturen zurückgegeben werden, gibt es viele. Nun haben alle diese leeren Sammlungen auch eine Sache gemeinsam: Sie sind alle gleich leer und können sozusagen »gemeinsam« verwendet werden. Uns so kommen die Frage »Was tun bei leeren Sammlungen in der Rückgabe?« und die drei Rückgabemöglichkeiten zusammen. Die bisherige Anweisung <span class="clisting">return new ArrayList&lt;String&gt;(0)</span> in <span class="clisting">words()</span> ist eine Anwendung der zweiten Lösung, denn der Aufrufer bekommt eine neue veränderbare Liste, der er ändern kann. Das unschöne ist aber, dass, wenn der Aufrufer diese Liste überhaupt nicht ändern möchte und er sich diese Liste auch noch merkt, unnötig Speicher verbraucht wird. Ein Beispiel: Eine Schleife läuft zeilenweise durch eine Datei und ruft <span class="clisting">words()</span> auf, etwa so:</p>
<div class="listing"><pre class="prettyprint">List&lt;List&lt;String&gt;&gt; allLines = new ArrayList&lt;List&lt;String&gt;&gt;();
while ( in.hasNextLine() )
  allLines.add( words(in.nextLine()) );</pre></div>
<p>Die zurückgegebenen Wort-Listen werden in einer Datenstruktur <span class="clisting">allLines</span> gespeichert, um einfachen Zugriff auf die Zeilen zu bekommen. Wenn nun viele Leerzeilen in der Datei sind, so würde <span class="clisting">words()</span> mit der bisherigen Lösung immer eine <span class="clisting">new ArrayList&lt;String&gt;(0)</span> aufbauen, das dann <span class="clisting">allLines</span> referenziert. Bei vielen leeren Zeilen kostet das also (wenn auch nur wenig) unnötig Speicher und Laufzeit. Wenn wir die Semantik der Rückgabe von <span class="clisting">words()</span> ändern, und nun leere immutable Listen zurückgeben, ist eine interessante Optimierung möglich.</p>
<h4 class="t4">Collections.emptyXXX()</h4>
<p>Java bietet in <span class="clisting">Collections</span> diverse vorgefertigte leere immutable Datenstrukturen. Dabei gibt es zwei Möglichkeiten. Seit Java 1.3 existieren drei statische finale Variablen: <span class="clisting">Collections.EMPTY_SET</span> ist eine leeres immutable <span class="clisting">Set</span>, <span class="clisting">Collections.EMPTY_LIST</span> eine leere immutable <span class="clisting">List</span> und <span class="clisting">Collections.EMPTY_MAP</span> eine leer immutable <span class="clisting">Map</span>. Die Variablen werden wir aber nicht nutzen wollen, denn sie sind alle nicht mit einem generischen Typ deklariert, also im Raw-Typ angeboten. Besser ist, auf Methoden zurückzugreifen, die Type-Inference nutzen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p><span class="clisting">class java.util.</span><span class="cfett">Collections</span></p>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static &lt;T&gt; List&lt;T&gt; emptyList()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static &lt;K,V&gt; Map&lt;K,V&gt; emptyMap()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static &lt;T&gt; Set&lt;T&gt; emptySet()</span>
Liefert eine leere unveränderbare Datenstruktur.</li>
</ul>
<p>Unser Beispiel mit der Methode <span class="clisting">word()</span> kann daher optimiert werden. Und da konsequenterweise auch im nicht-leeren Fall eine immutable Datenstruktur zurückgegeben werden sollte, sieht die Lösung wie folgt aus:</p>
<p class="tabunter"><strong>Listing 13.28    </strong>com/tutego/insel/util/EmptyCollections.java, words()</p>
<div class="listing"><pre class="prettyprint">public static List&lt;String&gt; words( String sentence )
{
  if ( sentence == null || sentence.trim().isEmpty() )
    return Collections.emptyList();

  return Collections.unmodifiableList(
           Arrays.asList( sentence.split( "\\p{Punct}?\\s+|\\p{Punct}" ) ) );
}</pre></div>
<p>Die Performance ist nun ausgezeichnet und der Druck auf den GC genommen, denn ist der String leer oder <span class="clisting">null</span>, muss nun keine neue leere <span class="clisting">ArrayList</span> mehr aufgebaut werden.</p>
<p>Seit Java 7 kommen drei statische Methoden hinzu, die leere Iteratoren geben, also Iteratoren, die keine Elemente liefern.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p><span class="clisting">class java.util.</span><span class="cfett">Collections</span></p>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static &lt;T&gt; Iterator&lt;T&gt; emptyIterator()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static &lt;T&gt; ListIterator&lt;T&gt; emptyListIterator()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static &lt;T&gt; Enumeration&lt;T&gt; emptyEnumeration()</span></li>
</ul>
<p>Ein <span class="clisting">Iterable&lt;E&gt; emptyIterable()</span> ist nicht nötig, da ja <span class="clisting">Set</span> und <span class="clisting">List</span> die Schnittstelle <span class="clisting">Iterable</span> implementieren und somit <span class="clisting">emptySet()</span> und <span class="clisting">emptyList()</span> sozusagen <span class="clisting">emptyIter-able()</span> sind.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Bei <span class="clisting">for ( Object o : iterable )</span> muss die Variable <span class="clisting">iterable</span> vom Typ <span class="clisting">Iterable</span> und zugleich ungleich <span class="clisting">null</span> sein &#8211; bei <span class="clisting">null</span> folgt eine <span class="clisting">NullPointerException</span>. Um diese ungeprüfte Ausnahme zu vermeiden, lässt sich <span class="clisting">for ( Object o : unnull(iterable) )</span> nutzen, und <span class="clisting">unnull()</span> ist eine eigene Methode, die bei einem <span class="clisting">null</span>-Argument ein leeres <span class="clisting">Iterable</span> liefert:</p>
<div class="listing"><pre class="prettyprint">public static &lt;E&gt; Iterable&lt;E&gt; unnull( Iterable&lt;E&gt; iterable
{
  return iterable != null ? iterable : Collections.&lt;E&gt;emptySet();
}</pre></div>
</td>
</tr>
</table><br><a id="mjc40940722b422ff38ddc02f6e4f223a8" name="mjc40940722b422ff38ddc02f6e4f223a8"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">13.10.3</span> Mit der Halbierungssuche nach Elementen fahnden  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die <span class="clisting">Collection</span>-Klassen enthalten mit <span class="clisting">contains(Object)</span> eine Methode, die entweder <span class="clisting">true</span> oder <span class="clisting">false</span> zurückgibt, wenn ein Element gefunden wurde oder nicht. Die Position eines Elements in einer <span class="clisting">List</span> liefert die Objektfunktion <span class="clisting">indexOf(Object)</span>. Ist die Liste sortiert, lässt sich eine Suche schneller durch das Halbierungsverfahren durchführen, was Java durch die statische Methode <span class="clisting">binarySearch()</span> in den Klassen <span class="clisting">Arrays</span> und <span class="clisting">Collections</span> bietet.</p>
<p>Der <span class="ckursiv">Halbierungssuche</span> (auch <span class="ckursiv">binäre Suche</span>, engl. <span class="ckursiv">binary search</span>) liegt eine einfache Idee zugrunde: Die Suche nach einem Objekt beginnt in der Mitte der Liste. Ist das gesuchte Objekt kleiner als das mittlere Listenelement, dann muss es sich links von der Mitte befinden, andernfalls rechts. Die Liste wird also in zwei gleich große Abschnitte unterteilt, von denen nur einer weiter durchsucht werden muss. Diesen Vorgang wiederholen wir so oft, bis das Element gefunden wurde. Auf diese Weise ist die Suche sehr schnell und benötigt höchstens log(<span class="ckursiv">n</span>) Listenhalbierungen bei einer Liste mit <span class="ckursiv">n</span> Elementen. Es ist jedoch gut möglich, dass das gesuchte Element in der Liste nicht vorkommt. Dieser Fall wird erkannt, wenn durch das wiederholte Halbieren der Liste ein Listenabschnitt mit nur einem Element entstanden ist. Stimmt dieses eine Element nicht mit dem gesuchten Objekt überein, lautet das Ergebnis der Suche »nicht gefunden«. Die Suche nach einem nicht vorhandenen Element ist geringfügig aufwändiger als eine erfolgreiche Suche, benötigt aber ebenfalls nur logarithmisch viele Halbierungsschritte. Enthält die Liste mehrere gleiche Elemente, dann ist nicht gesichert, welches davon bei der Suche gefunden wird. Besteht die Liste etwa aus zehn gleichen Zahlen, dann liefert der Algorithmus das fünfte Element, denn schon nach der ersten Prüfung in der Mitte der Liste gibt es einen Treffer.</p>
<p>Statische Methoden <span class="clisting">binarySearch()</span> gibt es in der Klasse <span class="clisting">Arrays</span> und auch <span class="clisting">Collections</span>. Im ersten Fall von <span class="clisting">Arrays.binarySearch()</span> erwarteten die statischen Methoden ein Array, im zweiten Fall <span class="clisting">Collections.binarySearch()</span> eine <span class="clisting">List</span>. Die Arbeitsweise und Rückgaben sind aber gleich:</p>
<ul class="gp">
<li>Ist das Element in der Sammlung, so liefert <span class="clisting">binarySearch()</span> die Position des Objekts.</li>
</ul>
<ul class="gp">
<li>Gibt es ein Element mehrmals in der Sammlung, wird irgendein Index zurückgegeben.</li>
</ul>
<ul class="gp">
<li>Wurde kein passendes Element gefunden, ist das Ergebnis eine negative Zahl und beschreibt recht trickreich die Stelle, an der der Algorithmus den letzten Vergleich durchgeführt hat.</li>
</ul>
<ul class="gp">
<li>Ist die Sammlung nicht sortiert, kann die Halbierungssuche nicht richtig funktionieren, da sie möglicherweise in die falsche Richtung läuft und das Element sich in der anderen Hälfte der unterteilten Sammlung befindet. Eine nicht sortierte Sammlung lässt sich mit <span class="clisting">sort()</span> sortieren. Es ist aber immer noch schneller, in einer unsortierten Sammlung zu suchen &#8211; Laufzeit O(<span class="ckursiv">n</span>) &#8211;, als erst die Sammlung zu sortieren &#8211; Laufzeit O(<span class="ckursiv">n</span> log(<span class="ckursiv">n</span>)) &#8211; und darin mit der Halbierungssuche zu suchen &#8211; Laufzeit O(log(<span class="ckursiv">n</span>)). Wenn ausreichend viele Suchvorgänge nacheinander in der gleichen Sammlung durchzuführen sind, lohnt sich das vorherige Sortieren der Sammlung natürlich schon.</li>
</ul>
<p>Ist das gesuchte Element nicht in der Sammlung, so ist der Rückgabewert (-Einfügepunkt &#8211; 1), und der Einfügepunkt ist die Position in der Sammlung, an die der Wert gemäß Sortierung eingesetzt werden kann. Wir können folgende Programmzeilen verwenden, um einen nicht gefundenen Wert gleich passend einzufügen:</p>
<div class="listing"><pre class="prettyprint">int pos = Collections.binarySearch( l, key );
if ( pos &lt; 0 )
  l.add( -pos &#8211; 1, key );</pre></div>
<p>Von <span class="clisting">binarySearch()</span> in der Klasse <span class="clisting">Collections</span> gibt es zwei Varianten: Die erste Methode nimmt an, dass die Werte in ihrer natürlichen Form sortiert sind. Die zweite arbeitet wieder mit einem <span class="clisting">Comparator</span>-Objekt zusammen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p><span class="clisting">class java.util.</span><span class="cfett">Collections</span></p>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt;</span>
                         <span class="clisting">int binarySearch( List&lt;? extends T&gt; list, T key )</span>
Sucht ein Element in der Liste. Gibt die Position zurück oder einen Wert kleiner 0, falls kein passendes Element in der Liste ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static &lt;T&gt; int binarySearch( List&lt;? extends T&gt; list, T key, Comparator&lt;? super T&gt; c )</span>
Sucht ein Element mit Hilfe des <span class="clisting">Comparator</span>-Objekts in der Liste. Gibt die Position oder einen Wert kleiner 0 zurück, falls kein passendes Element in der Liste ist.</li>
</ul><a id="mj71789a9023a966258b7e3c417cc967c4" name="mj71789a9023a966258b7e3c417cc967c4"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">13.10.4</span> Ersetzen, Kopieren, Füllen, Umdrehen, Rotieren, Durchmischen *  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mit <span class="clisting">replaceAll</span><span class="clisting">(List&lt;T&gt; list, T oldVal, T newVal)</span> werden die Elemente einer Liste gesucht und durch einen neuen Wert ersetzt. Die statische Methode <span class="clisting">copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</span> kopiert alle Elemente von <span class="clisting">src</span> in die Liste <span class="clisting">dest</span> und überschreibt dabei solche, die eventuell schon an den entsprechenden Positionen der Zielliste liegen. Die Zielliste muss mindestens so lang wie die Quellliste sein, andernfalls wird eine <span class="clisting">IndexOutOfBoundsException</span> ausgelöst. Hat das Ziel weitere Elemente, ist das egal, weil <span class="clisting">copy()</span> diese nicht antastet.</p>
<p>Die statische Methode <span class="clisting">fill</span><span class="clisting">(List&lt;? super T&gt; list, T obj)</span> belegt eine Liste in linearer Zeit mit lauter identischen Elementen. Das heißt aber, dass es immer das gleiche Objekt ist, das an allen Positionen sitzt. Es ist die Frage, ob dies immer so sinnvoll und nützlich ist. Die statische Methode <span class="clisting">reverse(List&lt;?&gt; list)</span> dreht die Reihenfolge der Elemente in einer Liste um. Die Laufzeit ist linear zur Anzahl der Elemente. Und <span class="clisting">rotate(List&lt;?&gt; list, int distance)</span> bewegt die Elemente um <span class="clisting">distance</span> Positionen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Die Monate sollen um zwei Positionen nach rechts und wieder zurückgeschoben werden:</p>
<p class="tabunter"><strong>Listing 13.29    </strong>com/tutego/insel/util/RotateTheList.java, main()</p>
<div class="listing"><pre class="prettyprint">List&lt;String&gt; list = new ArrayList&lt;String&gt;(
  Arrays.asList( new DateFormatSymbols().getShortMonths() ) );
System.out.println( list );  
   // [Jan, Feb, Mrz, Apr, Mai, Jun, Jul, Aug, Sep, Okt, Nov, Dez, ]<span class="cfett">
Collections.rotate( list, 2 );</span>
System.out.println( list );  
   // [Dez, , Jan, Feb, Mrz, Apr, Mai, Jun, Jul, Aug, Sep, Okt, Nov]<span class="cfett">
Collections.rotate( list, &#8211;2 );</span>
System.out.println( list );  
   // [Jan, Feb, Mrz, Apr, Mai, Jun, Jul, Aug, Sep, Okt, Nov, Dez, ]</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Ein Satz besteht aus weißraumgetrennten Wörtern ohne weitere Sonderzeichen, und die Wörter des Satzes sollen umgedreht werden:</p>
<div class="listing"><pre class="prettyprint">public static String reverseWords( String text
{
  List&lt;String&gt; list = Arrays.asList( text.split( "\\s+" ) );
  Collections.reverse( list );
  return list.toString().replaceAll( "\\[|\\]|,", "" );
}</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p><span class="clisting">class java.util.</span><span class="cfett">Collections</span></p>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static &lt;T&gt; void copy( List&lt;? super T&gt; dest, List&lt;? extends T&gt; src )</span>
Kopiert alle Elemente von <span class="clisting">src</span> nach <span class="clisting">dest</span>. Ist <span class="clisting">dest</span> zu klein, gibt es eine <span class="clisting">IndexOutOfBoundsException</span>. Ist die Zielliste größer als die Quellliste, lässt <span class="clisting">copy()</span> die letzten Elemente von <span class="clisting">dest</span> unangetastet.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static &lt;T&gt; void fill( List&lt;? super T&gt; list, T obj )</span>
Füllt die Liste <span class="clisting">list</span> mit dem Element <span class="clisting">obj</span>. Vorhandene Elemente werden mit <span class="clisting">obj</span> überschrieben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static boolean replaceAll( List&lt;T&gt; list, T oldVal, T newVal )</span>
Sucht nach dem Auftreten von <span class="clisting">oldVal</span> über <span class="clisting">equals()</span> in der Liste und ersetzt die gefundenen Elemente durch <span class="clisting">newVal</span>. Die Größe der Liste ändert das nicht. Die Rückgabe ist <span class="clisting">true</span>, wenn mindestens ein Element ersetzt wurde.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static void reverse( List&lt;?&gt; list )</span>
Kehrt die Reihenfolge der Elemente in der Liste um.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static void rotate( List&lt;?&gt; list, int distance )</span>
Bewegt die Elemente der Liste um <span class="clisting">distance</span> Positionen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static void shuffle( List&lt;?&gt; list )</span>
Würfelt die Elemente der Liste durcheinander. Dafür wird ein Standard-Generator für Zufallszahlen verwendet.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static void shuffle( List&lt;?&gt; list, Random rnd )</span>
Würfelt die Elemente der Liste durcheinander und benutzt dafür den Random-Generator <span class="clisting">rnd</span>.</li>
</ul><a id="mj0ef664400e5bb7afaf45f07bc99fb342" name="mj0ef664400e5bb7afaf45f07bc99fb342"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">13.10.5</span> Häufigkeit eines Elements *  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p><span class="clisting">Collections.frequency(Collection&lt;?&gt;, Object)</span> gibt die Anzahl der Elemente zurück, die zu einem Suchobjekt <span class="clisting">equals()</span>-gleich sind.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Ermittle die Anzahl der »:-)«-Smilies:</p>
<div class="listing"><pre class="prettyprint">String s = "Oten :-) Bilat :-) Iyot";
int i = <span class="cfett">Collections.frequency</span>( Arrays.asList(s.split("\\s")), ":-)" );
System.out.println( i );    // 2</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p><span class="clisting">class java.util.</span><span class="cfett">Collections</span></p>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static int frequency( Collection&lt;?&gt; c, Object o )</span>
Liefert die Anzahl der Elemente, die mit <span class="clisting">o</span> gleich sind. Für einen »Treffer« <span class="clisting">e</span> aus der Col-lection <span class="clisting">c</span> muss gelten: <span class="clisting">o == null ? e == null : o.equals(e)</span>. Ist die übergebene <span class="clisting">Collection c</span> gleich <span class="clisting">null</span>, folgt eine <span class="clisting">NullPointerException</span>.</li>
</ul><a id="mjb2c1c49f74f26c58e17bfca0a558f725" name="mjb2c1c49f74f26c58e17bfca0a558f725"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">13.10.6</span> nCopies() *  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die statische Methode <span class="clisting">nCopies()</span> erzeugt eine Liste mit der gewünschten Anzahl von Elementen aus einem Objekt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p><span class="clisting">class java.util.</span><span class="cfett">Collections</span></p>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static &lt;T&gt; List&lt;T&gt; nCopies( int n, T o )</span>
Erzeugt eine unveränderbare Liste mit <span class="clisting">n</span> Elementen von <span class="clisting">o</span>.</li>
</ul>
<p>Die Liste besteht nicht aus einer Anzahl Kopien des Elements (mit <span class="clisting">clone()</span>), sondern aus einer Liste, die ein Element immer wiederholt. Daher sind auch nur Leseoperationen wie <span class="clisting">get()</span> oder <span class="clisting">contains()</span> erlaubt, doch keine Veränderungen. Infolgedessen ist der Einsatzbereich der Liste beschränkt, jener der Methode aber nicht. Denn die Elemente der Liste können als Ausgang für eine modifizierbare Datenstruktur gelten, der sich eine Liste übergeben lässt. Das gilt zum Beispiel für eine <span class="clisting">ArrayList</span>, die im Konstruktor eine andere Liste akzeptiert, der sie die Werte entnimmt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Initialisiere eine Liste mit zehn Leerstrings, und hänge an eine Liste
zwei Zeichenketten mit ».« an:</p>
<div class="listing"><pre class="prettyprint">List&lt;String&gt; list = new ArrayList&lt;String&gt;( <span class="cfett">Collections.nCopies</span>(10, "") );
list.addAll( <span class="cfett">Collections.nCopies</span>(2, ".") );
System.out.println( list );   // [, , , , , , , , , , ., .]</pre></div>
</td>
</tr>
</table><br><p>Ein <span class="clisting">Collections.nCopies(1, value)</span> entspricht einem Singleton, für das Java aber eine eigene Methode bereithält.</p><a id="mj87b606bd070a3fe065d9e3235aa42215" name="mj87b606bd070a3fe065d9e3235aa42215"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">13.10.7</span> Singletons *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Singletons sind Objekte, die genau ein Exemplar realisieren. Die Klasse <span class="clisting">Collections</span> bietet drei statische Methoden, die ein gegebenes Element in eine immutable Menge, Liste oder einen Assoziativspeicher setzt:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p><span class="clisting">class java.util.</span><span class="cfett">Collections</span></p>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static &lt;T&gt; Set&lt;T&gt; singleton( T o )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static &lt;T&gt; List&lt;T&gt; singletonList( T o )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static &lt;K,V&gt; Map&lt;K,V&gt; singletonMap( K key, V value )</span></li>
</ul>
<p>Auf den ersten Blick erscheinen die Methoden ziemlich unnütz. Sie sind jedoch immer dann nützlich, wenn Methoden vorhanden sind, die zwar Sammlungen annehmen &#8211; auch wenn sie nur aus einem Element bestehen &#8211;, aber mit einzelnen Elementen nicht viel anfangen können.</p>
<h4 class="t4">Löschen von Elementen in einer Sammlung</h4>
<p>Die <span class="clisting">Collection</span>-Klassen bieten bisher keine Lösung zum Löschen aller Vorkommen eines Elements. Zwar gibt es die <span class="clisting">Collection</span>-Methode <span class="clisting">remove(Object)</span>, doch löscht diese nur das erste Vorkommen. Um alle Vorkommen zu löschen, ist entweder eine Schleife zu schreiben oder <span class="clisting">singleton()</span> zu nutzen. Uns hilft beim Löschen aller Elemente die Methode <span class="clisting">removeAll(Collection)</span>, doch erwartet sie als Argument eine <span class="clisting">Collection</span>, die wir ja gerade durch <span class="clisting">singleton()</span> bekommen, da ein <span class="clisting">Set</span> eine Erweiterung von <span class="clisting">Collection</span> ist. Auf diese Weise entfernt unsere statische Methode <span class="clisting">removeAll(Collection c, Object o)</span> jedes Vorkommen eines Objekts aus der Datenstruktur:</p>
<p class="tabunter"><strong>Listing 13.30    </strong>com/tutego/insel/util/SingletonDemo.java, removeAll()</p>
<div class="listing"><pre class="prettyprint">public static void removeAll( Collection&lt;?&gt; c, Object o )
{
  c.removeAll(<span class="cfett"> Collections.singleton(o)</span> );
}</pre></div><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="13.10 Algorithmen in Collections"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_13_009.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_13_011.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
