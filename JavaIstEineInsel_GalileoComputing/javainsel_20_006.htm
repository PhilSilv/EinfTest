<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 20.6 Bilder</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 20.6 Bilder">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 20.6 Bilder">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_20_005.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_20_007.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa" class="navnav">20 Grafikprogrammierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_001.htm#mj0b6314b6f10d983ddef5d00966d99f1e" class="navnav">20.1 Grundlegendes zum Zeichnen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_001.htm#mjd2e34b0d8796cabb2342454e6e81fb29" class="navnav">20.1.1 Die paint()-Methode für das AWT-Frame</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_001.htm#mja24005ce84f031f74ed78fd92dd27a56" class="navnav">20.1.2 Zeichnen von Inhalten auf ein JFrame</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_001.htm#mj5c1a24233f893de97b190b13044ea7f2" class="navnav">20.1.3 Auffordern zum Neuzeichnen mit »repaint()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_001.htm#mjb75d86c6baba384b7db6c355df649e4b" class="navnav">20.1.4 Java 2D-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_002.htm#mj6ab5adb8c4ee61a2595d19419db66fa6" class="navnav">20.2 Einfache Zeichenmethoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_002.htm#mj00532e6ba996d57f8d141f1e1810454f" class="navnav">20.2.1 Linien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_002.htm#mj033deb2589e5c716a36d13aec9e67031" class="navnav">20.2.2 Rechtecke</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_002.htm#mjf45337ebd521b61f5b3491dc05f1540f" class="navnav">20.2.3 Ovale und Kreisbögen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_002.htm#mj9a2a1ec184eed3ff77b69aa6cd7557e1" class="navnav">20.2.4 Polygone und Polylines</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_003.htm#mjdf3e66c04aa595687745bcfd0bd68276" class="navnav">20.3 Zeichenketten schreiben und Fonts</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_003.htm#mj7b1f73176737f58ab6d30a3e29f9e652" class="navnav">20.3.1 Zeichenfolgen schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_003.htm#mj8d62457ab2e3bf9f532507320e9fef0c" class="navnav">20.3.2 Die Font-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_003.htm#mj71653b2ace9bbdae4ca92e3ea28dde77" class="navnav">20.3.3 Einen neuen Font aus einem gegebenen Font ableiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_003.htm#mj759dcba307b5389773a7c91fa283b86d" class="navnav">20.3.4 Zeichensätze des Systems ermitteln *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_003.htm#mjdae768bb3fa8f15a823b8ba67776a0e2" class="navnav">20.3.5 Neue TrueType-Fonts in Java nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_003.htm#mj109c2be8526524ac3a9664b28499ac10" class="navnav">20.3.6 Font-Metadaten durch FontMetrics *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_004.htm#mj8f56d039c43274ff5216ba94cef550b1" class="navnav">20.4 Geometrische Objekte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj1b17eb5ffccc2a086d1f58a41301eca8" class="navnav">20.4.1 Die Schnittstelle Shape</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj39007fefcea7a6972382f3b9d3145ff5" class="navnav">20.4.2 Kreisförmiges</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj7dc308fc56ca053379e4626b302062a1" class="navnav">20.4.3 Kurviges *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj5fdf6c9575c830555ab08b93f47ff019" class="navnav">20.4.4 Area und die konstruktive Flächengeometrie *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj232d157f4cbc07a99523a83bcb6dd096" class="navnav">20.4.5 Pfade *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj77f1da5cccbf02d6af4fb72f9864d9da" class="navnav">20.4.6 Punkt in einer Form, Schnitt von Linien, Abstand Punkt/Linie *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_005.htm#mj39cebc7db18c5020b9bc97ef0af55c70" class="navnav">20.5 Das Innere und Äußere einer Form</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mj66dee545b61b16bbcc8b726e662c09d4" class="navnav">20.5.1 Farben und die Paint-Schnittstelle</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mjf976cd2fc969884fad90dab47f853d61" class="navnav">20.5.2 Farben mit der Klasse »Color«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mj2a52836e0690ebe20831790d3766b062" class="navnav">20.5.3 Die Farben des Systems über SystemColor *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mj099a779c1ebce4eb51bc794f4e5bd2ed" class="navnav">20.5.4 Composite und Xor *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mj40e338e3b80e6ab79fbc5447fae0300a" class="navnav">20.5.5 Dicke und Art der Linien von Formen bestimmen über »Stroke« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj4c12381d5bacf8fb6ee31448d26890bb" class="navh">20.6 Bilder</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj173615a4c416ec276851213a24dd4be2" class="navh">20.6.1 Eine Übersicht über die Bilder-Bibliotheken</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjba60f99ac6f4a3cd9177b59abea0c6ba" class="navh">20.6.2 Bilder mit »ImageIO« lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj7fe19a5b7fd9823e5ff4f8729749225b" class="navh">20.6.3 Ein Bild zeichnen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj3d7ff912a37f3af72eca322fea16dcbe" class="navh">20.6.4 Programm-Icon/Fenster-Icon setzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjaebdd1a3040bd8901b1bd49df5495a5a" class="navh">20.6.5 Splash-Screen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjd84fb329d6d62f3c77b26c3445372c24" class="navh">20.6.6 Bilder im Speicher erzeugen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjdd8fc80751b1bc88bfa58847b9fae351" class="navh">20.6.7 Pixel für Pixel auslesen und schreiben *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj133115d4eac3734a7b62458792f9142b" class="navh">20.6.8 Bilder skalieren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj23f219adf8635dfd786fc80edaa2070e" class="navh">20.6.9 Schreiben mit ImageIO</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjcaff18d32bfd6c2bb1d2e0d486fe9197" class="navh">20.6.10 Asynchrones Laden mit getImage() und dem MediaTracker *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_007.htm#mj18a6025debf68eba85c78d9de97f7e75" class="navnav">20.7 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mj4c12381d5bacf8fb6ee31448d26890bb" name="mj4c12381d5bacf8fb6ee31448d26890bb"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">20.6</span> Bilder  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Bilder sind neben dem Text das wichtigste visuelle Gestaltungsmittel. In Java können Grafiken an verschiedenen Stellen eingebunden werden. So zum Beispiel als Grafiken in Zeichengebieten (Canvas) oder als Icons in Schaltflächen, die angeklickt werden und ihre Form ändern. Über Java können GIF-, PNG- und JPEG-Bilder geladen werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Das GIF-Format (Graphics Interchange Format) ist ein komprimierendes Verfahren, das 1987 von CompuServe-Betreibern zum Austausch von Bildern entwickelt wurde. GIF-Bilder können bis zu 1.600 × 1.600 Punkte umfassen. Die Komprimierung nach einem veränderten LZW-Packverfahren [Benannt nach den Erfindern Lempel, Ziv und Welch.] hat keinen Einfluss auf die Bildqualität (sie ist verlustfrei). Jedes GIF-Bild kann aus maximal 256 Farben bestehen &#8211; bei einer Palette aus 16,7 Millionen Farben. Entsprechend dem Standard von 1989 können mehrere GIF-Bilder in einer Datei gespeichert werden. JPEG-Bilder sind dagegen in der Regel verlustbehaftet, und das Komprimierverfahren speichert die Bilder mit einer 24-Bit-Farbpalette. Der Komprimierungsfaktor kann prozentual eingestellt werden.</p>
</td>
</tr>
</table><br><p>Jede Grafik wird als Exemplar der Klasse <span class="clisting">Image</span> erzeugt, wobei einige Lademethoden auch Exemplare der Unterklasse <span class="clisting">BufferedImage</span> liefern.</p>
<div class="bildbox">
<p><a name="IDAUQKV"></a><a onClick="OpenWin('bilder/imageuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinimageuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><a id="mj173615a4c416ec276851213a24dd4be2" name="mj173615a4c416ec276851213a24dd4be2"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">20.6.1</span> Eine Übersicht über die Bilder-Bibliotheken  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Java-API bietet &#8211; historisch gewachsen &#8211; mehrere Möglichkeiten zum Laden und für einige Formate auch zum Speichern von Bildern an. Zudem gibt es Zusatzbibliotheken für Spezialformate und besondere Anforderungen, wie etwa die Verwaltung sehr großer Grafiken:</p>
<ul class="gp">
<li>Die Methode <span class="clisting">getImage()</span> der Klassen <span class="clisting">Toolkit</span> (bei Applikationen) und <span class="clisting">Applet</span> (bei Applets) liefert ein <span class="clisting">Image</span>-Objekt.</li>
</ul>
<ul class="gp">
<li>Der Media-Tracker lädt Bilder und informiert über den Ladevorgang.</li>
</ul>
<ul class="gp">
<li>Die Klasse <span class="clisting">ImageIcon</span> lädt für Swing Bilder, die sich direkt auf der grafischen Oberfläche auf Komponenten wie Schaltflächen platzieren lassen. Sie nutzt im Hintergrund den Media-Tracker.</li>
</ul>
<ul class="gp">
<li>Seit Java 1.4 gibt es das Paket <span class="clisting">javax.imageio</span>, um das Lesen und Schreiben von Grafiken zu vereinheitlichen. Die Klasse <span class="clisting">ImageIO</span> bietet eine einfache statische Methode <span class="clisting">read()</span>.</li>
</ul>
<ul class="gp">
<li>Das Paket <span class="clisting">com.sun.image.codec.jpeg</span> beherbergt seit Java 1.2 Typen zum Lesen und Schreiben von JPEGs. Der Paketname zeigt an, dass es nicht ganz offiziell ist und damit nicht jeder Java-Implementierung bekannt sein muss.</li>
</ul>
<ul class="gp">
<li>Über die externe Java-Bibliothek <span class="ckursiv">JAI</span> <span class="ckursiv">(Java Advanced Imaging API)</span> kommen Formate wie TIFF und WBMP dazu. Informationen gibt die Seite <span class="ckursiv">http://java.sun.com/products/java-media/jai/iio.html</span>.</li>
</ul>
<ul class="gp">
<li><span class="ckursiv">JIMI</span> (<span class="ckursiv">Java Image Management Interface</span>) ist eine hundertprozentige Java-Klassenbibliothek, die hauptsächlich Lade- und Speicherroutinen für Bilder zur Verfügung stellt. Die Klasse <span class="clisting">JimiUtils</span> stellt beispielsweise eine statische <span class="clisting">getThumbnail()</span>-Methode bereit, die zu einer Datei ein Vorschaubild als <span class="clisting">Image</span>-Objekt berechnet. Ebenso stellt JIMI Möglichkeiten zur Anzeige bereit, um etwa sehr große Grafiken speichersparend zu verwalten. Diese Technik nennt sich Smart-Scrolling und kann von der JimiCanvas-Komponente übernommen werden. So wird nur jener Bildteil im Speicher gehalten, der gerade sichtbar ist. Für die Speicherverwaltung bietet JIMI ein eigenes Speicherverwaltungssystem, das <span class="ckursiv">VMM</span> (<span class="ckursiv">Virtual Memory Management</span>), ebenso wie eine eigene Image-Klasse, die schnelleren Zugriff auf die Pixelwerte erlaubt. Zusätzlich bietet JIMI eine Reihe von Filtern für Rotation und Helligkeitsanpassung, die auf JIMI- und AWT-Bildern arbeiten. Auch Farbreduktion ist ein Teil von JIMI. JIMI-Bilder lassen sich im Gegensatz zu den bekannten AWT-Bildern serialisieren.</li>
</ul>
<p>Für exotische Formate &#8211; etwa das Windows Icon-Format &#8211; hilft nur eine Suche im Web. Im Fall der ICO-Dateien hilft die freie Bibliothek <span class="ckursiv">AC.lib ICO</span> unter <span class="ckursiv">http://www.acproductions.de/commercial/aclibico/</span>.</p><a id="mjba60f99ac6f4a3cd9177b59abea0c6ba" name="mjba60f99ac6f4a3cd9177b59abea0c6ba"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">20.6.2</span> Bilder mit »ImageIO« lesen  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p><span class="clisting">ImageIO</span> ist sehr einfach zu nutzen, denn mit einer kleinen statischen Methode <span class="clisting">ImageIO .read()</span> ist die Grafik geladen. Unterstützte Dateiformate sind sicher GIF, JPEG und PNG; weitere Formate können von Plattform zu Plattform unterschiedlich sein (eine präzisere Liste der angemeldeten Leser liefert <span class="clisting">ImageIO.getReaderFormatNames()</span> und <span class="clisting">ImageIO.getReaderMIMETypes()</span>).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class javax.imageio.<span class="cfett">ImageIO</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static BufferedImage read( File input ) throws IOException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static BufferedImage read( InputStream input ) throws IOException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static BufferedImage read( URL input ) throws IOException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">static BufferedImage read( ImageInputStream input ) throws IOException</span>
Lädt ein Bild und liefert ein <span class="clisting">BufferedImage</span> oder <span class="clisting">null</span>, wenn kein Decoder das Bild lesen konnte.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Lesen eines Bildes aus einer Datei, Netzwerkdatenquelle und URL:</p>
<div class="listing"><pre class="prettyprint">BufferedImage a = ImageIO.read( new File( "girlfriend1001.png" ) );
BufferedImage b = ImageIO.read( socket.getInputStream() );
BufferedImage c = ImageIO.read( new URL("http://www.tutego.com/images/<img src="common/umbruch.gif" border="0" alt="Umbruch">
email.gif") );</pre></div>
</td>
</tr>
</table><br><p>Die Bilder können auf unterschiedliche Art weiterverarbeitet werden. Sie lassen sich über <span class="clisting">drawImage()</span> anzeigen und auch als Grafiken in Swing weiterverarbeiten. Zwar fordert Swing sie als <span class="clisting">ImageIcon</span> an, doch die Klasse ist so gütig, einen Konstruktor anzubieten, der ein <span class="clisting">Image</span>-Objekt akzeptiert.</p>
<div class="bildbox">
<p><a name="IDARVKV"></a><a onClick="OpenWin('bilder/imageiouml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinimageiouml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<h4 class="t4">Bilder in Applets und alten Java-Versionen *</h4>
<p>Ab der Version Java 1.4 steht die Klasse <span class="clisting">ImageIO</span> zur Verfügung. Für Programme vor Java 1.4 muss die <span class="clisting">getImage()</span>-Methode vom <span class="clisting">Toolkit</span> oder im Fall von Applets die Methode <span class="clisting">getImage()</span> von <span class="clisting">Applet</span> verwendet werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.applet.<span class="cfett">Applet</span>
extends Panel</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Image getImage( URL url )</span>
Lädt ein durch die URL angegebenes Bild.</li>
</ul>
<p>Müssen wir in einem Applet die Grafik relativ zu einem Bezugspunkt angeben, der jedoch fehlt, so hilft uns die Methode <span class="clisting">getCodeBase()</span> weiter, die uns die relative Adresse des Applets übergibt (mit <span class="clisting">getDocumentBase()</span> bekommen wir die URL des HTML-Dokuments, unter der das Applet eingebunden ist).</p>
<p>Genau genommen lädt <span class="clisting">getImage()</span> das Bild nicht sofort, anders als <span class="clisting">read()</span> von <span class="clisting">ImageIO</span>. Ein <span class="clisting">Image</span>-Objekt wird gültig erzeugt und das Objekt mit der Grafik in Verbindung gebracht, aber es wird erst dann aus der Datei beziehungsweise dem Netz geladen, wenn der erste Zeichenaufruf stattfindet. Somit schützt uns die Bibliothek vor unvorhersehbaren Ladevorgängen für Bilder, die später oder gar nicht genutzt werden.</p><a id="mj7fe19a5b7fd9823e5ff4f8729749225b" name="mj7fe19a5b7fd9823e5ff4f8729749225b"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">20.6.3</span> Ein Bild zeichnen  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine Grafik zeichnet die Methode <span class="clisting">drawImage()</span> der <span class="clisting">Graphics</span>-Klasse. Die Methode ist mit unterschiedlichen Varianten überladen, um die Grafik auch in anderen Größen zu zeichnen &#8211; was sie skaliert &#8211; oder auch nur Teile zu zeichnen. Der einfachste Aufruf, der die Grafik in ihrer Originalgröße ab der Position oben links mit der Position (0,0) setzt, ist:</p>
<div class="listing"><pre class="prettyprint">Image image = ...
g.drawImage( image, 0, 0, this );</pre></div>
<p>Die <span class="clisting">drawImage()</span>-Methoden sind mehrheitlich in der Oberklasse <span class="clisting">Graphics</span>, doch zwei zusätzliche Methoden deklariert die <span class="clisting">Graphics</span>-Unterkasse <span class="clisting">Graphics2D</span>. Auf die Modifizierer <span class="clisting">abstract</span> und die Rückgabe <span class="clisting">boolean</span> verzichtet die erste Aufzählung der Kürze halber.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">Graphics</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">drawImage( Image img, int x, int y, ImageObserver observer )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">drawImage( Image img, int x, int y, Color bgcolor, ImageObserver observer )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">drawImage( Image img, int x, int y, int width, int height, ImageObserver observer )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">drawImage( Image img, int x, int y, int width, int height, Color bgcolor,</span>
             <span class="clisting">ImageObserver observer )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">drawImage( Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1,</span>
             <span class="clisting">int sx2, int sy2, ImageObserver observer )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">drawImage( Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1,</span>
             <span class="clisting">int sx2, int sy2, Color bgcolor, ImageObserver observer )</span></li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">Graphics2D</span>
extends Graphics</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean drawImage( Image img, AffineTransform xform, ImageObserver obs )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">void drawImage( BufferedImage img, BufferedImageOp op, int x, int y )</span></li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>In den Methoden fällt ein besonderer Beobachter, der <span class="clisting">ImageObserver</span>, auf. Der Grund für seinen Einsatz ist die Tatsache, dass Java bei den über das <span class="clisting">Toolkit</span> angesprochenen Grafiken das Laden so weit hinauszögert, bis eine Darstellung die Pixel-Daten wirklich erforderlich macht. Damit aber nach (oder während) des Ladens die Darstellung erfolgen kann, informiert der Lader die Interessenten über den Ladezustand. Nutzen wir <span class="clisting">drawImage()</span> in einer Unterklasse von <span class="clisting">Component</span> &#8211; sie implementiert <span class="clisting">ImageObserver</span> &#8211;, ist das Argument für den <span class="clisting">ImageObserver</span> oft <span class="clisting">this</span>, andernfalls <span class="clisting">null</span>, wenn eine Ladeüberwachung nicht nötig ist.</p>
</td>
</tr>
</table><br><h4 class="t4">Bildbetrachter</h4>
<p>Das folgende Programmlisting zeigt eine einfache Applikation mit einer Menüleiste, die über einen Dateiauswahldialog eine Grafik lädt und anzeigt. Wir beginnen mit der ersten Klasse, die eine Swing-Komponente darstellt, die das Bild zeichnet:</p>
<p class="tabunter"><strong>Listing 20.16    </strong>com/tutego/insel/ui/image/ImageViewer.java, ImageComponent</p>
<div class="listing"><pre class="prettyprint">class ImageComponent extends JComponent
{
  private static final long serialVersionUID = 8055865896136562197L;

  private BufferedImage image;

  public void setImage( BufferedImage image )
  {
    this.image = image;
    setPreferredSize( new Dimension(image.getWidth(), image.getHeight()) );
    repaint();
    invalidate();
  }

  @Override
  protected void paintComponent( Graphics g )
  {
   <span class="cfett"> if ( image != null )</span>
     <span class="cfett"> g.drawImage( image, 0, 0, this );</span>
  }
}</pre></div>
<p>Da ein Dateiauswahl-Dialog gewünscht ist, der aufgrund einer Menüauswahl die Datei lädt, folgt eine Implementierung einer Swing-Aktion:</p>
<p class="tabunter"><strong>Listing 20.17    </strong>com/tutego/insel/ui/image/ImageViewer.java, FileOpenAction</p>
<div class="listing"><pre class="prettyprint">class FileOpenAction extends AbstractAction
{
  private final ImageComponent viewComponent;

  public FileOpenAction( ImageComponent viewComponent )
  {
    this.viewComponent = viewComponent;

    putValue( NAME,            "Öffnen" );
    putValue( ACCELERATOR_KEY, KeyStroke.getKeyStroke( KeyEvent.VK_O, <img src="common/umbruch.gif" border="0" alt="Umbruch">
                                          InputEvent.CTRL_DOWN_MASK ) );
    putValue( MNEMONIC_KEY,    (int) 'f' );
  }

  public void actionPerformed( ActionEvent e )
  {
    JFileChooser fileDialog = new JFileChooser();
    fileDialog.setFileFilter( new FileNameExtensionFilter("*.jpg;*.gif", <img src="common/umbruch.gif" border="0" alt="Umbruch">
      "jpg", "gif") );
    fileDialog.showOpenDialog( viewComponent );
    final File file = fileDialog.getSelectedFile();

    if ( file != null )
    {
      new SwingWorker&lt;BufferedImage, Void&gt;() {
        @Override protected BufferedImage doInBackground() throws IOException {
          return ImageIO.read( file );
        }
        @Override protected void done() {
          try { viewComponent.setImage( get() ); } catch ( Exception e ) { }
        }
      }.execute();
    }
  }
}</pre></div>
<p>Der Dialog zur Dateiauswahl ist so über einen <span class="clisting">FileFilter</span> eingestellt, dass er nur Verzeichnisse und Dateien anzeigt, die auf ».jpg« oder ».gif« enden. Hat der Benutzer eine gültige Grafik ausgewählt, wird <span class="clisting">setImage()</span> unserer <span class="clisting">ImageComponent</span> angewiesen, das Bild zu laden und anzuzeigen.</p>
<p>Den letzten Teil bildet das Hauptprogramm. Es erzeugt die Bild-Komponente und das Menü, setzt den Listener und zeigt das Fenster an:</p>
<p class="tabunter"><strong>Listing 20.18    </strong>com/tutego/insel/ui/image/ImageViewer.java, ImageViewer</p>
<div class="listing"><pre class="prettyprint">public class ImageViewer
{
  public static void main( String[] args )
  {
    JFrame f = new JFrame( "Bildbetrachter" );

    ImageComponent imageComponent = new ImageComponent();
    f.add( new JScrollPane(imageComponent) );
    JMenuBar menuBar = new JMenuBar();
    JMenu menu = new JMenu( "Datei" );
    menu.setMnemonic( 'D' );
    menu.add( new JMenuItem( new FileOpenAction(imageComponent) ) );
    menuBar.add( menu );
    f.setJMenuBar( menuBar );

    f.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
    f.setSize( 600, 400 );
    f.setVisible( true );
  }
}</pre></div>
<div class="bildbox">
<p><a name="IDAQ5KV"></a><a onClick="OpenWin('bilder/imagecomponent.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinimagecomponent.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 20.13    </strong>Ein einfacher Bildbetrachter mit Dateiauswahldialog</p><a id="mj3d7ff912a37f3af72eca322fea16dcbe" name="mj3d7ff912a37f3af72eca322fea16dcbe"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">20.6.4</span> Programm-Icon/Fenster-Icon setzen  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Zumindest unter Windows ist jedem Fenster ein kleines Bildchen zugeordnet, das ganz links in der Titelzeile untergebracht ist. Das Programm-Icon lässt sich in Java durch die <span class="clisting">setIconImage()</span>-Methode setzen. Der Methode wird ein <span class="clisting">Image</span>-Objekt übergeben, das die Grafik der Größe 16 × 16 Pixel beinhaltet; andere Größen werden skaliert, was nicht immer so toll aussieht:</p>
<p class="tabunter"><strong>Listing 20.19    </strong>com/tutego/insel/ui/image/FramesIconImage, main()</p>
<div class="listing"><pre class="prettyprint">JFrame f = new JFrame();
try
{
  Image img = ImageIO.read( FramesIconImage.class.getResource( "discovery.gif" ) );
 <span class="cfett"> f.setIconImage( img );</span>
}
catch ( IOException e ) { e.printStackTrace(); }
f.setVisible( true );</pre></div>
<p>Mit <span class="clisting">getResource()</span> bezieht <span class="clisting">read()</span> die Datei aus dem Klassenpfad und kann so auch in einem Java-Archiv eingebettet sein.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.awt.<span class="cfett">Frame</span>
extends Window
implements MenuContainer</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">void setIconImage( Image image )</span>
Ordnet dem Fenster eine kleine Grafik zu. Nicht alle grafischen Oberflächen erlauben diese Zuordnung.</li>
</ul><a id="mjaebdd1a3040bd8901b1bd49df5495a5a" name="mjaebdd1a3040bd8901b1bd49df5495a5a"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">20.6.5</span> Splash-Screen *  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ein <span class="ckursiv">Splash-Screen</span> ist ein Willkommens-Bildschirm mit Grafik, der noch vor dem eigentlichen Programmstart über die JVM erscheint und dem Benutzer Informationen über Version und Autor übermittelt. Java kann in zwei Varianten einen Startschirm mit einer beliebigen Grafik &#8211; nennen wir sie beispielsweise <span class="ckursiv">splash.png</span> &#8211; anzeigen:</p>
<ul class="gp">
<li>über den Schalter <span class="ckursiv">-splash</span> beim Start der JVM; etwa <span class="ckursiv">java -splash:splash.png Main</span></li>
</ul>
<ul class="gp">
<li>mit einem Eintrag <span class="clisting">Splashscreen-Image: splash.png</span> in der Manifest-Datei</li>
</ul>
<p>Öffnet unser Java-Programm das erste Fenster, schließt sich der Splash-Screen automatisch. Dennoch gibt es Möglichkeiten, auf den Splash-Screen aus dem Java-Programm zuzugreifen:</p>
<div class="listing"><pre class="prettyprint">SplashScreen splash = SplashScreen.getSplashScreen();
Graphics2D g2 = splash.createGraphics();
// Zeichenoperationen
splash.update();</pre></div>
<p>Die Methode <span class="clisting">close()</span> schließt manuell den Splash-Screen und wartet nicht auf das erste eigene Fenster, was den Splash-Screen automatisch schließt.</p><a id="mjd84fb329d6d62f3c77b26c3445372c24" name="mjd84fb329d6d62f3c77b26c3445372c24"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">20.6.6</span> Bilder im Speicher erzeugen *  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Nicht immer kommen die Bilder vom Datensystem oder aus dem Internet. Mit der Java-Bibliothek lassen sich einfach auch eigene (<span class="clisting">Buffered</span>)<span class="clisting">Image</span>-Objekte anlegen. Dazu bieten sich &#8211; wieder historisch bedingt &#8211; verschiedene Varianten an:</p>
<ul class="gp">
<li>Jede AWT-Komponente, wie <span class="clisting">Frame</span> oder <span class="clisting">Panel</span>, bietet die Methode <span class="clisting">createImage()</span>. Die Anweisung <span class="clisting">Image image = panel.createImage(800, 600);</span> erzeugt ein <span class="clisting">Image</span>-Objekt mit 800 Pixeln in der Breite und 600 in der Höhe, das mit <span class="clisting">getGraphics()</span> Zugriff auf den Grafikkontext bietet. Wenn die AWT-Komponente noch nicht angezeigt wurde, liefert <span class="clisting">createImage()</span> die Rückgabe <span class="clisting">null</span>, sodass hier leicht eine <span class="clisting">NullPointerException</span> entstehen kann. Auch unterstützen die Bilder keine Transparenz.</li>
</ul>
<ul class="gp">
<li>Aus den Einschränkungen heraus führte Java 1.2 die Klasse <span class="clisting">BufferedImage</span> ein, die eine Erweiterung der <span class="clisting">Image</span>-Klasse ist. Beim Erzeugen ist immer ein Bildtyp anzugeben, der über die physikalische Speicherung bestimmt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">createCompatibleImage()</span> über <span class="clisting">GraphicsConfiguration</span> erzeugt ein <span class="clisting">BufferedImage</span> und benötigt keinen Bildtyp.</li>
</ul>
<h4 class="t4">BufferedImage erzeugen lassen</h4>
<p>Ein Bild über <span class="clisting">createCompatibleImage()</span> zu erzeugen, hat den großen Vorteil, dass das Daten- und Farbmodell optimal gewählt ist. Der einzige Nachteil dieser Methode ist die große Menge an benötigten Hilfsobjekten &#8211; was zusätzliche Schreibarbeit bedeutet:</p>
<p class="tabunter"><strong>Listing 20.20    </strong>com/tutego/insel/ui/image/CreateCompatibleImageDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">GraphicsConfiguration gfxConf = GraphicsEnvironment.getLocalGraphicsEnvironment().
    getDefaultScreenDevice().getDefaultConfiguration();
int width = 600, height = 400;
BufferedImage image = gfxConf.createCompatibleImage( width, height );</pre></div>
<p>Von <span class="clisting">createCompatibleImage()</span> gibt es auch eine Variante, die die Angabe einer Transparenz ermöglicht.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">GraphicsConfiguration</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">abstract BufferedImage createCompatibleImage( int width, int height )</span>
Erzeugt ein <span class="clisting">BufferedImage</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedImage createCompatibleImage( int width, int height, int transparency )</span>
Erzeugt ein <span class="clisting">BufferedImage</span> mit optionaler Transparenz. Das Argument für <span class="clisting">transparency</span> kann sein: <span class="clisting">Transparency.OPAQUE</span> (keine Transparenz, der Alpha-Wert ist 1,0), <span class="clisting">Transparency.BITMASK</span> (Bilddaten sind komplett sichtbar, also opak mit Alpha-Wert 1, oder transparent, also Alpha-Wert 0), <span class="clisting">Transparency.TRANSLUCENT</span> (Grafik erlaubt das Durchscheinen mit Alpha-Werten von 0,0 bis 1,0).</li>
</ul>
<h4 class="t4">Das Bild bemalen</h4>
<p><span class="clisting">Image</span>-Objekte (<span class="clisting">BufferedImage</span> ist eine Unterklasse) geben über <span class="clisting">getGraphics()</span> das <span class="clisting">Graphics</span>-Objekt zurück, mit dem sich das Bild bemalen lässt. Im Fall eines speziellen <span class="clisting">BufferedImage</span>-Objekts ist es jedoch üblich, die Methode <span class="clisting">createGraphics</span><span class="clisting">()</span> einzusetzen, da sie ein <span class="clisting">Graphics2D</span>-Objekt &#8211; eine Unterklasse von <span class="clisting">Graphics</span> &#8211; liefert, mit dem weitere Zeichenoperationen möglich sind. Außerdem ruft <span class="clisting">getGraphics()</span> sowieso <span class="clisting">createGraphics()</span> auf …</p>
<div class="listing"><pre class="prettyprint">Graphics2D g = img.createGraphics();
g.setColor( Color.WHITE );
g.fillRect( 0, 0, b &#8211; 1, h &#8211; 1 );</pre></div>
<p>Alternativ kann zum Löschen des Hintergrunds auch <span class="clisting">g.setBackground(Color.WHITE); g.clearRect(Argumente);</span> verwendet werden.</p>
<h4 class="t4">BufferedImage von Hand erzeugen</h4>
<p>Der Konstruktor der Klasse <span class="clisting">BufferedImage</span> wird mit den Maßen parametrisiert und zusätzlich mit einem Speichermodell für die Bildinformationen. Das ermöglicht die Verwendung von beliebigen Farb- und Speichermodellen:</p>
<div class="listing"><pre class="prettyprint">int h = 400,
    b = 600;
BufferedImage img = new BufferedImage( b, h, BufferedImage.TYPE_INT_RGB );</pre></div>
<p>Das notwendige dritte Argument kennzeichnet den Speichertyp; hier sind die Farben durch je 8 Bit Rot, Grün und Blau abgebildet. Um weitere zwei der über 10 Bildtypen zu nennen: <span class="clisting">TYPE_USHORT_GRAY</span> (Graubilder) oder <span class="clisting">TYPE_INT_ARGB</span> (RGB mit jeweils 8 Bit sowie Alpha).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.awt.image.<span class="cfett">BufferedImage</span>
extends Image
implements RenderedImage, Transparency, WritableRenderedImage</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">BufferedImage( int width, int height, int imageType )</span>
Liefert ein neues Hintergrundbild mit den gegebenen Maßen.</li>
</ul><a id="mjdd8fc80751b1bc88bfa58847b9fae351" name="mjdd8fc80751b1bc88bfa58847b9fae351"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">20.6.7</span> Pixel für Pixel auslesen und schreiben *  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klasse <span class="clisting">BufferedImage</span> &#8211; aber nicht die Basisklasse <span class="clisting">Image</span> &#8211; ermöglicht mit <span class="clisting">getRGB()</span> das Auslesen einzelner Farbwerte und mit <span class="clisting">setRGB()</span> das Setzen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Lies die Farbwerte eines <span class="clisting">BufferedImage</span>-Objekts <span class="clisting">image</span>, und zerlege die Rückgabe in die Farbwerte Rot, Grün, Blau und den Alpha-Wert:</p>
<div class="listing"><pre class="prettyprint">int argb  = image.getRGB( x, y );
int alpha = (argb &gt;&gt; 24) &amp; 0xff;
int red   = (argb &gt;&gt; 16) &amp; 0xff;
int green = (argb &gt;&gt; 8)  &amp; 0xff;
int blue  = (argb)       &amp; 0xff;</pre></div>
</td>
</tr>
</table><br><p>Die Methode <span class="clisting">getRGB()</span> liefert als Rückgabe einen Wert im Standard-RGB-Modell <span class="clisting">BufferedImage.TYPE_INT_ARGB</span> &#8211; unabhängig von der tatsächlichen physikalischen Kodierung &#8211; und im Standard-RGB-Farbraum. Die Farbwerte sind daher an ihren wohldefinierten Plätzen. Eine Hilfsmethode zum Extrahieren bietet die <span class="clisting">Color</span>-Klasse, doch muss für diese Zwecke zuerst ein Objekt aufgebaut werden, was nicht so optimal ist. Das folgende Listing zeigt ein Beispiel.</p>
<p>Eine zweite überladene Methode <span class="clisting">getRGB()</span> kopiert aus einem Bildausschnitt alle Pixel in ein Feld.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Kopiere alle Farbwerte eines <span class="clisting">BufferedImage</span> in ein Feld:</p>
<div class="listing"><pre class="prettyprint">int w = image.getWidth(), h = image.getHeight();
int[] argbArray = new int[ w * h ];
image.getRGB( 0 /* startX */, 0 /* startY */,
              w,  h, argbArray,
              0 /* offset */, w /* scansize */ );</pre></div>
<p class="BStandard">Der Offset bestimmt die Verschiebung im Feld und <span class="clisting">scansize</span> die Zeilenbreite. Damit liefert <span class="clisting">argbArray[offset + (y-startY)*scansize + (x-startX)]</span> das Pixel im Feld.</p>
</td>
</tr>
</table><br><p>Wünschen wir lediglich ein Teilbild als <span class="clisting">BufferedImage</span>, führt uns <span class="clisting">getSubimage(int x, int y, int w, int h)</span> zum Ziel.</p>
<p>Zum Überschreiben der Pixel bietet die Klasse <span class="clisting">BufferedImage</span> symmetrische <span class="clisting">setRGB()</span>-Methoden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gib dem Pixel an der Stelle <span class="clisting">x</span>, <span class="clisting">y</span> die Farbe von <span class="clisting">Color.LIGHT_GRAY</span>:</p>
<div class="listing"><pre class="prettyprint">int argb = Color.LIGHT_GRAY.getRGB();
image.setRGB( x, y, argb );</pre></div>
</td>
</tr>
</table><br><h4 class="t4">Ein Beispiel zum Lesen und Schreiben von Pixeln</h4>
<p>Das folgende Programm lädt über <span class="clisting">ImageIO</span> ein Bild und gibt die Farbinformationen &#8211; also die Anteile Rot, Grün, Blau &#8211; beim Bewegen der Maus über das Bild auf der Konsole aus. Die Ereignisbehandlung übernimmt ein <span class="clisting">MouseMotionListener</span>. Nach der Ausgabe bitten wir die <span class="clisting">Color</span>-Klasse um einen dunkleren Farbton, und <span class="clisting">setRGB()</span> überschreibt den vorherigen Farbwert für das Pixel:</p>
<p class="tabunter"><strong>Listing 20.21    </strong>com/tutego/insel/ui/image/ImageGrabber.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">@Override public void mouseMoved( MouseEvent e )
{
 <span class="cfett"> int pixel = image.getRGB( e.getX(), e.getY() );
</span>
  int red   = (pixel &gt;&gt; 16) &amp; 0xFF,
      green = (pixel &gt;&gt; 8) &amp; 0xFF,
      blue  = (pixel) &amp; 0xFF;

  System.out.println( "R=" + red + " G=" + green + " B=" + blue );<span class="cfett">

  image.setRGB( e.getX(), e.getY(), new Color(pixel).darker().getRGB() );</span>
  repaint();
}</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.awt.image.<span class="cfett">BufferedImage</span>
extends Image
implements WritableRenderedImage, Transparency</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">int getRGB( int x, int y )</span>
Liefert den Farbwert vom Punkt <span class="clisting">x</span>, <span class="clisting">y</span> im Format <span class="clisting">TYPE_INT_ARGB</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int[] getRGB( int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize )</span>
Liefert die Farbinformationen eines Bildausschnitts.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void setRGB( int x, int y, int rgb )</span>
Setzt den Farbwert an der Stelle <span class="clisting">x</span>, <span class="clisting">y</span> auf <span class="clisting">rgb</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void setRGB( int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize )</span>
Setzt die Farbwerte mehrerer Pixel.</li>
</ul><a id="mj133115d4eac3734a7b62458792f9142b" name="mj133115d4eac3734a7b62458792f9142b"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">20.6.8</span> Bilder skalieren *  <a href="#t2t310"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Methode <span class="clisting">getScaledInstance()</span> der Klasse <span class="clisting">Image</span> gibt ein neues <span class="clisting">Image</span>-Objekt mit größeren oder kleineren Maßen zurück. Das neue Bild wird wieder nur dann berechnet, wenn es auch benötigt wird &#8211; das Verhalten ist also ebenso asynchron wie bei der gesamten Bildverwaltung über die <span class="clisting">Image</span>-Klasse. Beim Vergrößern oder Verkleinern kommt es zu Pixelfehlern, und das Vergrößern der Pixel beeinflusst das Endergebnis und die Geschwindigkeit. Stellen wir uns vor, ein Bild der Größe 100 × 100 Pixel soll um das Doppelte vergrößert werden. Das Resultat ist ein Bild mit 200 × 200 Pixeln, doch muss aus einem Bildpunkt nun die Information für drei weitere Punkte abgeleitet werden. Eine Lösung bestünde darin, die Farbwerte der Punkte einfach zu duplizieren, dann bleibt die Schärfe, aber das Bild wirkt wie aus groben Blöcken zusammengesetzt. Eine andere Möglichkeit wäre, die Farbinformationen für die neuen Punkte aus den Informationen der Nachbarpunkte zu errechnen. Das Bild wirkt glatter, aber auch unschärfer bei hoher Skalierung. Und ebenso wie beim Vergrößern der Bilder sollten auch beim Verkleinern die Bildinformationen nicht einfach wegfallen, sondern, wenn möglich, zu neuen Farbwerten zusammengefasst werden. So erwarten wir von einem Algorithmus, dass dieser bei einer Schrumpfung von drei Farbwerten zu einem Farbwert die drei Informationen zu einem neuen Wert zusammenlegt.</p>
<p>Damit diese Anforderungen erfüllt werden können, verlangt <span class="clisting">getScaledInstance()</span> nicht nur die neue Breite und Höhe, sondern auch eine Konstante für die Art der Skalierung. Der Parameter bestimmt den Algorithmus &#8211; mögliche Konstanten sind <span class="clisting">SCALE_DEFAULT</span>, <span class="clisting">SCALE_FAST</span>, <span class="clisting">SCALE_SMOOTH</span>, <span class="clisting">SCALE_REPLICATE</span> und <span class="clisting">SCALE_AREA_AVERAGING</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 20.3    </strong>Argumente für »getScaledImage()«</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Skalierungsparameter</span>
</td>
<td class="tabellenkopf"><span class="cfett">Bedeutung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">SCALE_DEFAULT</span></p>
</td>
<td class="tabellentext">
<p>Verwendet einen Standard-Skalierungsalgorithmus.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">SCALE_FAST</span></p>
</td>
<td class="tabellentext">
<p>Verwendet einen Skalierungsalgorithmus, der mehr Wert auf Geschwindigkeit als auf die Glätte des Bilds legt.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">SCALE_SMOOTH</span></p>
</td>
<td class="tabellentext">
<p>Verwendet einen Algorithmus mit guter Bildqualität und legt weniger Wert auf Geschwindigkeit.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">SCALE_REPLICATE</span></p>
</td>
<td class="tabellentext">
<p>Benutzt für den Skalierungsalgorithmus den <span class="clisting">ReplicateScaleFilter</span>.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">SCALE_AREA_AVERAGING</span></p>
</td>
<td class="tabellentext">
<p>Verwendet den <span class="clisting">AreaAveragingScaleFilter</span>.</p>
</td>
</tr>
</table><br><p>Mit Hilfe dieser Konstanten lässt sich die Methode aufrufen:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">Image</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Image getScaledInstance( int width, int height, int hints )</span>
Liefert ein skaliertes Bild mit den neuen Maßen <span class="clisting">width</span> und <span class="clisting">height</span>. Das neue Bild kann asynchron gefördert werden. <span class="clisting">hints</span> gibt den Skalierungsalgorithmus als Konstante an. Ist die Höhe oder Breite negativ, so berechnet sich der Wert aus dem anderen, um das Seitenverhältnis beizubehalten.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Eine Grafik soll geladen, und zwei skalierte neue <span class="clisting">Image</span>-Exemplare sollen abgeleitet werden. Die erste Skalierung soll das Original um einen Prozentwert verändern, und die zweite Skalierung soll &#8211; unabhängig von der korrekten Wiedergabe der Seitenverhältnisse &#8211; das Bild auf die Größe des Bildschirms bringen. Wir wollen es mit <span class="clisting">Image.SCALE_SMOOTH</span> skaliert haben:</p>
<div class="listing"><pre class="prettyprint">Image image = ImageIO.read( "ottosHaus.jpg" );
int   percent = 175;
Image scaled1 = <span class="cfett">image.getScaledInstance(</span>
  (image.getWidth() * percent) / 100,
  (image.getHeight() * percent) / 100,
  <span class="cfett">Image.SCALE_SMOOTH );</span>
Image scaled2 = image.getScaledInstance(
  Toolkit.getDefaultToolkit().getScreenSize().width,
  Toolkit.getDefaultToolkit().getScreenSize().height,
  <span class="cfett">Image.SCALE_SMOOTH );</span></pre></div>
</td>
</tr>
</table><br><h4 class="t4">Hinter den Kulissen</h4>
<p>Was auf den ersten Blick wie die Wahl zwischen unglaublich vielen Varianten aussieht, entpuppt sich als typische Informatiker-Lösung: entweder schnell und schmutzig oder schön und gemächlich. Aber so ist nun mal das Leben. Der Quelltext macht dies deutlich:</p>
<div class="listing"><pre class="prettyprint">public Image getScaledInstance(int width, int height, int hints)
{
  ImageFilter filter;
  if ((hints &amp; (SCALE_SMOOTH | SCALE_AREA_AVERAGING)) != 0)
    filter = new AreaAveragingScaleFilter(width, height);
  else
    filter = new ReplicateScaleFilter(width, height);
  ImageProducer prod;
  prod = new FilteredImageSource(getSource(), filter);
  return Toolkit.getDefaultToolkit().createImage(prod);
}</pre></div>
<p>Bei der Wahl zwischen sanftem Bild und schnellem Algorithmus greift <span class="clisting">getScaledInstance()</span> auf die beiden Filterklassen <span class="clisting">AreaAveragingScaleFilter</span> und <span class="clisting">ReplicateScaleFilter</span> zurück. Sie berechnen jeweils das neue Bild über einen Bildproduzenten. <span class="clisting">ReplicateScaleFilter</span> ist der einfachere von beiden. Bei der Vergrößerung werden die Pixel einer Zeile oder Spalte einfach verdoppelt. Wird verkleinert, so werden einfach Reihen oder Spalten weggelassen. Mit einem <span class="clisting">AreaAveragingScaleFilter</span> bekommen wir die besseren Resultate, da Pixel nicht einfach kopiert werden, sondern weil wir eingefügte Pixel aus einer Mittelwertberechnung erhalten. Der Algorithmus heißt im Englischen auch <span class="ckursiv">nearest neighbor algorithm</span>.</p><a id="mj23f219adf8635dfd786fc80edaa2070e" name="mj23f219adf8635dfd786fc80edaa2070e"></a><a name="t39"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t310"></a><h3 class="t3"><span class="cfett">20.6.9</span> Schreiben mit ImageIO  <a href="#t2t311"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t39"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p><span class="clisting">ImageIO</span> ist eine Utility-Klasse mit statischen Methoden zum Lesen und Schreiben von Grafiken und zum Raussuchen eines passenden Bildlesers/-schreibers.</p>
<p>So wie die statische Methode <span class="clisting">ImageIO.read()</span> eine Grafik liest, schreibt <span class="clisting">ImageIO.write()</span> sie zum Beispiel im PNG- oder JPG-Format. Voraussetzung ist eine Grafik, die als <span class="clisting">RenderedImage</span> vorliegt. Die Schnittstelle wird beispielsweise von <span class="clisting">BufferedImage</span> implementiert, der wichtigsten Klasse für Bildinformationen. Gilt es, die Grafik abzuspeichern, wird die Methode <span class="clisting">ImageIO.write()</span> mit einem Verweis auf das <span class="clisting">RenderedImage</span> sowie das Datenformat und ein <span class="clisting">File</span>-Objekt aufgerufen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Speichere als PNG-Datei ein Bild mit den Maßen 100 × 100 und einem gefüllten Kreis:</p>
<p class="tabunter"><strong>Listing 20.22    </strong>com/tutego/insel/ui/image/SaveImage.java, main()</p>
<div class="listing"><pre class="prettyprint">GraphicsConfiguration gfxConf = GraphicsEnvironment
    .getLocalGraphicsEnvironment().getDefaultScreenDevice()
    .getDefaultConfiguration();
BufferedImage image = gfxConf.createCompatibleImage( 100, 100 );
image.createGraphics().fillOval( 0, 0, 100, 100 );<span class="cfett">
ImageIO.write( image, "png", new File( "c:/circle.png" ) );</span></pre></div>
</td>
</tr>
</table><br><h4 class="t4">Kann »ImageIO« ein Format behandeln? *</h4>
<p><span class="clisting">ImageIO</span> erlaubt standardmäßig das Speichern in JPG und PNG und &#8211; seit Java 6 &#8211; GIF. [Für ältere Java-Versionen bieten sich die Klassen <span class="clisting">GIFEncoder</span> von Adam Doppelt an (http://www.gurge.com/amd/old/java/GIFEncoder/index.html) oder <span class="clisting">GifEncoder</span> von Jef Poskanzer (http://www.acme.com/java/software/Acme.JPM.Encoders.GifEncoder.html).
]  Eine Liste der unterstützten Formate liefert <span class="clisting">ImageIO.getWriterFormatNames()</span> beziehungsweise <span class="clisting">Image-IO.getWriterMIMETypes()</span>:</p>
<div class="listing"><pre class="prettyprint">String[] types = ImageIO.getWriterMIMETypes();
System.out.println( Arrays.toString(types) );</pre></div>
<p>Die Ausgabe ist unter der kommenden Version Java 7:</p>
<div class="listing"><pre class="prettyprint">[image/jpeg, image/png, image/x-png, image/vnd.wap.wbmp, image/gif, image/bmp]</pre></div>
<p>Ob <span class="clisting">ImageIO</span> ein Bild mit einem bestimmten Grafikformat lesen kann, bestimmt im Grunde die statische Methode <span class="clisting">ImageIO.getImageReadersByFormatName()</span> &#8211; sie liefert eine Liste von <span class="clisting">ImageReader</span>-Objekten, die das Format übernähmen. Da die Liste über einen <span class="clisting">Iterator</span> gegeben ist, lässt sich die Frage, ob <span class="clisting">ImageIO</span> ein bestimmtes Format lesen kann, über das Ergebnis von <span class="clisting">ImageIO.getImageReadersByFormatName().hasNext()</span> beantworten.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Soll für eine Endung die Möglichkeit des Lesens erfragt werden, liefert eine eigene Methode <span class="clisting">canReadExtension()</span> die Antwort &#8211; wieder über einen <span class="clisting">Iterator</span>:</p>
<div class="listing"><pre class="prettyprint">public static boolean canReadExtension( String ext )
{
  return ImageIO.getImageReadersBySuffix(ext).iter.hasNext();
}</pre></div>
</td>
</tr>
</table><br><p><span class="clisting">ImageIO.getImageReadersByMIMEType()</span> liefert einen <span class="clisting">Iterator</span> der MIME-Typen für Grafik-Leser.</p>
<p>Die Anfragemöglichkeit gibt es natürlich nicht nur für die Leser, sondern äquivalent auch für die Schreiber. Hier erfüllen die statischen Methoden <span class="clisting">getImageWritersByFormatName()</span>, <span class="clisting">getImageWritersBySuffix()</span> und <span class="clisting">getImageWritersByMIMEType()</span> ihren Zweck.</p>
<p>Die Anfragetypen richten sich bisher nach den Dateiendungen oder MIME-Typen. Diese Aussagen erfordern aber Unterstützung vom Dateisystem oder vom Server. Was ist, wenn eine Grafik über das Netzwerk übertragen wird, die Typinformationen aber fehlen? Dann helfen statische Methoden wie <span class="clisting">getImageReadersBySuffix()</span> nicht, sondern eine inhaltliche Analyse muss her. Hilfreich ist die Methode <span class="clisting">ImageIO.reateImageInputStream()</span>, die drei Datengeber analysieren kann: <span class="clisting">File</span>-Objekte, lesbare <span class="clisting">RandomAccessFile</span>-Objekte und <span class="clisting">InputStream</span>-Objekte. Weil die Entwickler nun aber nicht drei unterschiedliche statische Methoden mit unterschiedlichen Parametern für <span class="clisting">createImageInputStream()</span> vorsehen wollten, nahmen sie die Oberklasse &#8211; nämlich <span class="clisting">Object</span>:</p>
<div class="listing"><pre class="prettyprint">ImageInputStream iis = ImageIO.createImageInputStream( o );</pre></div>
<p>Die Rückgabe ist ein <span class="clisting">ImageInputStream</span>, der, obwohl er <span class="clisting">InputStream</span> im Namen trägt, kein Eingabestrom im klassischen Sinne ist. <span class="clisting">ImageInputStream</span> erlaubt einen Datenzugriff mit wahlfreier Positionierung, und <span class="clisting">createImageInputStream()</span> ist eine Methode, die den <span class="clisting">ImageInputStream</span> für eine Datenquelle liefert. Für Benutzer ist <span class="clisting">ImageInputStream</span> aber immer noch nicht gedacht; Benutzer arbeiten mit <span class="clisting">ImageReader</span>-Objekten. Ein passendes <span class="clisting">ImageReader</span>-Objekt für die Bytes liefert <span class="clisting">getImageReaders()</span>:</p>
<div class="listing"><pre class="prettyprint">Iterator = ImageIO.getImageReaders( iis );</pre></div>
<p>Der Iterator liefert alle <span class="clisting">ImageReader</span>, die das Datenformat für den Binärstrom verarbeiten können. Uns reicht der erste:</p>
<div class="listing"><pre class="prettyprint">if ( iter.hasNext() )
  ImageReader reader = (ImageReader) iter.next();
else
  // Kein Reader, der das Format versteht.</pre></div>
<h4 class="t4">Komprimieren mit »ImageIO« *</h4>
<p>Die statischen Methoden <span class="clisting">ImageIO.write()</span> und <span class="clisting">ImageIO.read()</span> sind nur Hilfsmethoden, die im Hintergrund einen passenden <span class="clisting">ImageWriter</span> und <span class="clisting">ImageReader</span> suchen und ihm die Arbeit überlassen. Während der Kontakt zum tatsächlichen <span class="clisting">ImageReader</span> eher selten ist, gibt es einen guten Grund, sich mit dem schreibenden <span class="clisting">ImageWriter</span> näher zu beschäftigen &#8211; ihm können über ein <span class="clisting">ImageWriteParam</span>-Objekt zusätzliche Parameter übertragen werden, etwa der Kompressionsgrad, der sich zwischen 0 und 1 bewegt. JPEG-Bilder sind im Gegensatz zu GIF-Bildern mit Verlust komprimiert, doch lassen sich diese Verluste klein halten. Über eine diskrete Kosinustransformation werden 8 × 8 große Pixelblöcke vereinfacht. Die Komprimierung nutzt die Unfähigkeit des Auges aus, Farbunterschiede so stark wahrzunehmen wie Helligkeitsunterschiede. So können Punkte mit einer ähnlichen Helligkeit, doch einer anderen Farbe zu einem Wert werden. Bei einer hohen Kompression treten so genannte Artefakte auf, die unschön wirken. Bei einer sehr hohen Kompression ist die Bildgröße sehr klein (und die Bilder hässlich). Der Qualitätsfaktor ist vom Typ <span class="clisting">float</span> und bewegt sich zwischen 0,0 und 1,0. Der Wert 1 bedeutet im Prinzip keine Kompression und somit höchste Qualität. Ein Wert um 0,75 ist ein hoher Wert für Qualitätsbilder, der Wert 0,5 liefert Bilder mittlerer Qualität, und 0,25 sorgt für stärkere Artefakte und hohe Kompression.</p>
<p>Ein Programm, das ein Bild im JPG-Format in eine Datei schreibt, muss zunächst einen <span class="clisting">Image-Writer</span> erfragen und anschließend den <span class="clisting">ImageOutputStream</span> aufbauen, um die Daten schreiben zu können. Nach dem Aufbau der Parameter über ein gefülltes <span class="clisting">ImageWriteParam</span>-Objekt lässt sich das Bild speichern. Zwar verfügt <span class="clisting">ImageWriter</span> über eine Methode <span class="clisting">write(RenderedImage)</span>, um zum Beispiel ein <span class="clisting">BufferedImage</span> zu schreiben, doch im Fall der Parameter muss das Bild als <span class="clisting">IIOImage</span> vorliegen. <span class="clisting">IIOImage</span> versammelt die Bildinformationen (<span class="clisting">RenderedImage</span> oder <span class="clisting">Raster</span>), zusammen mit Vorschaubild und Metadaten.</p>
<h4 class="t4">Bilder in verschiedenen Kompressionsstufen speichern *</h4>
<p>Wir wollen nun ein Programm entwickeln, das einen Screenshot nimmt und ihn in den Qualitätsstufen 1,0 bis 0,0 in 0,25er-Schritten komprimiert und das Ergebnis auf dem Bildschirm ausgibt:</p>
<p class="tabunter"><strong>Listing 20.23    </strong>com/tutego/insel/ui/image/ImageWriterDemo.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.ui.image;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Locale;
import javax.imageio.*;
import javax.imageio.plugins.jpeg.JPEGImageWriteParam;
import javax.imageio.stream.ImageOutputStream;

class ImageWriterDemo
{
  public static void main( String[] args ) throws Exception
  {
    BufferedImage img = new Robot().createScreenCapture(
          new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()) );

    int size = 0;

    for ( float quality = 1f; quality &gt;= 0; quality -= 0.25 )
    {
      ByteArrayOutputStream out = new ByteArrayOutputStream( 0xfff );

      writeImage( img, out, quality );

      if ( size == 0 ) size = out.size();

      System.out.printf( "Qualität: %.1f &#8211; Größe: %,.0f k &#8211; Verhältnis: %.2f%n",<img src="common/umbruch.gif" border="0" alt="Umbruch">
                         quality, (double) out.size() / 1024, <img src="common/umbruch.gif" border="0" alt="Umbruch">
                         (double) out.size() / size );
    }
  }

  private static void writeImage( BufferedImage img,
                                  ByteArrayOutputStream out,
                                  float quality ) throws IOException
  {
    ImageWriter writer = ImageIO.getImageWritersByFormatName( "jpg" ).next();
    ImageOutputStream ios = ImageIO.createImageOutputStream( out );
    writer.setOutput( ios );
    ImageWriteParam iwparam = new JPEGImageWriteParam( Locale.getDefault() );
    iwparam.setCompressionMode( ImageWriteParam.MODE_EXPLICIT ) ;
    iwparam.setCompressionQuality( quality );
    writer.write( null, new IIOImage(img, null, null), iwparam );
    ios.flush();
    writer.dispose();
    ios.close();
  }
}</pre></div>
<p>Die Ausgabe des Programms für ein Bild ist in etwa die folgende:</p>
<div class="listing"><pre class="prettyprint">Qualität: 1,0 &#8211; Größe: 1.005 k &#8211; Verhältnis: 1,00
Qualität: 0,8 &#8211; Größe: 339 k &#8211; Verhältnis: 0,34
Qualität: 0,5 &#8211; Größe: 253 k &#8211; Verhältnis: 0,25
Qualität: 0,3 &#8211; Größe: 182 k &#8211; Verhältnis: 0,18
Qualität: 0,0 &#8211; Größe: 77 k &#8211; Verhältnis: 0,08</pre></div>
<p>Da der Bildschirminhalt durch die Konsolenausgabe immer etwas anders aussieht, werden natürlich auch die Dateigrößen immer anders aussehen.</p><a id="mjcaff18d32bfd6c2bb1d2e0d486fe9197" name="mjcaff18d32bfd6c2bb1d2e0d486fe9197"></a><a name="t310"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t311"></a><h3 class="t3"><span class="cfett">20.6.10</span> Asynchrones Laden mit getImage() und dem MediaTracker *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t310"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Das Laden von Bildern mittels <span class="clisting">getImage()</span> der Klasse <span class="clisting">Toolkit</span> oder <span class="clisting">Applet</span> wird dann vom System angeregt, wenn das Bild zum ersten Mal benötigt wird. Diese Technik ist zwar recht nett und entzerrt den Netzwerktransfer, eignet sich aber nicht für bestimmte grafische Einsätze. Nehmen wir zum Beispiel eine Animation: Wir können nicht erwarten, die Animation erst dann im vollen Ablauf zu sehen, wenn wir nacheinander alle Bilder im Aufbauprozess gesehen haben. Daher ist zu wünschen, dass zunächst alle Bilder geladen werden können, bevor sie angezeigt werden. Die Klasse <span class="clisting">MediaTracker</span> ist eine Hilfsklasse, mit der wir den Ladeprozess von Media-Objekten &#8211; bisher sind es nur Bilder &#8211; beobachten können. Um den Überwachungsprozess zu starten, werden die Media-Objekte dem <span class="clisting">MediaTracker</span> zur Beobachtung übergeben. Neben diesem besitzt die Klasse gegenüber der herkömmlichen Methode noch weitere Vorteile:</p>
<ul class="gp">
<li>Bilder lassen sich in Gruppen organisieren.</li>
</ul>
<ul class="gp">
<li>Bilder können synchron oder asynchron geladen werden.</li>
</ul>
<ul class="gp">
<li>Die Bildergruppen können unabhängig geladen werden.</li>
</ul>
<h4 class="t4">Bilder dem Cache entnehmen</h4>
<p>Eine Webcam erzeugt kontinuierlich neue Bilder. Sollen diese in einem Applet präsentiert werden, so ergibt sich das Problem, dass ein erneuter Aufruf von <span class="clisting">getImage()</span> lediglich das alte Bild liefert. Dies liegt an der Verwaltung der <span class="clisting">Image</span>-Objekte, da sie in einem Cache gehalten werden. Für sie gibt es keinen GC, der die Entscheidung fällt: »Das Bild ist alt.« Hier hilft die Methode <span class="clisting">flush()</span> der <span class="clisting">Image</span>-Klasse weiter. Sie löscht das Bild aus der internen Liste. Eine erneute Aufforderung zum Laden bringt also das gewünschte Ergebnis.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">Image</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">abstract void flush()</span>
Gibt die für das Image belegten Ressourcen frei.</li>
</ul>
<div class="bildbox">
<p><a name="IDA1AMV"></a><a onClick="OpenWin('bilder/365_java_14_007.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_14_007.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span><span class="clisting">Image</span>-Objekte werden nicht automatisch freigegeben. <span class="clisting">flush()</span> entsorgt diese Bilder, macht den Speicher frei und den Rechner wieder schneller.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="20.6 Bilder"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_20_005.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_20_007.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
