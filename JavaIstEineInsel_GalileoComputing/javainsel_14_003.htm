<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 14.3 Thread-Eigenschaften und -Zustände</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 14.3 Thread-Eigenschaften und -Zustände">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 14.3 Thread-Eigenschaften und -Zustände">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_14_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_14_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58" class="navnav">14 Threads und nebenläufige Programmierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_14_001.htm#mjbc08c9ba7fdf2e6f67fc98569de436d7" class="navnav">14.1 Nebenläufigkeit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_001.htm#mj43de7374f351a9fba442f8d3b0f02d3e" class="navnav">14.1.1 Threads und Prozesse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_001.htm#mja9c21f6c79bc59a950217decf528edb6" class="navnav">14.1.2 Wie parallele Programme die Geschwindigkeit steigern können</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_001.htm#mj5562a2faec24834d623c76125dc07ce4" class="navnav">14.1.3 Was Java für Nebenläufigkeit alles bietet</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_14_002.htm#mj45ef6b526108a654e748170e45b47506" class="navnav">14.2 Threads erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_002.htm#mjd345a92a4debb2b6c1b71c9da5491844" class="navnav">14.2.1 Threads über die Schnittstelle Runnable implementieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_002.htm#mj0165190038369a99536f97f8344a85aa" class="navnav">14.2.2 Thread mit Runnable starten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_002.htm#mj8e1e70be702a313131e53009a9232b14" class="navnav">14.2.3 Die Klasse Thread erweitern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjd0f19999270d6e1fbfd4af3a16273eef" class="navh">14.3 Thread-Eigenschaften und -Zustände</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj3a1cfb56f9c6901e615807d90a0beec7" class="navh">14.3.1 Der Name eines Threads</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj35593f9059cd12233d0f6ecc9d1eabbc" class="navh">14.3.2 Wer bin ich?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj06ce248fe2000330b7f17e9b7547230b" class="navh">14.3.3 Die Zustände eines Threads *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj00ef8d8369b2f161f338e0395d2d3375" class="navh">14.3.4 Schläfer gesucht</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc55c89ec9366f4b8fdd423c85d3794c1" class="navh">14.3.5 Mit »yield()« auf Rechenzeit verzichten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj2fe030afd882ac6fb143b967926afdfa" class="navh">14.3.6 Der Thread als Dämon</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj164ad9b22305873b9aa42eea993c3092" class="navh">14.3.7 Das Ende eines Threads</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj4193c6da30b5a3e9d41c167ec04d571f" class="navh">14.3.8 Einen Thread höflich mit Interrupt beenden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj33fd0981eb8001536afe69cd515aa912" class="navh">14.3.9 »UncaughtExceptionHandler« für unbehandelte Ausnahmen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjaa35fb508fd076484f1fe6f102542192" class="navh">14.3.10 Der »stop()« von außen und die Rettung mit ThreadDeath *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj4d4380c02798d72c9129099992a3f7c1" class="navh">14.3.11 Ein Rendezvous mit »join()« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj0fba9714c2dc96c5fdda5b22e6123a91" class="navh">14.3.12 Arbeit niederlegen und wieder aufnehmen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb80d2e0bed313429e1cc31b6b5533932" class="navh">14.3.13 Priorität *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_14_004.htm#mj2f866e14a50f07accd817e14e068e022" class="navnav">14.4 Der Ausführer (Executor) kommt</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_004.htm#mjfdf7295f7b164c526b7e2bcc93c82c77" class="navnav">14.4.1 Die Schnittstelle »Executor«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_004.htm#mje4f944bb971775c1015afd48aaa0f8fd" class="navnav">14.4.2 Die Thread-Pools</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_004.htm#mj1b2390839194e0171bbe333adf513efb" class="navnav">14.4.3 Threads mit Rückgabe über Callable</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_004.htm#mj216a6d7dc56854a7c2ace2af15ea7538" class="navnav">14.4.4 Mehrere Callable abarbeiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_004.htm#mj040a06e4da6875dc988daed0e6698a0e" class="navnav">14.4.5 Mit ScheduledExecutorService wiederholende Ausgaben und Zeitsteuerungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_14_005.htm#mjdd7f4718142f506c26dd21b125c3eeb9" class="navnav">14.5 Synchronisation über kritische Abschnitte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj0b86165a201ae570714e286c068b2481" class="navnav">14.5.1 Gemeinsam genutzte Daten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mjfffb7cafaea36a3ca8312390e06292da" class="navnav">14.5.2 Probleme beim gemeinsamen Zugriff und kritische Abschnitte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mjc042126cea52cb31673bce1b51e7da34" class="navnav">14.5.3 Punkte parallel initialisieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj93dd1d204a3132119782b90b9d2a8b91" class="navnav">14.5.4 »i++« sieht atomar aus, ist es aber nicht *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj9311fe1d3b8eab7542264c02d389dd2f" class="navnav">14.5.5 Kritische Abschnitte schützen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj56cc8d74bdebad1074cc9c5a8010bf9b" class="navnav">14.5.6 Schützen mit ReentrantLock</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj1bb85cdbf7de3e53c2f4909006721fe5" class="navnav">14.5.7 Synchronisieren mit »synchronized«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mjcd4b04f6e98c720091cfe986e6ffbbcd" class="navnav">14.5.8 Synchronized-Methoden der Klasse »StringBuffer« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj06c1e7e183ad53dff9ca9f5f31845549" class="navnav">14.5.9 Mit synchronized synchronisierte Blöcke</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj7dbd0ab9bb5f9d276c324109e3fca0e5" class="navnav">14.5.10 Dann machen wir doch gleich alles synchronisiert!</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj7f86c2fcc6f66725145007cbca98aa8f" class="navnav">14.5.11 Lock-Freigabe im Fall von Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj835189eac360de56887ed92c5c4ecde5" class="navnav">14.5.12 Deadlocks</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mjac6b857b6e9b19e0ddd6f7047deb1927" class="navnav">14.5.13 Mit »synchronized« nachträglich synchronisieren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mjef386e0ad0e4f81d20c24fc7013063a6" class="navnav">14.5.14 Monitore sind reentrant &#8211; gut für die Geschwindigkeit *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_005.htm#mj971b2acd022777011b0152eaa4837a24" class="navnav">14.5.15 Synchronisierte Methodenaufrufe zusammenfassen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_14_006.htm#mj9bf9f420b34b6f02276dafd31a8fd050" class="navnav">14.6 Synchronisation über Warten und Benachrichtigen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_006.htm#mje2b58ede047a8963da930acab3fa6052" class="navnav">14.6.1 Die Schnittstelle »Condition«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_006.htm#mjc38ef5b969bd2691779c81805b6c2a7c" class="navnav">14.6.2 It&#8217;s Disco-Time *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_006.htm#mj0ba218bd2eaf4ea985fe997b1df29eff" class="navnav">14.6.3 Warten mit »wait()« und Aufwecken mit »notify()« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_006.htm#mj136bf82444e4726887b78ff7e2940dcb" class="navnav">14.6.4 Falls der Lock fehlt: IllegalMonitorStateException *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_14_007.htm#mj4145d5f8cf91e93d1d41e573c3d11ccc" class="navnav">14.7 Zeitgesteuerte Abläufe</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_007.htm#mjb1126ef61ae8b4987d341b8b5ca908bb" class="navnav">14.7.1 Die Klassen »Timer« und »TimerTask«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_14_007.htm#mjf6968022d786735ff347cc7539d4a5cc" class="navnav">14.7.2 Job-Scheduler Quartz</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_14_008.htm#mjd6f266fe3a93d82ea877896fff494d12" class="navnav">14.8 Einen Abbruch der virtuellen Maschine erkennen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_14_009.htm#mj97bf64dc1952296836c473e63db84371" class="navnav">14.9 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjd0f19999270d6e1fbfd4af3a16273eef" name="mjd0f19999270d6e1fbfd4af3a16273eef"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">14.3</span> Thread-Eigenschaften und -Zustände  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2><a id="mj3a1cfb56f9c6901e615807d90a0beec7" name="mj3a1cfb56f9c6901e615807d90a0beec7"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">14.3.1</span> Der Name eines Threads  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ein Thread hat eine ganze Menge Eigenschaften &#8211; wie einen Zustand, eine Priorität und auch einen Namen. Dieser kann mit <span class="clisting">setName()</span> gesetzt und mit <span class="clisting">getName()</span> erfragt werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Thread( Runnable target, String name )</span>
Erzeugt ein neues Thread-Objekt mit einem <span class="clisting">Runnable</span> und setzt den Namen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">final String getName()</span>
Liefert den Namen des Threads. Der Name wird im Konstruktor angegeben oder mit <span class="clisting">setName()</span> zugewiesen. Standardmäßig ist der Name »Thread-x«, wobei x eine eindeutige Nummer ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">final void setName( String name )</span>
Ändert den Namen des Threads.</li>
</ul><a id="mj35593f9059cd12233d0f6ecc9d1eabbc" name="mj35593f9059cd12233d0f6ecc9d1eabbc"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">14.3.2</span> Wer bin ich?  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine Erweiterung der Klasse <span class="clisting">Thread</span> hat den Vorteil, dass geerbte Methoden wie <span class="clisting">getName()</span> sofort genutzt werden können. Wenn wir <span class="clisting">Runnable</span> implementieren, genießen wir diesen Vorteil nicht.</p>
<p>Die Klasse <span class="clisting">Thread</span> liefert mit der statischen Methode <span class="clisting">currentThread()</span> die Objektreferenz für das <span class="clisting">Thread</span>-Exemplar, das diese Anweisung gerade ausführt. Auf diese Weise lassen sich nicht-statische <span class="clisting">Thread</span>-Methoden wie <span class="clisting">getName()</span> verwenden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gib die aktuelle Priorität des laufenden Threads aus:</p>
<div class="listing"><pre class="prettyprint">System.out.println( Thread.currentThread().getPriority() );   // 5</pre></div>
</td>
</tr>
</table><br><p>Falls es in einer Schleife wiederholten Zugriff auf <span class="clisting">Thread.currentThread()</span> gibt, sollte das Ergebnis zwischengespeichert werden, denn der Aufruf der nativen Methoden ist nicht ganz billig.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static Thread currentThread()</span>
Liefert den Thread, der das laufende Programmstück ausführt.</li>
</ul><a id="mj06ce248fe2000330b7f17e9b7547230b" name="mj06ce248fe2000330b7f17e9b7547230b"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">14.3.3</span> Die Zustände eines Threads *  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Bei einem Thread-Exemplar können wir einige Zustände feststellen:</p>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>1.</strong></td>
<td valign="top" width="100%" align="left"> Nicht erzeugt: Der Lebenslauf eines Thread-Objekts beginnt mit new, doch befindet er sich damit noch nicht im Zustand ausführend.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>2.</strong></td>
<td valign="top" width="100%" align="left"> Laufend (vom Scheduler berücksichtigt) und nicht laufend (vom Scheduler nicht berücksichtigt): Durch start() gelangt der Thread in den Zustand »ausführbar« beziehungsweise »laufend«. Der Zustand kann sich ändern, wenn ein anderer Thread zur Ausführung gelangt und dann dem aktuellen Thread den Prozessor entzieht. Der vormals laufende Thread kommt in den Zustand nicht laufend, bis der Scheduler ihm wieder Rechenzeit zuordnet.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>3.</strong></td>
<td valign="top" width="100%" align="left"> Wartend: Dieser Zustand wird mittels spezieller Synchronisationstechniken oder Ein-/Ausgabefunktionen erreicht &#8211; der Thread verweilt in einem Wartezustand.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>4.</strong></td>
<td valign="top" width="100%" align="left"> Beendet: Nachdem die Aktivität des Thread-Objekts beendet wurde, kann es nicht mehr aktiviert werden und ist tot, also beendet.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<h4 class="t4">Zustand über »Thread.State«</h4>
<p>In welchem Zustand ein Thread gerade ist, zeigt die Methode <span class="clisting">getState()</span>. Sie liefert ein Objekt vom Typ der Aufzählung <span class="clisting">Thread.State</span> (die einzige im Paket <span class="clisting">java.lang</span>), die deklariert:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 14.2    </strong>Zustände eines Threads</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Zustand</span>
</td>
<td class="tabellenkopf"><span class="cfett">Erläuterung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">NEW</span></p>
</td>
<td class="tabellentext">
<p>Neuer Thread, noch nicht gestartet.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">RUNNABLE</span></p>
</td>
<td class="tabellentext">
<p>Läuft in der JVM.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">BLOCKED</span></p>
</td>
<td class="tabellentext">
<p>Wartet auf einen <span class="clisting">MonitorLock</span>, wenn er etwa einen <span class="clisting">synchronized</span>-Block betreten möchte.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">WAITING</span></p>
</td>
<td class="tabellentext">
<p>Wartet etwa auf ein <span class="clisting">notify()</span>.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">TIMED_WAITING</span></p>
</td>
<td class="tabellentext">
<p>Wartet etwa in einem <span class="clisting">sleep()</span>.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">TERMINATED</span></p>
</td>
<td class="tabellentext">
<p>Ausführung ist beendet.</p>
</td>
</tr>
</table><br><p>Zudem lässt sich die Methode <span class="clisting">isAlive()</span> verwenden, die erfragt, ob der Thread gestartet wurde, aber noch nicht tot ist.</p><a id="mj00ef8d8369b2f161f338e0395d2d3375" name="mj00ef8d8369b2f161f338e0395d2d3375"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">14.3.4</span> Schläfer gesucht  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Manchmal ist es notwendig, einen Thread eine bestimmte Zeit lang anzuhalten. Dazu lassen sich Methoden zweier Klassen nutzen:</p>
<ul class="gp">
<li>Die überladene statische Methode <span class="clisting">Thread.sleep()</span>: Etwas erstaunlich ist sicherlich, dass sie keine Objektmethode von einem <span class="clisting">Thread</span>-Objekt ist, sondern eine statische Methode. Ein Grund wäre, dass dadurch verhindert wird, externe Threads zu beeinflussen. Es ist nicht möglich, einen fremden Thread, über dessen Referenz wir verfügen, einfach einige Sekunden lang schlafen zu legen und ihn so von der Ausführung abzuhalten.</li>
</ul>
<ul class="gp">
<li>Die Objektmethode <span class="clisting">sleep()</span> auf einem <span class="clisting">TimeUnit</span>-Objekt: Auch sie bezieht sich immer auf den ausführenden Thread. Der Vorteil gegenüber <span class="clisting">sleep()</span> ist, dass hier die Zeiteinheiten besser sichtbar sind.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Der ausführende Thread soll zwei Sekunden lang schlafen. Einmal mit <span class="clisting">Thread.sleep()</span>:</p>
<div class="listing"><pre class="prettyprint">try {
  <span class="cfett">Thread.sleep( 2000 );</span>
} catch ( InterruptedException</pre></div>
<p class="BStandard">Dann mit <span class="clisting">TimeUnit</span>:</p>
<div class="listing"><pre class="prettyprint">try
  <span class="cfett">TimeUnit.SECONDS.sleep( 2 );</span>
} catch ( InterruptedException e ) { }</pre></div>
</td>
</tr>
</table><br><p>Der Schlaf kann durch eine <span class="clisting">InterruptedException</span> unterbrochen werden, etwa durch <span class="clisting">interrupt()</span>. Die Ausnahme muss behandelt werden, da sie keine <span class="clisting">RuntimeException</span> ist.</p>
<p>Praktisch wird das Erweitern der Klasse <span class="clisting">Thread</span> bei inneren anonymen Klassen. Die folgende Anweisung gibt nach zwei Sekunden Schlafzeit eine Meldung auf dem Bildschirm aus:</p>
<p class="tabunter"><strong>Listing 14.5    </strong>com/tutego/insel/thread/SleepInInnerClass.java, main()</p>
<div class="listing"><pre class="prettyprint">new Thread() {
  @Override public void run() {
    try {
      Thread.sleep( 2000 );
      System.out.println( "Zeit ist um." );
    } catch ( InterruptedException e ) { e.printStackTrace(); }
  }
}.start();</pre></div>
<p>Da <span class="clisting">new Thread(){...}</span> ein Exemplar der anonymen Unterklasse ergibt, lässt die auf dem Ausdruck aufgerufene Objektmethode <span class="clisting">start()</span> den Thread gleich loslaufen. Aufgaben dieser Art lösen auch die Timer gut.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static void sleep( long millis ) throws InterruptedException</span>
Der aktuell ausgeführte Thread wird mindestens <span class="clisting">millis</span> Millisekunden eingeschläfert. Unterbricht ein anderer Thread den schlafenden, wird vorzeitig eine <span class="clisting">InterruptedException</span> ausgelöst.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static void sleep( long millis, int nanos ) throws InterruptedException</span>
Der aktuell ausgeführte Thread wird mindestens <span class="clisting">millis</span> Millisekunden und zusätzlich <span class="clisting">nanos</span> Nanosekunden eingeschläfert. Im Gegensatz zu <span class="clisting">sleep(long)</span> wird bei einer negativen Millisekundenanzahl eine <span class="clisting">IllegalArgumentException</span> ausgelöst; auch wird diese Exception ausgelöst, wenn die Nanosekundenanzahl nicht zwischen 0 und 999.999 liegt.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">enum java.util.concurrent.<span class="cfett">TimeUnit</span>
extends Enum&lt;TimeUnit&gt;
implements Serializable, Comparable&lt;TimeUnit&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">NANOSECONDS</span>, <span class="clisting">MICROSECONDS</span>, <span class="clisting">MILLISECONDS</span>, <span class="clisting">SECONDS</span>, <span class="clisting">MINUTES</span>, <span class="clisting">HOURS</span>, <span class="clisting">DAYS</span>
Aufzählungselemente von <span class="clisting">TimeUnit</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void sleep( long timeout ) throws InterruptedException</span>
Führt ein <span class="clisting">Thread.sleep()</span> für die Zeiteinheit aus.</li>
</ul>
<div class="bildbox">
<p><a name="IDAK30D"></a><a onClick="OpenWin('bilder/timertasktimeruml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleintimertasktimeruml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Eine überladene Methode <span class="clisting">Thread.sleep(TimeUnit, long)</span> wäre praktisch, gibt es aber nicht.</p><a id="mjc55c89ec9366f4b8fdd423c85d3794c1" name="mjc55c89ec9366f4b8fdd423c85d3794c1"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">14.3.5</span> Mit »yield()« auf Rechenzeit verzichten  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Neben <span class="clisting">sleep()</span> gibt es eine weitere Methode, um kooperative Threads zu programmieren: die Methode <span class="clisting">yield()</span>. Sie funktioniert etwas anders als <span class="clisting">sleep()</span>, da hier nicht nach Ablauf der genannten Millisekunden zum Thread zurückgekehrt wird, sondern <span class="clisting">yield()</span> den Thread bezüglich seiner Priorität wieder in die Thread-Warteschlange des Systems einordnet. Einfach ausgedrückt, sagt <span class="clisting">yield()</span> der Thread-Verwaltung: »Ich setze diese Runde aus und mache weiter, wenn ich das nächste Mal dran bin.«</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static void yield()</span>
Der laufende Thread gibt freiwillig seine Rechenzeit ab. Die Methode ist für Implementierungen der JVM nicht verbindlich.</li>
</ul><a id="mj2fe030afd882ac6fb143b967926afdfa" name="mj2fe030afd882ac6fb143b967926afdfa"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">14.3.6</span> Der Thread als Dämon  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ein Server reagiert oft in einer Endlosschleife auf eingehende Aufträge vom Netzwerk und führt die gewünschte Aufgabe aus. In unseren bisherigen Programmen haben wir oft Endlosschleifen eingesetzt, sodass ein gestarteter Thread nie beendet wird. Wenn also <span class="clisting">run()</span>, wie in den vorangehenden Beispielen, nie abbricht (Informatiker sprechen hier von <span class="ckursiv">terminiert</span>), läuft der Thread immer weiter, auch wenn die Hauptapplikation beendet ist. Dies ist nicht immer beabsichtigt, da vielleicht Server-Funktionalität nach Beenden der Applikation nicht mehr gefragt ist. Dann sollte auch der endlos laufende Thread beendet werden. Um dies auszudrücken, erhält ein im Hintergrund arbeitender Thread eine spezielle Kennung: Der Thread wird als <span class="ckursiv">Dämon</span> [Das griechische Wort &#x03B4;&#x03B1;&#x03AF;&#x03BC;&#x03C9;&#x03BD; (engl. daemon) bezeichnet allerlei Wesen zwischen Gott und Teufel.
]  gekennzeichnet. Standardmäßig ist ein aufgebauter Thread kein Dämon.</p>
<div class="bildbox">
<p><a name="IDAE50D"></a><a onClick="OpenWin('bilder/365_java_09_003.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_09_003.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Ein Dämon ist wie ein Heinzelmännchen im Hintergrund mit einer Aufgabe beschäftigt. Wenn das Hauptprogramm beendet ist und die Laufzeitumgebung erkennt, dass kein normaler Thread mehr läuft, sondern nur Dämonen, dann ist das Ende der Dämonen eingeläutet und die JVM kommt zum Ende. Denn Dämonen-Threads sind Zulieferer: Gibt es keine Klienten mehr, werden auch sie nicht mehr gebraucht. Das ist wie bei den Göttern der Scheibenwelt: Glaubt keiner an sie, hören sie auf zu existieren. Wir müssen uns also um das Ende des Dämons nicht kümmern. Gleichzeitig heißt das aber auch, dass ein Dämonen-Thread vorsichtig mit Ein-/Ausgabeoperationen sein muss, denn er kann jederzeit &#8211; auch etwa während einer Schreiboperation auf die Festplatte &#8211; abgebrochen werden, was zu korrupten Daten führen kann.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Der Garbage Collector ist ein gutes Beispiel für einen Dämon. Nur, wenn es andere Threads gibt, muss der Speicher aufgeräumt werden. Gibt es keine anderen Threads mehr, kann auch die JVM mit beendet werden, was auch die Dämonen-Threads beendet.</p>
</td>
</tr>
</table><br><h4 class="t4">Wie ein Thread in Java zum Dämon wird</h4>
<p>Einen Thread in Java als Dämon zu kennzeichnen, heißt, die Methode <span class="clisting">setDaemon()</span> mit dem Argument <span class="clisting">true</span> aufzurufen. Die Methode ist nur vor dem Starten des Threads erlaubt. Danach kann der Status nicht wieder vom Dämon in den normalen Benutzer-Thread umgesetzt werden. Die Auswirkungen von <span class="clisting">setDaemon(true)</span> können wir am folgenden Programm ablesen:</p>
<p class="tabunter"><strong>Listing 14.6    </strong>com/tutego/insel/thread/DaemonThread.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.thread;

class DaemonThread extends Thread
{
  DaemonThread()
  {
   <span class="cfett"> setDaemon( true );</span>
  }

  @Override
  public void run()
  {
    while ( true )
      System.out.println( "Lauf, Thread, lauf" );
  }

  public static void main( String[] args )
  {
    new DaemonThread().start();
  }
}</pre></div>
<p>In diesem Programm wird der Thread gestartet, und danach ist die Anwendung sofort beendet. Vor dem Ende kann der neue Thread aber schon einige Zeilen auf der Konsole ausgeben. Klammern wir die Anweisung mit <span class="clisting">setDaemon(true)</span> aus, läuft das Programm ewig, da die Laufzeitumgebung auf das natürliche Ende der Thread-Aktivität wartet.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">final void setDaemon( boolean on )</span>
Markiert den Thread als Dämon oder normalen Thread. Die Methode muss aufgerufen werden, bevor der Thread gestartet wurde, andernfalls folgt eine <span class="clisting">IllegalThreadState-Exception</span>. Mit anderen Worten: Nachträglich kann ein existierender Thread nicht mehr zu einem Dämon gemacht werden, oder ihm die Dämonenhaftigkeit genommen werden, so er sie hat.</li>
</ul>
<ul class="gp">
<li><span class="clisting">final boolean isDaemon()</span>
Testet, ob der <span class="clisting">Thread</span> ein Dämon-Thread ist.</li>
</ul>
<h4 class="t4">AWT und Dämonen *</h4>
<p>Obwohl Dämonen für Hintergrundaufgaben eine gute Einrichtung sind, ist der <span class="clisting">AWT</span>-Thread kein Dämon. Unterschiedliche <span class="clisting">AWT</span>-Threads sind normale Benutzer-Threads, dazu gehören <span class="clisting">AWT-Input</span>, <span class="clisting">AWT-Motif</span> oder <span class="clisting">Screen_Updater</span>. Dies bedeutet, dass bei einmaliger Nutzung einer <span class="clisting">AWT</span>-Methode ein spezieller Nicht-Dämon-Thread gestartet wird, sodass die Applikation nicht automatisch beendet wird, wenn das Hauptprogramm endet. Daher muss die Applikation in vielen Fällen hart mit <span class="clisting">System.exit()</span> beendet werden.</p><a id="mj164ad9b22305873b9aa42eea993c3092" name="mj164ad9b22305873b9aa42eea993c3092"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">14.3.7</span> Das Ende eines Threads  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Es gibt Threads, die dauernd laufen, weil sie zum Beispiel Serverfunktionen implementieren. Andere Threads führen einmalig eine Operation aus und sind danach beendet. Allgemein ist ein Thread beendet, wenn eine der folgenden Bedingungen zutrifft:</p>
<ul class="gp">
<li>Die <span class="clisting">run()</span>-Methode wurde ohne Fehler beendet. Wenn wir eine Endlosschleife programmieren, würde diese potenziell einen nie endenden Thread bilden.</li>
</ul>
<ul class="gp">
<li>In der <span class="clisting">run()</span>-Methode tritt eine <span class="clisting">RuntimeException</span> auf, die die Methode beendet. Das beendet weder die anderen Threads noch die JVM als Ganzes.</li>
</ul>
<ul class="gp">
<li>Der Thread wurde von außen abgebrochen. Dazu dient die prinzipbedingt problematische Methode <span class="clisting">stop()</span>, von deren Verwendung abgeraten wird und die auch veraltet ist.</li>
</ul>
<ul class="gp">
<li>Die virtuelle Maschine wird beendet und nimmt alle Threads mit ins Grab.</li>
</ul>
<h4 class="t4">Wenn der Thread einen Fehler melden soll</h4>
<p>Da ein Thread nebenläufig arbeitet, kann die <span class="clisting">run()</span>-Methode synchron schlecht Exceptions melden oder einen Rückgabewert liefern. Wer sollte auch an welcher Stelle darauf hören? Eine Lösung für das Problem ist ein Listener, der sich beim Thread anmeldet und darüber informiert wird, ob der Thread seine Arbeit machen konnte oder nicht. Eine andere Lösung gibt <span class="clisting">Callable</span>, mit dem ein spezieller Fehlercode zurückgegeben oder eine Exception angezeigt werden kann. Speziell für ungeprüfte Ausnahmen kann ein <span class="clisting">UncaughtExceptionHandler</span> weiterhelfen.</p><a id="mj4193c6da30b5a3e9d41c167ec04d571f" name="mj4193c6da30b5a3e9d41c167ec04d571f"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">14.3.8</span> Einen Thread höflich mit Interrupt beenden  <a href="#t2t310"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der Thread ist in der Regel zu Ende, wenn die <span class="clisting">run()</span>-Methode ordentlich bis zum Ende ausgeführt wurde. Enthält eine <span class="clisting">run()</span>-Methode jedoch eine Endlosschleife &#8211; wie etwa bei einem Server, der auf eingehende Anfragen wartet &#8211;, so muss der Thread von außen zur Kapitulation gezwungen werden. Die naheliegende Möglichkeit, mit der <span class="clisting">Thread</span>-Methode <span class="clisting">stop()</span> einen Thread abzuwürgen, wollen wir in Abschnitt 14.3.10, »Der stop() von außen und die Rettung mit ThreadDeath«, diskutieren.</p>
<p>Wenn wir den Thread schon nicht von außen beenden wollen, können wir ihn immerhin bitten, seine Arbeit aufzugeben. Periodisch müsste er dann nur überprüfen, ob jemand von außen den Abbruchswunsch geäußert hat.</p>
<h4 class="t4">Die Methoden »interrupt()« und »isInterrupted()«</h4>
<p>Die Methode <span class="clisting">interrupt()</span> setzt von außen in einem Thread-Objekt ein internes Flag, das dann in der <span class="clisting">run()</span>-Methode durch <span class="clisting">isInterrupted()</span> periodisch abgefragt werden kann.</p>
<p>Das folgende Programm soll jede halbe Sekunde eine Meldung auf dem Bildschirm ausgeben. Nach zwei Sekunden wird der Unterbrechungswunsch mit <span class="clisting">interrupt()</span> gemeldet. Auf dieses Signal achtet die sonst unendlich laufende Schleife und bricht ab:</p>
<p class="tabunter"><strong>Listing 14.7    </strong>com/tutego/insel/thread/ThreadusInterruptus.java, main()</p>
<div class="listing"><pre class="prettyprint">Thread t = new Thread()
{
  @Override
  public void run()
  {
    System.out.println( "Es gibt ein Leben vor dem Tod.  " );

    while (<span class="cfett"> ! isInterrupted()</span> )
    {
      System.out.println( "Und er läuft und er läuft und er läuft" );

      try
      {
       Thread.sleep( 500 );
      }
      catch ( InterruptedException e )
      {
      <span class="cfett"> interrupt();</span>
       System.out.println( "Unterbrechung in sleep()" );
      }
    }

    System.out.println( "Das Ende" );
  }
};
t.start();
Thread.sleep( 2000 );<span class="cfett">
t.interrupt();</span></pre></div>
<p>Die Ausgabe zeigt hübsch die Ablaufsequenz:</p>
<div class="listing"><pre class="prettyprint">Es gibt ein Leben vor dem Tod.
Und er läuft und er läuft und er läuft
Und er läuft und er läuft und er läuft
Und er läuft und er läuft und er läuft
Und er läuft und er läuft und er läuft
Unterbrechung in sleep()
Das Ende</pre></div>
<p>Die <span class="clisting">run()</span>-Methode im Thread ist so implementiert, dass die Schleife genau dann verlassen wird, wenn <span class="clisting">isInterrupted()</span> den Wert <span class="clisting">true</span> ergibt, also von außen die <span class="clisting">interrupt()</span>-Methode für dieses Thread-Exemplar aufgerufen wurde. Genau dies geschieht in der <span class="clisting">main()</span>-Methode. Auf den ersten Blick ist das Programm leicht verständlich, doch vermutlich erzeugt das <span class="clisting">interrupt()</span> im <span class="clisting">catch</span>-Block die Aufmerksamkeit. Stünde diese Zeile dort nicht, würde das Programm aller Wahrscheinlichkeit nach nicht funktionieren. Das Geheimnis ist folgendes: Wenn die Ausgabe nur jede halbe Sekunde stattfindet, befindet sich der Thread fast die gesamte Zeit über in der Schlafmethode <span class="clisting">sleep()</span>. Also wird vermutlich der <span class="clisting">interrupt()</span> den Thread gerade beim Schlafen stören. Genau dann wird <span class="clisting">sleep()</span> durch <span class="clisting">InterruptedException</span> unterbrochen, und der <span class="clisting">catch</span>-Behandler fängt die Ausnahme ein. Jetzt passiert aber etwas Unerwartetes: Durch die Unterbrechung wird das interne Flag zurückgesetzt, sodass <span class="clisting">isInterrupted()</span> meint, die Unterbrechung habe gar nicht stattgefunden. Daher muss <span class="clisting">interrupt()</span> erneut aufgerufen werden, da das Abbruch-Flag neu gesetzt werden muss und <span class="clisting">isInterrupted()</span> das Ende bestimmen kann.</p>
<p>Wenn wir mit der Objektmethode <span class="clisting">isInterrupted()</span> arbeiten, müssen wir beachten, dass neben <span class="clisting">sleep()</span> auch die Methoden <span class="clisting">join()</span> und <span class="clisting">wait()</span> durch die <span class="clisting">InterruptedException</span> das Flag löschen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die Methoden <span class="clisting">sleep()</span>, <span class="clisting">wait()</span> und <span class="clisting">join()</span> lösen alle eine <span class="clisting">InterruptedException</span> aus, wenn sie durch die Methode <span class="clisting">interrupt()</span> unterbrochen werden. Das heißt, <span class="clisting">interrupt()</span> beendet diese Methoden mit der Ausnahme.</p>
</td>
</tr>
</table><br><h4 class="t4">Zusammenfassung: »interrupted()«, »isInterrupted()« und »interrupt()«</h4>
<p>Die Methodennamen sind verwirrend gewählt, sodass wir die Aufgaben noch einmal zusammenfassen wollen: Die Objektmethode <span class="clisting">interrupt()</span> setzt in einem (anderen) Thread-Objekt ein Flag, dass es einen Antrag gab, den Thread zu beenden. Sie beendet aber den Thread nicht, obwohl es der Methodenname nahelegt. Dieses Flag lässt sich mit der Objektmethode <span class="clisting">isInterrupted()</span> abfragen. In der Regel wird dies innerhalb einer Schleife geschehen, die darüber bestimmt, ob die Aktivität des Threads fortgesetzt werden soll. Die statische Methode <span class="clisting">interrupted()</span> ist zwar auch eine Anfragemethode und testet das entsprechende Flag des aktuell laufenden Threads, wie <span class="clisting">Thread.currentThread().isInterrupted()</span>, aber zusätzlich löscht es den Interrupt-Status auch, was <span class="clisting">isInterrupted()</span> nicht tut. Zwei aufeinanderfolgende Aufrufe von <span class="clisting">interrupted()</span> führen daher zu einem <span class="clisting">false</span>, es sei denn, in der Zwischenzeit erfolgt eine weitere Unterbrechung.</p><a id="mj33fd0981eb8001536afe69cd515aa912" name="mj33fd0981eb8001536afe69cd515aa912"></a><a name="t39"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t310"></a><h3 class="t3"><span class="cfett">14.3.9</span> »UncaughtExceptionHandler« für unbehandelte Ausnahmen  <a href="#t2t311"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t39"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Einer der Gründe für das Ende eines Threads ist eine unbehandelte Ausnahme, etwa von einer nicht aufgefangenen <span class="clisting">RuntimeException</span>. Um in diesem Fall einen kontrollierten Abgang zu ermöglichen, lässt sich an den Thread ein <span class="clisting">UncaughtExceptionHandler</span> hängen, der immer dann benachrichtigt wird, wenn der Thread wegen einer nicht behandelten Ausnahme endet.</p>
<p><span class="clisting">UncaughtExceptionHandler</span> ist eine in <span class="clisting">Thread</span> deklarierte innere Schnittstelle, die eine Operation <span class="clisting">void uncaughtException(Thread t, Throwable e)</span> vorschreibt. Eine Implementierung der Schnittstelle lässt sich entweder einem individuellen Thread oder allen Threads anhängen, sodass im Fall des Abbruchs durch unbehandelte Ausnahmen die JVM die Methode <span class="clisting">uncaughtException()</span> aufruft. Auf diese Weise kann die Applikation im letzten Atemzug noch den Fehler loggen, den die JVM über das <span class="clisting">Throwable e</span> übergibt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">void setUncaughtExceptionHandler( Thread.UncaughtExceptionHandler eh )</span>
Setzt den <span class="clisting">UncaughtExceptionHandler</span> für den Thread.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()</span>
Liefert den aktuellen <span class="clisting">UncaughtExceptionHandler</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Static void setDefaultUncaughtExceptionHandler( Thread.UncaughtExceptionHandler eh)</span>
Setzt den <span class="clisting">UncaughtExceptionHandler</span> für alle Threads.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()</span>
Liefert den zugewiesenen <span class="clisting">UncaughtExceptionHandler</span> aller Threads.</li>
</ul>
<p>Ein mit <span class="clisting">setUncaughtExceptionHandler()</span> lokal gesetzter <span class="clisting">UncaughtExceptionHandler</span> überschreibt den Eintrag für den <span class="clisting">setDefaultUncaughtExceptionHandler()</span>. Zwischen dem mit dem Thread assoziierten Handler und dem globalen gibt es noch einen Handler-Typ für Thread-Gruppen, der jedoch seltener verwendet wird (vor Java 5 war er jedoch die einzige Möglichkeit, das Ende zu erkennen).</p><a id="mjaa35fb508fd076484f1fe6f102542192" name="mjaa35fb508fd076484f1fe6f102542192"></a><a name="t310"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t311"></a><h3 class="t3"><span class="cfett">14.3.10</span> Der »stop()« von außen und die Rettung mit ThreadDeath *  <a href="#t2t312"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t310"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wenn ein Thread nicht auf <span class="clisting">interrupt()</span> hört, aber aus irgendwelchen Gründen dringend beendet werden muss, müssen wir wohl oder übel die veraltete Methode <span class="clisting">stop()</span> einsetzen.</p>
<p><div class="eclipse"><img src="common/eclipseicon.gif" align="top" width="53" height="23" alt="Eclipse" title="Eclipse"></div>Dass die Methode <span class="clisting">stop()</span> veraltet ist, zeigen in Eclipse eine unterschlängelte Linie und ein Symbol am linken Rand an. Steht der Cursor auf der problematischen Zeile, weist eine Fehlermeldung ebenfalls auf das Problem hin.</p>
<div class="bildbox">
<p><a name="IDAVM1D"></a><a onClick="OpenWin('bilder/365_java_09_002.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_09_002.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p><span class="ckursiv">deprecated</span> gibt uns schon einen guten Hinweis darauf, <span class="clisting">stop()</span> besser nicht zu benutzen (leider gibt es hier, im Gegensatz zu den meisten anderen veralteten Methoden, keinen einfachen, empfohlenen Ersatz). Überschreiben können wir <span class="clisting">stop()</span> auch nicht, da es final ist. Wenn wir einen Thread von außen beenden, geben wir ihm keine Chance mehr, seinen Zustand konsistent zu verlassen. Zudem kann die Unterbrechung an beliebiger Stelle erfolgen, sodass angeforderte Ressourcen frei in der Luft hängen können.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">final void stop()</span>
Wurde der Thread gar nicht gestartet oder ist er bereits abgearbeitet beziehungsweise beendet, kehrt die Methode sofort zurück. Andernfalls wird über <span class="clisting">checkAccess()</span> geprüft, ob wir überhaupt das Recht haben, den Thread abzuwürgen. Dann wird der Thread beendet, egal was er zuvor unternommen hat; jetzt kann er nur noch sein Testament in Form eines <span class="clisting">ThreadDeath</span>-Objekts als Exception anzeigen.</li>
</ul>
<h4 class="t4">Das ThreadDeath-Objekt</h4>
<p>So unmöglich ist das Reagieren auf ein <span class="clisting">stop()</span> auch nicht. Immer dann, wenn ein Thread mit <span class="clisting">stop()</span> zum Ende kommen soll, löst die JVM eine <span class="clisting">ThreadDeath</span>-Ausnahme aus, die letztendlich den Thread beendet. <span class="clisting">ThreadDeath</span> ist eine Unterklasse von <span class="clisting">Error</span>, das wiederum von <span class="clisting">Throwable</span> abgeleitet ist, sodass <span class="clisting">ThreadDeath</span> mit einem <span class="clisting">try</span>-<span class="clisting">catch</span>-Block abgefangen werden kann. Die Java-Entwickler haben <span class="clisting">ThreadDeath</span> nicht zu einer Unterklasse von <span class="clisting">Exception</span> gemacht, weil sie nicht wollten, dass <span class="clisting">ThreadDeath</span> bei einer allgemeinen Exception-Behandlung über <span class="clisting">catch(Exception e)</span> abgefangen wird (dass wir die Klasse überhaupt nutzen können, ist einem Fehler von Sun zuzuschreiben; die Klasse sollte eigentlich nicht sichtbar sein).</p>
<p>Wenn wir <span class="clisting">ThreadDeath</span> auffangen, können wir noch auf den Tod reagieren und Aufräumarbeiten erlauben. Wir sollten aber nicht vergessen, anschließend das aufgefangene <span class="clisting">ThreadDeath</span>-Objekt wieder auszulösen, weil der Thread sonst nicht beendet wird:</p>
<p class="tabunter"><strong>Listing 14.8    </strong>com/tutego/insel/thread/ThreadStopRecovery.java, main()</p>
<div class="listing"><pre class="prettyprint">Thread t = new Thread()
{
  @Override public void run()
  {
    try
    {
      while ( true ) System.out.println( "I Like To Move It." );
    }
    catch ( ThreadDeath td )
    {
      System.out.println( "Das Leben ist nicht totzukriegen." );
      throw td;
    }
  }
};
t.start();
try { Thread.sleep( 1 ); } catch ( Exception e ) { }
t.stop();</pre></div>
<p><span class="clisting">ThreadDeath</span> bietet eine extravagante Möglichkeit, um das aktuell laufende Programm zu beenden: <span class="clisting">throw new ThreadDeath()</span>. Die Anweisung <span class="clisting">System.exit()</span> ist aber weniger aufsehenerregend.</p><a id="mj4d4380c02798d72c9129099992a3f7c1" name="mj4d4380c02798d72c9129099992a3f7c1"></a><a name="t311"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t312"></a><h3 class="t3"><span class="cfett">14.3.11</span> Ein Rendezvous mit »join()« *  <a href="#t2t313"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t311"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wollen wir Aufgaben auf mehrere Threads verteilen, kommt der Zeitpunkt, an dem die Ergebnisse eingesammelt werden. Die Resultate können allerdings erst dann zusammengebracht werden, wenn alle Threads mit ihrer Ausführung fertig sind. Da sie sich zu einem bestimmten Zeitpunkt treffen, heißt das auch <span class="ckursiv">Rendezvous</span>.</p>
<p>Zum Warten gibt es mehrere Strategien. Zunächst lässt sich mit <span class="clisting">Callable</span> arbeiten, um dann mit <span class="clisting">get()</span> synchron auf das Ende zu warten. Arbeiten wir mit <span class="clisting">Runnable</span>, so kann ein Thread keine direkten Ergebnisse wie eine Methode nach außen geben, weil die <span class="clisting">run()</span>-Methode den Ergebnistyp <span class="clisting">void</span> hat. Da ein nebenläufiger Thread zudem asynchron arbeitet, wissen wir nicht einmal, wann wir das Ergebnis erwarten können.</p>
<p>Die Übertragung von Werten ist kein Problem. Hier können Klassenvariablen und auch Objektvariablen helfen, denn über sie können wir kommunizieren. Jetzt fehlt nur noch, dass wir auf das Ende der Aktivität eines Threads warten können. Das funktioniert mit der Methode <span class="clisting">join()</span>.</p>
<p>In unserem folgenden Beispiel legt ein Thread <span class="clisting">t</span> in der Variable <span class="clisting">result</span> ein Ergebnis ab. Wir können die Auswirkungen von <span class="clisting">join()</span> sehen, wenn wir die auskommentierte Zeile hineinnehmen:</p>
<p class="tabunter"><strong>Listing 14.9    </strong>com/tutego/insel/thread/JoinTheThread.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.thread;

class JoinTheThread
{
  static class JoinerThread extends Thread
  {
    public int result;

    @Override public void run()
    {
      result = 1;
    }
  }

  public static void main( String[] args ) throws InterruptedException
  {
    JoinerThread t = new JoinerThread();
    t.start();
//   <span class="cfett"> t.join();</span>
    System.out.println( t.result );
  }
}</pre></div>
<p>Ohne den Aufruf von <span class="clisting">join()</span> wird als Ergebnis 0 ausgegeben, denn das Starten des Threads kostet etwas Zeit. In dieser Zeit geben wir aber die automatisch auf 0 initialisierte Klassenvariable aus. Nehmen wir <span class="clisting">join()</span> hinein, wird die <span class="clisting">run()</span>-Methode zu Ende ausgeführt, und der Thread setzt die Variable <span class="clisting">result</span> auf 1. Das sehen wir dann auf dem Bildschirm.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">final void join() throws InterruptedException</span>
Der aktuell ausgeführte Thread wartet auf den Thread, für den die Methode aufgerufen wird, bis dieser beendet ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">final void join( long millis ) throws InterruptedException</span>
Wie <span class="clisting">join()</span>, doch wartet diese Variante höchstens <span class="clisting">millis</span> Millisekunden. Wurde der Thread bis dahin nicht vollständig beendet, fährt das Programm fort. Auf diese Weise kann versucht werden, innerhalb einer bestimmten Zeitspanne auf den Thread zu warten, sonst aber weiterzumachen. Ist <span class="clisting">millis</span> gleich <span class="clisting">0</span>, so hat dies die gleiche Wirkung wie <span class="clisting">join()</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">final void join ( long millis, int nanos ) throws InterruptedException</span>
Wie <span class="clisting">join(long)</span>, jedoch mit potenziell genauerer Angabe der maximalen Wartezeit.</li>
</ul>
<p>Nach einem <span class="clisting">thread.join(long)</span> ist mitunter die <span class="clisting">thread.isAlive()</span>-Methode nützlich, denn sie sagt aus, ob <span class="clisting">thread</span> noch aktiv arbeitet oder beendet ist.</p>
<p>In <span class="clisting">TimeUnit</span> gibt mit <span class="clisting">timedJoin()</span> eine Hilfsmethode, um mit der Dauer schöner zu arbeiten.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">TimeUnit</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">void timedJoin( Thread thread, long timeout ) throws InterruptedException</span>
Berechnet aus der <span class="clisting">TimeUnit</span> und dem <span class="clisting">timeout</span> Millisekunden (<span class="clisting">ms</span>) und Nanosekunden (<span class="clisting">ns</span>) und führt ein <span class="clisting">join(ms, ns)</span> auf dem <span class="clisting">thread</span> aus.</li>
</ul>
<h4 class="t4">Warten auf den Langsamsten</h4>
<p>Große Probleme lassen sich in mehrere Teile zerlegen, und jedes Teilproblem kann dann von einem Thread gelöst werden. Dies ist insbesondere bei Mehrprozessorsystemen eine lohnenswerte Investition. Zum Schluss müssen wir nur noch darauf warten, dass die Threads zum Ende gekommen sind, und das Ergebnis einsammeln. Dazu eignet sich <span class="clisting">join()</span> gut.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zwei Threads arbeiten an einem Problem. Anschließend wird gewartet, bis beide ihre Aufgabe erledigt haben. Dann könnte etwa ein anderer Thread die von <span class="clisting">a</span> und <span class="clisting">b</span> verwendeten Ressourcen wieder nutzen:</p>
<div class="listing"><pre class="prettyprint">Thread a = new AThread();
Thread b = new BThread();
a.start();
b.start();<span class="cfett">
a.join();
b.join();</span></pre></div>
</td>
</tr>
</table><br><p>Es ist unerheblich, wessen <span class="clisting">join()</span> wir zuerst aufrufen, da wir ohnehin auf den langsamsten Thread warten müssen. Wenn ein Thread schon beendet ist, kehrt <span class="clisting">join()</span> sofort zurück.</p>
<p>Eine andere Lösung für zusammenlaufende Threads besteht darin, diese in einer Thread-Gruppe zusammenzufassen. Dann können sie zusammen behandelt werden, sodass nur das Ende der Thread-Gruppe beobachtet wird.</p><a id="mj0fba9714c2dc96c5fdda5b22e6123a91" name="mj0fba9714c2dc96c5fdda5b22e6123a91"></a><a name="t312"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t313"></a><h3 class="t3"><span class="cfett">14.3.12</span> Arbeit niederlegen und wieder aufnehmen *  <a href="#t2t314"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t312"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wollen wir erreichen, dass ein Thread für eine bestimmte Zeit die Arbeit niederlegt und ein anderer den schlafenden Thread wieder aufwecken kann, müssten wir das selbst implementieren. Zwar gibt es mit <span class="clisting">suspend()</span> und <span class="clisting">resume()</span> zwei Methoden, doch diese Start-Stopp-Technik ist nicht erwünscht, da sie ähnlich problematisch ist wie <span class="clisting">stop()</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">final void suspend()</span>
Lebt der Thread, wird er so lange eingefroren (schlafen gelegt), bis <span class="clisting">resume()</span> aufgerufen wird.</li>
</ul>
<ul class="gp">
<li><span class="clisting">final void resume()</span>
Weckt einen durch <span class="clisting">suspend()</span> lahmgelegten Thread wieder auf, der dann wieder arbeiten kann.</li>
</ul><a id="mjb80d2e0bed313429e1cc31b6b5533932" name="mjb80d2e0bed313429e1cc31b6b5533932"></a><a name="t313"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t314"></a><h3 class="t3"><span class="cfett">14.3.13</span> Priorität *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t313"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Jeder Thread verfügt über eine Priorität, die aussagt, wie viel Rechenzeit ein Thread relativ zu anderen Threads erhält. Die Priorität ist eine Zahl zwischen <span class="clisting">Thread.MIN_PRIORITY</span> (1) und <span class="clisting">Thread.MAX_PRIORITY</span> (10). Durch den Wert kann der Scheduler erkennen, welchem Thread er den Vorzug geben soll, wenn mehrere Threads auf Rechenzeit warten. Bei seiner Initialisierung bekommt jeder Thread die Priorität des erzeugenden Threads. Normalerweise ist es die Priorität <span class="clisting">Thread.NORM_PRIORITY</span> (5).</p>
<p>Das Betriebssystem (oder die JVM) nimmt die Threads immer entsprechend der Priorität aus der Warteschlange heraus (daher <span class="ckursiv">Prioritätswarteschlange</span>). Ein Thread mit der Priorität <span class="ckursiv">N</span> wird vor allen Threads mit der Wichtigkeit kleiner <span class="ckursiv">N</span>, aber hinter denen der Priorität größer gleich <span class="ckursiv">N</span> gesetzt. Ruft nun ein kooperativer Thread mit der Priorität <span class="ckursiv">N</span> die Methode <span class="clisting">yield()</span> auf, bekommt ein Thread mit der Priorität &lt;= <span class="ckursiv">N</span> auch eine Chance zur Ausführung.</p>
<p>Die Priorität kann durch Aufruf von <span class="clisting">setPriority()</span> geändert und mit <span class="clisting">getPriority()</span> abgefragt werden. Allerdings macht Java nur sehr schwache Aussagen über die Bedeutung und Auswirkung von Thread-Prioritäten.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Wir weisen dem Thread <span class="clisting">t</span> die höchste Priorität zu:</p>
<div class="listing"><pre class="prettyprint">t.setPriority( Thread.MAX_PRIORITY );</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">Thread</span>
implements Runnable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">final int getPriority()</span>
Liefert die Priorität des Threads.</li>
</ul>
<ul class="gp">
<li><span class="clisting">final void setPriority( int newPriority )</span>
Setzt die Priorität des Threads. Es ergibt eine <span class="clisting">IllegalArgumentException</span>, wenn die Priorität nicht zwischen <span class="clisting">MIN_PRIORITY</span> (1) und <span class="clisting">MAX_PRIORITY</span> (10) liegt.</li>
</ul>
<h4 class="t4">Granularität und Vorrang</h4>
<p>Die zehn Prioritätsstufen garantieren nicht zwingend unterschiedliche Ausführungen. Obwohl anzunehmen ist, dass ein Thread mit der Priorität <span class="clisting">NORM_PRIORITY+1</span> häufiger Programmcode ausführt als ein Thread mit der Priorität <span class="clisting">NORM_PRIORITY</span>, kann ein Betriebssystem dies anders implementieren. Nehmen wir an, die Plattform implementiert lediglich fünf Prioritätsstufen. Ist 1 die niedrigste Stufe und 5 die höchste &#8211; die mittlere Stufe ist 3 &#8211;, werden wahrscheinlich <span class="clisting">NORM_PRIORITY</span> und <span class="clisting">NORM_PRIORITY + 1</span> auf die Stufe 3 transformiert und haben demnach dieselbe Priorität. Was wir daraus lernen: Auch bei unterschiedlichen Prioritäten können wir nicht erwarten, dass ein bestimmtes Programmstück zwingend schneller läuft. Zudem gibt es Betriebssysteme mit Schedulern, die keine Prioritäten unterstützen oder diese unerwartet interpretieren.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="14.3 Thread-Eigenschaften und -Zustände"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_14_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_14_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
