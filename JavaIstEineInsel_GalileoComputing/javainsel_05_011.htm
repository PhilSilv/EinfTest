<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 5.11 Dynamisches Binden</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 5.11 Dynamisches Binden">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 5.11 Dynamisches Binden">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_05_010.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_05_012.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6" class="navnav">5 Eigene Klassen schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_001.htm#mj5e65ec67d9eb2305d2615016264efb64" class="navnav">5.1 Eigene Klassen mit Eigenschaften deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_001.htm#mjcee55258f36e0664b9176ee9cd55196c" class="navnav">5.1.1 Attribute deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_001.htm#mja8308749ed5bc547761cab48fd9fd23d" class="navnav">5.1.2 Methoden deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_001.htm#mj7b6528799a055d50c516a9a6ce03234c" class="navnav">5.1.3 Die this-Referenz</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_002.htm#mjf5b3fff9748ae6323d1923016a906a8f" class="navnav">5.2 Privatsphäre und Sichtbarkeit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_002.htm#mj650376808746f63dbf94baaac0b3fcde" class="navnav">5.2.1 Für die Öffentlichkeit: public</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_002.htm#mj421fe84a059e68f00c9258e052efc416" class="navnav">5.2.2 Kein Public Viewing &#8211; Passwörter sind privat</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_002.htm#mjdb680cba3cfe3cb70471e03ced889467" class="navnav">5.2.3 Wieso nicht freie Methoden und Variablen für alle?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_002.htm#mjd1a57903246651aa57bac01f46f16748" class="navnav">5.2.4 Privat ist nicht ganz privat: Es kommt darauf an, wer&#8217;s sieht *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_002.htm#mjadcdcfde5f010b9466c139b9b2061e4d" class="navnav">5.2.5 Zugriffsmethoden für Attribute deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_002.htm#mj27d0c712d6a0b77771ea8729293a2fae" class="navnav">5.2.6 Setter und Getter nach der JavaBeans-Spezifikation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_002.htm#mjba3d0b97b59d4c00207b68330dc3ad14" class="navnav">5.2.7 Paketsichtbar</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_002.htm#mjefcaab87f441a3115bcea2e82c31d358" class="navnav">5.2.8 Zusammenfassung zur Sichtbarkeit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_003.htm#mjd51d5220468ee4a1f2a07b6796bb393b" class="navnav">5.3 Statische Methoden und statische Attribute</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_003.htm#mje56c1ef6befa9bebe6b70186d680d63b" class="navnav">5.3.1 Warum statische Eigenschaften sinnvoll sind</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_003.htm#mj7cfa3f33ec5dcd7e8c2aca7814ca4a80" class="navnav">5.3.2 Statische Eigenschaften mit static</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_003.htm#mjaf8db1dace632ead0a730ca50227a08e" class="navnav">5.3.3 Statische Eigenschaften über Referenzen nutzen? *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_003.htm#mj93916b1122a23b38d603c49e8c23ae86" class="navnav">5.3.4 Warum die Groß- und Kleinschreibung wichtig ist *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_003.htm#mj9745692d3b4d9195979f26881f24175f" class="navnav">5.3.5 Statische Variablen zum Datenaustausch *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_003.htm#mj5ff2708264298f2c098c7fa6f1ed8002" class="navnav">5.3.6 Statische Eigenschaften und Objekteigenschaften *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_004.htm#mja567f6e018aa38d0058d35e1803b2bd2" class="navnav">5.4 Konstanten und Aufzählungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_004.htm#mjd8be12f49f6de8d40f91a3c1ed07ecd5" class="navnav">5.4.1 Konstanten über öffentliche statische finale Variablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_004.htm#mjc4395a2f846baa2b3ff3387a18986f46" class="navnav">5.4.2 Typ(un)sichere Aufzählungen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_004.htm#mja2ff5a4ba845df2de7de3833743667c6" class="navnav">5.4.3 Aufzählungen mit »enum«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_005.htm#mja0dd46a19d4008a93c3a54831bd5386d" class="navnav">5.5 Objekte anlegen und zerstören</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_005.htm#mj415e65e884cf12aea272c84b0a833206" class="navnav">5.5.1 Konstruktoren schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_005.htm#mj191926dee50dc48898c3c71ad4454d3c" class="navnav">5.5.2 Der vorgegebene Konstruktor (engl. »default constructor«)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_005.htm#mj10809df0d7ff9feb8f7942bb9c23e0e5" class="navnav">5.5.3 Parametrisierte und überladene Konstruktoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_005.htm#mjeba4c88cb0236221c5b762dfdea3a132" class="navnav">5.5.4 Copy-Konstruktor</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_005.htm#mj2e1c2363c979aed81150e04d7f06afd6" class="navnav">5.5.5 Einen anderen Konstruktor der gleichen Klasse mit »this()« aufrufen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_005.htm#mj10ff17c8792a477f4633c412382e068f" class="navnav">5.5.6 Ihr fehlt uns nicht &#8211; der Garbage-Collector</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_005.htm#mj975e7c7e428f38a991ecb081f96e90cc" class="navnav">5.5.7 Private Konstruktoren, Utility-Klassen, Singleton, Fabriken</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_006.htm#mjbe710643b3883f498c80f347751ac52a" class="navnav">5.6 Klassen- und Objektinitialisierung *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_006.htm#mj8bdf9677560ee64466724ec5d65423ec" class="navnav">5.6.1 Initialisierung von Objektvariablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_006.htm#mj2781d1c908a54becfd6d5996eac112b7" class="navnav">5.6.2 Statische Blöcke als Klasseninitialisierer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_006.htm#mj8151bb0849ace5d6e286b168aa468d9c" class="navnav">5.6.3 Initialisierung von Klassenvariablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_006.htm#mj93db64c027de8387756ef445b5c1d073" class="navnav">5.6.4 Eincompilierte Belegungen der Klassenvariablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_006.htm#mj80d4784164ee6ec88529af0dc09c0199" class="navnav">5.6.5 Exemplarinitialisierer (Instanzinitialisierer)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_006.htm#mj37081734f2a6f13a87371c0a6c2c818c" class="navnav">5.6.6 Finale Werte im Konstruktor und in statischen Blöcken setzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_007.htm#mjd6495c652f2f2a6f6c1e2ac552ddf331" class="navnav">5.7 Assoziationen zwischen Objekten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_007.htm#mj827634ee23918b851afc993bec620517" class="navnav">5.7.1 Unidirektionale 1:1-Beziehung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_007.htm#mj9c8c7b30633d3cc76b8277277622d3e7" class="navnav">5.7.2 Bidirektionale 1:1-Beziehungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_007.htm#mjd5082a1e2f2bbc199ccf24bdba5eb65d" class="navnav">5.7.3 Unidirektionale 1:n-Beziehung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_008.htm#mjf275cae4069cb07f60b602bcbea532c8" class="navnav">5.8 Vererbung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_008.htm#mjf017bb7a74c678fbdf843629b9781be8" class="navnav">5.8.1 Vererbung in Java</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_008.htm#mj04665ed002c9fa34418c2d0d8cc53f97" class="navnav">5.8.2 Spielobjekte modellieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_008.htm#mjf2b165b1e9385d011c0d5792532cfd0e" class="navnav">5.8.3 Die implizite Basisklasse »java.lang.Object«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_008.htm#mj42d2ad5de0265855ce32171a4bb7acaf" class="navnav">5.8.4 Einfach- und Mehrfachvererbung *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_008.htm#mj00156fc6ce7a12313715f065a9119155" class="navnav">5.8.5 Die Sichtbarkeit »protected«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_008.htm#mj23635ff54d83b3c53bdfc96dbf5f6f83" class="navnav">5.8.6 Konstruktoren in der Vererbung und »super()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_009.htm#mjbd3c8b043ebc90220d949191218a7221" class="navnav">5.9 Typen in Hierarchien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_009.htm#mj72e27b656ca33b6c872637c4209d0cef" class="navnav">5.9.1 Automatische und explizite Typanpassung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_009.htm#mjd97d9fef18bfca626033f7a8c53c2314" class="navnav">5.9.2 Das Substitutionsprinzip</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_009.htm#mjaf183bf5ba882c17eb18fb7dddbebc0e" class="navnav">5.9.3 Typen mit dem binären Operator »instanceof «testen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_010.htm#mj530675a29a46e99d1439817af2844707" class="navnav">5.10 Methoden überschreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_010.htm#mjdc5bd8d9c9007f13c21f00a2fa95bdbc" class="navnav">5.10.1 Methoden in Unterklassen mit neuem Verhalten ausstatten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_010.htm#mj792df8e32f49fef687f4edbef6067b02" class="navnav">5.10.2 Mit »super« an die Eltern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_010.htm#mj8c03d0b5f6c28323310c16b245875509" class="navnav">5.10.3 Finale Klassen und finale Methoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_010.htm#mj997ffec8aa1bb149470ca2e874054115" class="navnav">5.10.4 Kovariante Rückgabetypen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_010.htm#mj3af86bc3f6025b10611cfcd62bd1670d" class="navnav">5.10.5 Array-Typen und Kovarianz *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj179b2932e63e07c3658cec0c7e376385" class="navh">5.11 Dynamisches Binden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc036e412c6d3646ea98a10f05a0bae63" class="navh">5.11.1 Gebunden an »toString()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjfe413b04b37621547090a78cd5fb2f54" class="navh">5.11.2 Implementierung von »System.out.println(Object)«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj3b9279a804c54e2bbe5aa4b2b8b4cee3" class="navh">5.11.3 Nicht dynamisch gebunden bei privaten, statischen und finalen Methoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjf2938bb5b101c91204b001121dbee1ac" class="navh">5.11.4 Dynamisch gebunden auch bei Konstruktoraufrufen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mje4cf152d80f523f52875ea1e8b9a41ff" class="navh">5.11.5 Eine letzte Spielerei mit Javas dynamischer Bindung und überschatteten Attributen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_012.htm#mj32c7e3f8f7365a86c4bcd11b0fde766a" class="navnav">5.12 Abstrakte Klassen und abstrakte Methoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_012.htm#mj4976e2fb9af553c2864cb4e04c34a7b7" class="navnav">5.12.1 Abstrakte Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_012.htm#mj0dad6b7ebd81c6a20b2ae7b0ce26456a" class="navnav">5.12.2 Abstrakte Methoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_013.htm#mjfac44aa7eeb458fddc00bde8886194c9" class="navnav">5.13 Schnittstellen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj0df1e3f7371a557bce922743775ec7be" class="navnav">5.13.1 Schnittstellen deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj1db69466438ff5e185f95e83f910e178" class="navnav">5.13.2 Implementieren von Schnittstellen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj71d8701af59f1e9c6d377298701b3d3d" class="navnav">5.13.3 Markierungsschnittstellen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mjda7c7677ce960626e25240c2eec899f5" class="navnav">5.13.4 Ein Polymorphie-Beispiel mit Schnittstellen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj7e38de0dde8ca35e495fea8be6b50f9d" class="navnav">5.13.5 Die Mehrfachvererbung bei Schnittstellen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj97d20b849f890ef012d5d0de8b7b49d6" class="navnav">5.13.6 Keine Kollisionsgefahr bei Mehrfachvererbung *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj6add6a3a81e0233b226a28bb9a7172ca" class="navnav">5.13.7 Erweitern von Interfaces &#8211; Subinterfaces</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj978990f92232692e5997f2806abb4cd5" class="navnav">5.13.8 Konstantendeklarationen bei Schnittstellen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj5eafea4c42fac6e5f1da6ea613e0292b" class="navnav">5.13.9 Initialisierung von Schnittstellenkonstanten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_013.htm#mj03dd446f2805e920115595bc775916fb" class="navnav">5.13.10 Abstrakte Klassen und Schnittstellen im Vergleich</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_05_014.htm#mj1b008761e7e60dd49fcab7bf8de0d2cd" class="navnav">5.14 Dokumentationskommentare mit JavaDoc</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_014.htm#mj73579bedbce03e903a0b17dafef33215" class="navnav">5.14.1 Einen Dokumentationskommentar setzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_014.htm#mj2af1671fd24a3eec2a34b1443a19369b" class="navnav">5.14.2 Mit dem Werkzeug javadoc eine Dokumentation erstellen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_014.htm#mj070291c7a074a5f5be4fce22cfa08ba8" class="navnav">5.14.3 HTML-Tags in Dokumentationskommentaren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_014.htm#mj769808fd6db0127c9a729fd0d9ba8ae2" class="navnav">5.14.4 Generierte Dateien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_014.htm#mj8e31f35d329c44560c0da4dbd76c5b20" class="navnav">5.14.5 Dokumentationskommentare im Überblick *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_014.htm#mje4d1241f5450e9bf883e150d266cb7b5" class="navnav">5.14.6 JavaDoc und Doclets *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_05_014.htm#mj0eb8045dfc88d70ba4640493b2d23548" class="navnav">5.14.7 Veraltete (deprecated) Typen und Eigenschaften</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mj179b2932e63e07c3658cec0c7e376385" name="mj179b2932e63e07c3658cec0c7e376385"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">5.11</span> Dynamisches Binden  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Bei der Vererbung haben wir eine Form der Ist-eine-Art-von-Beziehung, sodass die Unterklassen immer auch vom Typ der Oberklassen sind. Die sichtbaren Methoden, die die Oberklassen besitzen, existieren somit auch in den Unterklassen. Der Vorteil bei der Spezialisierung ist, dass die Oberklasse eine einfache Implementierung vorgeben und eine Unterklasse diese überschreiben kann. Wir hatten das bisher bei <span class="clisting">toString()</span> gesehen. Doch nicht nur die Spezialisierung ist aus Sicht des Designs interessant, sondern auch die Bedeutung der Vererbung. Bietet eine Oberklasse eine sichtbare Methode an, so wissen wir immer, dass alle Unterklassen diese Methode haben werden, egal, ob sie die Methode überschreiben oder nicht. Wir werden gleich sehen, dass dies zu einem der wichtigsten Konstrukte in objektorientierten Programmiersprachen führt.</p><a id="mjc036e412c6d3646ea98a10f05a0bae63" name="mjc036e412c6d3646ea98a10f05a0bae63"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">5.11.1</span> Gebunden an »toString()«  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Da jede Klasse Eigenschaften von <span class="clisting">java.lang.Object</span> erbt, lässt sich auf jedem Objekt die <span class="clisting">toString()</span>-Methode aufrufen. Sie soll in unseren Klassen <span class="clisting">GameObject</span> und <span class="clisting">Room</span> wie folgt implementiert sein:</p>
<p class="tabunter"><strong>Listing 5.77    </strong>com/tutego/insel/game/vf/GameObject.java, GameObject</p>
<div class="listing"><pre class="prettyprint">public class GameObject
{
  public String name;

 <span class="cfett"> @Override public String toString()</span>
  {
    return String.format( "GameObject[name=%s]", name );
  }
}</pre></div>
<p class="tabunter"><strong>Listing 5.78    </strong>com/tutego/insel/game/vf/Room.java, Room</p>
<div class="listing"><pre class="prettyprint">public class Room extends GameObject
{
  public int size;

 <span class="cfett"> @Override public String toString()</span>
  {
    return String.format( "Room[name=%s, size=%d]", name, size );
  }
}</pre></div>
<p>Die Unterklassen <span class="clisting">GameObject</span> und <span class="clisting">Room</span> überschreiben die <span class="clisting">toString()</span>-Methode aus <span class="clisting">Object</span>. Bei einem <span class="clisting">toString()</span> auf einem <span class="clisting">GameObject</span> kommt nur der Name in die <span class="clisting">toString()</span>-Kennung, und bei einem <span class="clisting">toString()</span> auf einem <span class="clisting">Room</span>-Objekt kommen Name und Größe in die String-Repräsentation.</p>
<p>Es fehlen noch einige kleine Testzeilen, die drei Räume aufbauen. Alle rufen die <span class="clisting">toString()</span>-Methoden auf den Räumen auf, wobei der Unterschied darin besteht, dass die verweisende Referenzvariable alle Typen von <span class="clisting">Room</span> durchgeht: Ein <span class="clisting">Room</span> ist ein <span class="clisting">Room</span>, ein <span class="clisting">Room</span> ist ein <span class="clisting">GameObject</span>, und ein <span class="clisting">Room</span> ist ein <span class="clisting">Object</span>:</p>
<p class="tabunter"><strong>Listing 5.79    </strong>com/tutego/insel/game/vf/Playground.java, main()</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">Room rr = new Room();</span>
rr.name = "Affenhausen";
rr.size = 7349944;
System.out.println(<span class="cfett"> rr.toString()</span> );
<span class="cfett">
GameObject rg = new Room();</span>
rg.name = "Affenhausen";
System.out.println(<span class="cfett"> rg.toString()</span> );
<span class="cfett">
Object ro = new Room()</span>;
System.out.println(<span class="cfett"> ro.toString()</span> );</pre></div>
<p>Jetzt ist die spannendste Frage in der gesamten Objektorientierung folgende: Was passiert bei dem Methodenaufruf <span class="clisting">toString()</span>?</p>
<div class="listing"><pre class="prettyprint">Room[name=Affenhausen, size=7349944]
Room[name=Affenhausen, size=0]
Room[name=null, size=0]</pre></div>
<p>Die Ausgabe ist leicht zu verstehen, wenn wir berücksichtigen, dass der Compiler nicht die gleiche Weisheit besitzt wie die Laufzeitumgebung. Vom Compiler würden wir erwarten, dass er jeweils das <span class="clisting">toString()</span> in <span class="clisting">Room</span>, aber auch in <span class="clisting">GameObject</span> (die Ausgabe wäre nur der Name) und <span class="clisting">toString()</span> aus <span class="clisting">Object</span> aufruft &#8211; dann wäre die Kennung die kryptische.</p>
<p>Doch führt die Laufzeitumgebung die Anweisungen aus, und nicht der Compiler. Da dem im Programmtext vereinbarten Variablentyp nicht zu entnehmen ist, welche Implementierung der Methode <span class="clisting">toString()</span> aufgerufen wird, sprechen wir von <span class="ckursiv">später dynamischer Bindung</span>, kurz <span class="ckursiv">dynamischer Bindung</span>. Erst zur Laufzeit (das ist spät, im Gegensatz zur Übersetzungszeit) wählt die Laufzeitumgebung dynamisch die entsprechende Objektmethode aus &#8211; passend zum tatsächlichen Typ des aufrufenden Objekts. Die virtuelle Maschine weiß, dass hinter den drei Variablen immer ein Raum-Objekt steht, und ruft daher das <span class="clisting">toString()</span> vom <span class="clisting">Room</span> auf.</p>
<p>Wichtig ist, dass eine Methode überschrieben wird; von einer gleichlautenden Methode in beiden Unterklassen <span class="clisting">GameObject</span> und <span class="clisting">Room</span> hätten wir nichts, da sie nicht in <span class="clisting">Object</span> deklariert ist. Sonst hätten die Klassen nur rein »zufällig« diese Methode, aber die Ober- und Unterklassen verbindet nichts. Wir nutzen daher ausdrücklich die Gemeinsamkeit, dass <span class="clisting">GameObject</span>, <span class="clisting">Player</span> und weitere Unterklassen <span class="clisting">toString()</span> aus <span class="clisting">Object</span> erben. Ohne die Oberklasse gäbe es kein Bindeglied, und folglich bietet die Oberklasse immer eine Methode an, die Unterklassen überschreiben können. Würden wir eine neue Unterklasse von <span class="clisting">Object</span> schaffen und <span class="clisting">toString()</span> nicht überschreiben, so fände die Laufzeitumgebung <span class="clisting">toString()</span> in <span class="clisting">Object</span>, aber die Methode gäbe es auf jeden Fall; entweder die Original-Methode oder die überschriebene Variante.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Begrifflichkeit   </span>Dynamische Bindung wird oft auch <span class="ckursiv">Polymorphie</span> genannt; ein dynamisch gebundener Aufruf ist dann ein <span class="ckursiv">polymorpher Aufruf</span>. Das ist im Kontext von Java in Ordnung, allerdings gibt es in der Welt der Programmiersprachen unterschiedliche Dinge, die »Polymorphie« genannt werden, etwa parametrische Polymorphie (in Java heißt das dann <span class="ckursiv">Generics</span>), und die Theoretiker kennen noch viel mehr beängstigende Begriffe.</p>
</td>
</tr>
</table><br><a id="mjfe413b04b37621547090a78cd5fb2f54" name="mjfe413b04b37621547090a78cd5fb2f54"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">5.11.2</span> Implementierung von »System.out.println(Object)«  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Werfen wir einen Blick auf ein Programm, das dynamisches Binden noch deutlicher macht. Die <span class="clisting">print()</span>- und <span class="clisting">println()</span>-Methoden sind so überladen, dass sie jedes beliebige Objekt annehmen und dann die String-Repräsentation ausgeben:</p>
<p class="tabunter"><strong>Listing 5.80    </strong>java/io/PrintStream.java, Skizze von println()</p>
<div class="listing"><pre class="prettyprint">public void println( Object x )
{
  String s = (x == null) ? "null" :<span class="cfett"> x.toString()</span>;
  print( s );
  newLine();
}</pre></div>
<p>Die <span class="clisting">println()</span>-Methode besteht aus drei Teilen: Als Erstes wird die String-Repräsentation eines Objekts erfragt &#8211; hier findet sich der dynamisch gebundene Aufruf &#8211;, dann wird dieser String an <span class="clisting">print()</span> weitergegeben, und <span class="clisting">newLine()</span> produziert abschließend den Zeilenumbruch.</p>
<p>Der Compiler hat überhaupt keine Ahnung, was <span class="clisting">x</span> ist; es kann alles sein, denn alles ist ein <span class="clisting">java.lang.Object</span>. Statisch lässt sich aus dem Argument <span class="clisting">x</span> nichts ablesen, und so muss die Laufzeitumgebung entscheiden, an welche Klasse der Methodenaufruf geht. Das ist das Wunder der dynamischen Bindung.</p>
<p><div class="eclipse"><img src="common/eclipseicon.gif" align="top" width="53" height="23" alt="Eclipse" title="Eclipse"></div>Eclipse zeigt bei der Tastenkombination 
    <span class="tastenkappe">Strg</span>
  +
    <span class="tastenkappe">T</span>
   eine Typhierarchie an, standardmäßig die Oberklassen und bekannten Unterklassen.</p><a id="mj3b9279a804c54e2bbe5aa4b2b8b4cee3" name="mj3b9279a804c54e2bbe5aa4b2b8b4cee3"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">5.11.3</span> Nicht dynamisch gebunden bei privaten, 
statischen und finalen Methoden  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Obwohl Methodenaufrufe eigentlich dynamisch gebunden sind, gibt es bei privaten, statischen und finalen Methoden eine Ausnahme. Das liegt daran, dass nur überschriebene Methoden an dynamischer Bindung teilnehmen, und wenn es kein Überschreiben gibt, dann gibt es auch keine dynamische Bindung. Und da weder private noch statische oder finale Methoden überschrieben werden können, sind Methodenaufrufe auch nicht dynamisch gebunden. Sehen wir uns das an einer privaten Methode an:</p>
<p class="tabunter"><strong>Listing 5.81    </strong>NoPolyWithPrivate.java</p>
<div class="listing"><pre class="prettyprint">class NoPolyWithPrivate
{
  public static void main( String[] args )
  {
    Banana unsicht = new Banana();
    System.out.println( unsicht.bar() );   // 2
  }
}

class Fruit
{
 <span class="cfett"> private int furcht()</span>
  {
    return 2;
  }

  int bar()
  {
    return furcht();
  }
}

class Banana extends Fruit
{
  // Überschreibt nicht, daher kein @Override
 <span class="cfett"> public int furcht()</span>
  {
    return 1;
  }
}</pre></div>
<p>Der Compiler meldet bei der Methode <span class="clisting">furcht()</span> in der Unterklasse keinen Fehler. Für den Compiler ist es in Ordnung, wenn es eine Methode in der Unterklasse gibt, die den gleichen Namen wie eine private Methode in der Oberklasse trägt. Das ist auch gut so, denn private Implementierungen sind ja ohnehin geheim und versteckt. Die Unterklasse soll von den privaten Methoden in der Oberklasse gar nichts wissen. Statt von Überschreiben sprechen wir hier von <span class="ckursiv">Überdecken</span>.</p>
<p>Die Laufzeitumgebung macht etwas Erstaunliches für <span class="clisting">unsicht.bar()</span>: Die Methode <span class="clisting">bar()</span> wird aus der Oberklasse geerbt. Wir wissen, dass in <span class="clisting">bar()</span> aufgerufene Methoden normalerweise dynamisch gebunden werden, das heißt, dass wir eigentlich bei <span class="clisting">furcht()</span> in <span class="clisting">Unter</span> landen müssten, da wir ein Objekt vom Typ <span class="clisting">Banana</span> haben. Bei privaten Methoden ist das aber anders, da sie nicht vererbt werden. Wenn eine aufgerufene Methode den Modifizierer <span class="clisting">private</span> trägt, wird nicht dynamisch gebunden, und <span class="clisting">unsicht.bar()</span> bezieht sich bei <span class="clisting">furcht()</span> auf die Methode aus <span class="clisting">Fruit</span>.</p>
<div class="listing"><pre class="prettyprint">System.out.println( unsicht.bar() );   // 2</pre></div>
<p>Anders wäre es, wenn bei <span class="clisting">furcht()</span> der Sichtbarkeitsmodifizierer <span class="clisting">public</span> wäre; wir bekämen dann die Ausgabe <span class="clisting">1</span>.</p>
<p>Dass private und statische Methoden nicht überschrieben werden, ist ein wichtiger Beitrag zur Sicherheit. Falls nämlich Unterklassen interne private Methoden überschreiben könnten, wäre dies eine Verletzung der inneren Arbeitsweise der Oberklasse. In einem Satz: Private Methoden sind nicht in den Unterklassen sichtbar und werden daher nicht verdeckt oder überschrieben. Andernfalls könnten private Implementierungen im Nachhinein geändert werden, und Oberklassen wären nicht mehr sicher davor, dass tatsächlich ihre eigenen Methoden benutzt werden.</p>
<p>Schauen wir, was passiert, wenn wir in der Methode <span class="clisting">bar()</span> über die <span class="clisting">this</span>-Referenz auf ein Objekt vom Typ <span class="clisting">Banana</span> casten:</p>
<div class="listing"><pre class="prettyprint">int bar()
{
  return<span class="cfett"> ((Banana)(this))</span>.furcht();
}</pre></div>
<p>Dann wird ausdrücklich diese <span class="clisting">furcht()</span> aus <span class="clisting">Banana</span> aufgerufen, was jedoch kein typisches objektorientiertes Konstrukt darstellt, da Oberklassen ihre Unterklassen im Allgemeinen nicht kennen. <span class="clisting">bar()</span> in der Klasse <span class="clisting">Ober</span> ist somit unnütz.</p><a id="mjf2938bb5b101c91204b001121dbee1ac" name="mjf2938bb5b101c91204b001121dbee1ac"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">5.11.4</span> Dynamisch gebunden auch bei Konstruktoraufrufen *  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Dass ein Konstruktor der Unterklasse zuerst den Konstruktor der Oberklasse aufruft, kann die Initialisierung der Variablen in der Unterklasse stören. Schauen wir uns erst Folgendes an:</p>
<div class="listing"><pre class="prettyprint">class Bouncer extends Bodybuilder
{
  String who = "Ich bin ein Rausschmeißer";
}</pre></div>
<p>Wo wird nun die Variable <span class="clisting">who</span> initialisiert? Wir wissen, dass die Initialisierungen immer im Konstruktor vorgenommen werden, doch gibt es ja noch gleichzeitig ein <span class="clisting">super()</span> im Konstruktor. Da die Spezifikation von Java Anweisungen vor <span class="clisting">super()</span> verbietet, muss die Zuweisung hinter dem Aufruf der Oberklasse folgen. Das Problem ist nun, dass ein Konstruktor der Oberklasse früher aufgerufen wird, als Variablen in der Unterklasse initialisiert wurden. Wenn es die Oberklasse nun schafft, auf die Variablen der Unterklasse zuzugreifen, wird der erst später gesetzte Wert fehlen. Der Zugriff gelingt tatsächlich, doch nur durch einen Trick, da eine Oberklasse (etwa <span class="clisting">Bodybuilder</span>) nicht auf die Variablen der Unterklasse zugreifen kann. Wir können aber in der Oberklasse genau jene Methode der Unterklasse aufrufen, die die Unterklasse aus der Oberklasse überschreibt. Da Methodenaufrufe dynamisch gebunden werden, kann eine Methode den Wert auslesen:</p>
<p class="tabunter"><strong>Listing 5.82    </strong>Bouncer.java</p>
<div class="listing"><pre class="prettyprint">class Bodybuilder
{
  Bodybuilder()
  {
    whoAmI();
  }

  void whoAmI()
  {
    System.out.println( "Ich weiß es noch nicht :-(" );
  }
}

public class Bouncer extends Bodybuilder
{
  String who = "Ich bin ein Rausschmeißer";

  @Override
  void whoAmI()
  {
    System.out.println( who );
  }

  public static void main( String[] args )
  {
    Bodybuilder bb = new Bodybuilder();
    bb.whoAmI();

    Bouncer bouncer = new Bouncer();
    bouncer.whoAmI();
  }
}</pre></div>
<p>Die Ausgabe ist nun folgende:</p>
<div class="listing"><pre class="prettyprint">Ich weiß es noch nicht :-(
Ich weiß es noch nicht :-(
null
Ich bin ein Rausschmeißer</pre></div>
<p>Das Besondere an diesem Programm ist die Tatsache, dass überschriebene Methoden &#8211; hier <span class="clisting">whoAmI()</span> &#8211; dynamisch gebunden werden. Diese Bindung gibt es auch dann schon, wenn das Objekt noch nicht vollständig initialisiert wurde. Daher ruft der Konstruktor der Oberklasse <span class="clisting">Bodybuilder</span> nicht <span class="clisting">whoAmI()</span> von <span class="clisting">Bodybuilder</span> auf, sondern <span class="clisting">whoAmI()</span> von <span class="clisting">Bouncer</span>. Wenn in diesem Beispiel ein <span class="clisting">Bouncer</span>-Objekt erzeugt wird, dann ruft <span class="clisting">Bouncer</span> mit <span class="clisting">super()</span> den Konstruktor von <span class="clisting">Bodybuilder</span> auf. Dieser ruft wiederum die Methode <span class="clisting">whoAmI()</span> in <span class="clisting">Bouncer</span> auf, und er findet dort keinen String, da dieser erst nach <span class="clisting">super()</span> gesetzt wird. Schreiben wir den Konstruktor von <span class="clisting">Bouncer</span> einmal ausdrücklich hin:</p>
<div class="listing"><pre class="prettyprint">public class Bouncer extends Bodybuilder
{
  String who;

  Bouncer()
  {
super();
who = "Ich bin ein Rausschmeißer";
  }
}</pre></div>
<p>Die Konsequenz, die sich daraus ergibt, ist folgende: Dynamisch gebundene Methodenaufrufe über die <span class="clisting">this</span>-Referenz sind in Konstruktoren potenziell gefährlich und sollten deshalb vermieden werden. Vermeiden lässt sich das, indem der Konstruktor nur private (oder finale) Methoden aufruft, da diese nicht dynamisch gebunden werden. Wenn der Konstruktor eine private (finale) Methode in seiner Klasse aufruft, dann bleibt es auch dabei.</p><a id="mje4cf152d80f523f52875ea1e8b9a41ff" name="mje4cf152d80f523f52875ea1e8b9a41ff"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">5.11.5</span> Eine letzte Spielerei mit Javas dynamischer Bindung und überschatteten Attributen *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Werfen wir einen Blick auf folgendes Java-Programm:</p>
<div class="listing"><pre class="prettyprint">class SuperBoaster
{
 <span class="cfett"> int nr = 1;

  void boast()</span>
  {
    System.out.println( "Ich bin die Nummber " + nr );
  }
}

public class SubBoaster extends SuperBoaster
{
 <span class="cfett"> int nr = 2;

  @Override void boast()</span>
  {
   <span class="cfett"> super.boast</span><span class="cfett">()</span>;                   // Ich bin die Nummber 1
    System.out.println(<span class="cfett"> super.nr</span> );  // 1
    System.out.println(<span class="cfett"> nr</span> );        // 2
  }

  public static void main( String[] args )
  {
    new SubBoaster().boast();
  }
}</pre></div>
<p>Die Methode <span class="clisting">boast()</span> aus <span class="clisting">SubBoaster</span> ruft mit <span class="clisting">super.boast()</span> die Methode der Oberklasse auf. Ein einfacher Aufruf von <span class="clisting">boast()</span> in der Unterklasse würde in eine Rekursion führen. Die Unterklasse hat mit <span class="clisting">super.nr</span> Zugriff auf die überschattete Objektvariable <span class="clisting">nr</span> aus der Oberklasse. <span class="clisting">super</span> ist wie <span class="clisting">this</span> eine spezielle Referenz und kann auch genauso eingesetzt werden, nur dass <span class="clisting">super</span> in den Namensraum der Oberklasse geht. Eine Aneinanderreihung von <span class="clisting">super</span>-Schlüsselwörtern bei einer tieferen Vererbungshierarchie ist nicht möglich. Hinter einem <span class="clisting">super</span> muss eine Objekteigenschaft stehen, und Anweisungen wie <span class="clisting">super.super.nr</span> sind somit immer ungültig. Für Variablen gibt es eine Möglichkeit, die sich durch einen Cast in die Oberklasse ergibt. Setzen wir in <span class="clisting">boast()</span> der Unterklasse folgende Anweisung:</p>
<div class="listing"><pre class="prettyprint">System.out.println( ((SuperBoaster) this).nr );      // 1</pre></div>
<p>Die Ausgabe <span class="clisting">1</span> ist also identisch mit <span class="clisting">System.out.println( super.nr )</span>. Die <span class="clisting">this</span>-Referenz entspricht einem Objekt vom Typ <span class="clisting">SubBoaster</span>. Wenn wir dies aber in den Typ <span class="clisting">SuperBoaster</span> konvertieren, bekommen wir genau das <span class="clisting">nr</span> aus der Basisklasse unserer Hierarchie. Wir erkennen hier eine sehr wichtige Eigenschaft von Java, nämlich, dass Variablen nicht dynamisch gebunden werden. Anders sieht es aus, wenn wir Folgendes in die Methode <span class="clisting">boast()</span>der Unterklasse <span class="clisting">SubBoaster</span> setzen:</p>
<div class="listing"><pre class="prettyprint">((SuperBoaster)this).boast();</pre></div>
<p>Hier ruft die Laufzeitumgebung nicht <span class="clisting">boast()</span> aus <span class="clisting">SuperBoaster</span> auf, sondern die aktuelle Methode <span class="clisting">boast()</span> aus <span class="clisting">SubBoaster</span>, sodass wir in einer Rekursion landen. Der Grund dafür liegt in der dynamischen Bindung zur Laufzeit, die ein Compiler-Typecast nicht ändert.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="5.11 Dynamisches Binden"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_05_010.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_05_012.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
