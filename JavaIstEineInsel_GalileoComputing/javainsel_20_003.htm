<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 20.3 Zeichenketten schreiben und Fonts</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 20.3 Zeichenketten schreiben und Fonts">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 20.3 Zeichenketten schreiben und Fonts">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_20_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_20_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa" class="navnav">20 Grafikprogrammierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_001.htm#mj0b6314b6f10d983ddef5d00966d99f1e" class="navnav">20.1 Grundlegendes zum Zeichnen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_001.htm#mjd2e34b0d8796cabb2342454e6e81fb29" class="navnav">20.1.1 Die paint()-Methode für das AWT-Frame</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_001.htm#mja24005ce84f031f74ed78fd92dd27a56" class="navnav">20.1.2 Zeichnen von Inhalten auf ein JFrame</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_001.htm#mj5c1a24233f893de97b190b13044ea7f2" class="navnav">20.1.3 Auffordern zum Neuzeichnen mit »repaint()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_001.htm#mjb75d86c6baba384b7db6c355df649e4b" class="navnav">20.1.4 Java 2D-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_002.htm#mj6ab5adb8c4ee61a2595d19419db66fa6" class="navnav">20.2 Einfache Zeichenmethoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_002.htm#mj00532e6ba996d57f8d141f1e1810454f" class="navnav">20.2.1 Linien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_002.htm#mj033deb2589e5c716a36d13aec9e67031" class="navnav">20.2.2 Rechtecke</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_002.htm#mjf45337ebd521b61f5b3491dc05f1540f" class="navnav">20.2.3 Ovale und Kreisbögen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_002.htm#mj9a2a1ec184eed3ff77b69aa6cd7557e1" class="navnav">20.2.4 Polygone und Polylines</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjdf3e66c04aa595687745bcfd0bd68276" class="navh">20.3 Zeichenketten schreiben und Fonts</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj7b1f73176737f58ab6d30a3e29f9e652" class="navh">20.3.1 Zeichenfolgen schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj8d62457ab2e3bf9f532507320e9fef0c" class="navh">20.3.2 Die Font-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj71653b2ace9bbdae4ca92e3ea28dde77" class="navh">20.3.3 Einen neuen Font aus einem gegebenen Font ableiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj759dcba307b5389773a7c91fa283b86d" class="navh">20.3.4 Zeichensätze des Systems ermitteln *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjdae768bb3fa8f15a823b8ba67776a0e2" class="navh">20.3.5 Neue TrueType-Fonts in Java nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj109c2be8526524ac3a9664b28499ac10" class="navh">20.3.6 Font-Metadaten durch FontMetrics *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_004.htm#mj8f56d039c43274ff5216ba94cef550b1" class="navnav">20.4 Geometrische Objekte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj1b17eb5ffccc2a086d1f58a41301eca8" class="navnav">20.4.1 Die Schnittstelle Shape</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj39007fefcea7a6972382f3b9d3145ff5" class="navnav">20.4.2 Kreisförmiges</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj7dc308fc56ca053379e4626b302062a1" class="navnav">20.4.3 Kurviges *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj5fdf6c9575c830555ab08b93f47ff019" class="navnav">20.4.4 Area und die konstruktive Flächengeometrie *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj232d157f4cbc07a99523a83bcb6dd096" class="navnav">20.4.5 Pfade *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_004.htm#mj77f1da5cccbf02d6af4fb72f9864d9da" class="navnav">20.4.6 Punkt in einer Form, Schnitt von Linien, Abstand Punkt/Linie *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_005.htm#mj39cebc7db18c5020b9bc97ef0af55c70" class="navnav">20.5 Das Innere und Äußere einer Form</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mj66dee545b61b16bbcc8b726e662c09d4" class="navnav">20.5.1 Farben und die Paint-Schnittstelle</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mjf976cd2fc969884fad90dab47f853d61" class="navnav">20.5.2 Farben mit der Klasse »Color«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mj2a52836e0690ebe20831790d3766b062" class="navnav">20.5.3 Die Farben des Systems über SystemColor *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mj099a779c1ebce4eb51bc794f4e5bd2ed" class="navnav">20.5.4 Composite und Xor *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_005.htm#mj40e338e3b80e6ab79fbc5447fae0300a" class="navnav">20.5.5 Dicke und Art der Linien von Formen bestimmen über »Stroke« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_006.htm#mj4c12381d5bacf8fb6ee31448d26890bb" class="navnav">20.6 Bilder</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mj173615a4c416ec276851213a24dd4be2" class="navnav">20.6.1 Eine Übersicht über die Bilder-Bibliotheken</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mjba60f99ac6f4a3cd9177b59abea0c6ba" class="navnav">20.6.2 Bilder mit »ImageIO« lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mj7fe19a5b7fd9823e5ff4f8729749225b" class="navnav">20.6.3 Ein Bild zeichnen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mj3d7ff912a37f3af72eca322fea16dcbe" class="navnav">20.6.4 Programm-Icon/Fenster-Icon setzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mjaebdd1a3040bd8901b1bd49df5495a5a" class="navnav">20.6.5 Splash-Screen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mjd84fb329d6d62f3c77b26c3445372c24" class="navnav">20.6.6 Bilder im Speicher erzeugen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mjdd8fc80751b1bc88bfa58847b9fae351" class="navnav">20.6.7 Pixel für Pixel auslesen und schreiben *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mj133115d4eac3734a7b62458792f9142b" class="navnav">20.6.8 Bilder skalieren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mj23f219adf8635dfd786fc80edaa2070e" class="navnav">20.6.9 Schreiben mit ImageIO</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_20_006.htm#mjcaff18d32bfd6c2bb1d2e0d486fe9197" class="navnav">20.6.10 Asynchrones Laden mit getImage() und dem MediaTracker *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_20_007.htm#mj18a6025debf68eba85c78d9de97f7e75" class="navnav">20.7 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjdf3e66c04aa595687745bcfd0bd68276" name="mjdf3e66c04aa595687745bcfd0bd68276"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">20.3</span> Zeichenketten schreiben und Fonts  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Java kann Zeichenketten in verschiedenen Zeichensätzen (engl. <span class="ckursiv">fonts</span>) auf die Zeichenfläche bringen. Zum Zeichnen gibt es unterschiedliche Methoden, von denen in jeder Java-Version Varianten und Klassen hinzukamen. Nicht viel besser ist es mit den Font-Informationen; auch dafür gibt es verwirrend viele Möglichkeiten zur Repräsentation der Metadaten.</p><a id="mj7b1f73176737f58ab6d30a3e29f9e652" name="mj7b1f73176737f58ab6d30a3e29f9e652"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">20.3.1</span> Zeichenfolgen schreiben  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Methode <span class="clisting">drawString()</span> bringt eine Unicode-Zeichenkette mit so genannten <span class="ckursiv">Glyphen</span>, das sind konkrete grafische Darstellungen eines Zeichens, auf den Bildschirm &#8211; die Darstellung von Zeichen übernimmt in Java der Font-Renderer.</p>
<div class="bildbox">
<p><a name="IDAYH0E"></a><a onClick="OpenWin('bilder/drawtext.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleindrawtext.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 20.3    </strong>Koordinatenangaben von »drawString()« und »drawRect()« im Vergleich</p>
<p>Die Parameter von <span class="clisting">drawString()</span> beschreiben die zu schreibende Zeichenkette sowie die x– und y-Koordinaten. Die Koordinaten bestimmen die Position der <span class="ckursiv">Schriftlinie</span> &#8211; auch <span class="ckursiv">Grundlinie</span> genannt (engl. <span class="ckursiv">baseline</span>) &#8211;, auf der die Buchstaben stehen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">Graphics</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">abstract void drawString( String s, int x, int y )</span>
Schreibt einen String in der aktuellen Farbe und dem aktuellen Zeichensatz.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract void drawString( AttributedCharacterIterator iterator, int x, int y )</span>
Schreibt einen String, der durch den Attribut-Iterator gegeben ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract void drawChars( char[] data, int offset, int length, int x, int y )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract void drawBytes( byte[] data, int offset, int length, int x, int y )</span>
Schreibt die Zeichenkette, und bezieht die Daten aus einem Char- bzw. Byte-Feld.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die Klasse <span class="clisting">TextLayout</span> bietet weitergehende Möglichkeiten, etwa Farbhervorhebung, Cursor-Funktionalität oder über <span class="clisting">TextHitInfo</span> Tests, welches Zeichen sich an welcher Koordinate befindet, was bei Mausklicks nützlich ist. Ein <span class="clisting">draw()</span> vom <span class="clisting">TextLayout</span> bringt den Textbaustein auf den Schirm. Die Dokumentation listet etwas Quellcode zur Verdeutlichung auf.</p>
</td>
</tr>
</table><br><a id="mj8d62457ab2e3bf9f532507320e9fef0c" name="mj8d62457ab2e3bf9f532507320e9fef0c"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">20.3.2</span> Die Font-Klasse  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Methode <span class="clisting">drawString()</span> verwendet immer den aktuellen Zeichensatz. Um diesen zu ändern, benutzen wir auf dem aktuellen <span class="clisting">Graphics</span>-Objekt die Methode <span class="clisting">setFont()</span>. Der Übergabeparameter ist ein <span class="clisting">Font</span>-Objekt, das wir von woanders erfragen oder vorher erzeugen müssen.</p>
<div class="bildbox">
<p><a name="IDASS0E"></a><a onClick="OpenWin('bilder/fontuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinfontuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.awt.<span class="cfett">Font</span>
implements Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Font( String name, int style, int size )</span>
Erzeugt ein <span class="clisting">Font</span>-Objekt mit einem gegebenen Namen, Stil und einer gegebenen Größe.</li>
</ul>
<p>Für den Stil deklariert die <span class="clisting">Font</span>-Klasse drei symbolische Konstanten: <span class="clisting">Font.PLAIN</span>, <span class="clisting">Font.ITALIC</span> und <span class="clisting">Font.BOLD</span>, sodass keine Ganzzahlen als Argumente zu übertragen sind. Die Stil-Attribute können mit dem binären Oder oder dem arithmetischen Plus verbunden werden; ein fetter und kursiver Zeichensatz erreicht <span class="clisting">Font.BOLD | Font.ITALIC</span> (beziehungsweise <span class="clisting">Font.BOLD + Font.ITALIC</span>). Die Größe ist in Punkt angegeben, wobei ein Punkt 1/72 Zoll (in etwa 0,376 mm) entspricht. Der Name des Zeichensatzes ist entweder physikalisch (zum Beispiel »Verdana« oder »Geneva«) oder logisch mit <span class="clisting">Font</span>-Konstanten <span class="clisting">DIALOG</span>, <span class="clisting">DIALOG_INPUT</span>, <span class="clisting">SANS_SERIF</span>, <span class="clisting">SERIF</span> und <span class="clisting">MONOSPACED</span>, die später auf die physikalischen Font-Namen übertragen werden. [Die Webseite <span class="ckursiv">http://java.sun.com/javase/6/docs/technotes/guides/intl/fontconfig.html</span> beschreibt diese Umsetzung.
] </p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Ein <span class="clisting">Font</span>-Objekt erzeugen:</p>
<div class="listing"><pre class="prettyprint">Font f = new Font( Font.SERIF, Font.PLAIN, 14 );</pre></div>
<p class="BStandard">Häufig wird dieses Zeichensatz-Objekt sofort in <span class="clisting">setFont()</span> genutzt, so wie:</p>
<div class="listing"><pre class="prettyprint">setFont( new Font( "Verdana", Font.BOLD, 20 ) );</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die Dokumentation spricht zwar von »Punkt«, in Java sind aber Punkt und Pixel bisher identisch. Würde das Grafiksystem wirklich in Punkt arbeiten, müsste es die Bildschirmauflösung und den Monitor mit berücksichtigen.</p>
</td>
</tr>
</table><br><p>Ist im Programm der aktuell verwendete Zeichensatz nötig, können wir <span class="clisting">getFont()</span> von der <span class="clisting">Graphics</span>-Klasse verwenden:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">Graphics</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">abstract Font getFont()</span>
Liefert den aktuellen Zeichensatz.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract Font setFont( Font f )</span>
Setzt den Zeichensatz für das <span class="clisting">Graphics</span>-Objekt.</li>
</ul><a id="mj71653b2ace9bbdae4ca92e3ea28dde77" name="mj71653b2ace9bbdae4ca92e3ea28dde77"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">20.3.3</span> Einen neuen Font aus einem gegebenen Font ableiten  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Steht ein <span class="clisting">Font</span> zur Verfügung und soll ausgehend von diesem ein neues <span class="clisting">Font</span>-Objekt mit einer kleinen Änderung, etwa in der Größe oder im Attribut (fett, kursiv), hergestellt werden, so lassen sich die <span class="clisting">deriveFont()</span>-Methoden einsetzen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Ausgehend von einem existierenden <span class="clisting">Font</span>-Objekt <span class="clisting">f</span> soll ein neuer Font mit dem gleichen Zeichensatz und Stil abgeleitet werden, der jedoch 20 Punkt groß ist:</p>
<div class="listing"><pre class="prettyprint">Font font = f.deriveFont( 20f );</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.awt.<span class="cfett">Font</span>
implements Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Font deriveFont( int style )</span>
Wie der Originalzeichensatz, nur mit einem neuen Stil.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Font deriveFont( float size )</span>
Wie der Originalzeichensatz, nur mit einer neuen Größe. Der Parameter ist vom Typ <span class="clisting">float</span>, damit Verwechslungen mit <span class="clisting">deriveFont(int)</span> &#8211; das liefert einen neuen Font in normal, fett und/oder kursiv &#8211; ausgeschlossen sind.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Font deriveFont( int style, float size )</span>
Wie der Originalzeichensatz, nur mit einer neuen Größe und einem neuen Stil.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Font deriveFont( AffineTransformation trans )</span>
Erzeugt ein neues <span class="clisting">Font</span>-Objekt, das über ein Transformationsobjekt modifiziert ist. Liefert ein neues Zeichensatzobjekt in der Größe von einem Punkt und keinem besonderen Stil.</li>
</ul><a id="mj759dcba307b5389773a7c91fa283b86d" name="mj759dcba307b5389773a7c91fa283b86d"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">20.3.4</span> Zeichensätze des Systems ermitteln *  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um herauszufinden, welche Zeichensätze auf einem System installiert sind, liefert <span class="clisting">getAvailableFontFamilyNames()</span> auf einem <span class="clisting">GraphicsEnvironment</span> ein Feld mit <span class="clisting">Font</span>-Objekten. Ein Objekt vom Typ <span class="clisting">GraphicsEnvironment</span> beschreibt die Zeichensätze des Systems und <span class="clisting">GraphicsDevice</span>-Objekte. Ein <span class="clisting">GraphicsDevice</span> ist eine Malfläche, also das, worauf das System zeichnen kann. Das kann der Bildschirm sein, aber auch ein Drucker oder eine Hintergrundgrafik. Die statische Fabrikmethode <span class="clisting">getLocalGraphicsEnvironment()</span> liefert ein solches <span class="clisting">GraphicsEnvironment</span>-Objekt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Im folgenden Codesegment gibt eine Schleife alle Zeichensatznamen aus:</p>
<div class="listing"><pre class="prettyprint">for ( String fonts : <span class="cfett">GraphicsEnvironment.getLocalGraphicsEnvironment().</span>
                         <span class="cfett">getAvailableFontFamilyNames()</span> )
  System.out.println( fonts );</pre></div>
<p class="BStandard">Auf meinem System liefert die Schleife die folgenden Zeilen:</p>
<div class="listing"><pre class="prettyprint">Arial
Arial Black
Arial Narrow
...
Wingdings
Wingdings 2
Wingdings 3</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">GraphicsEnvironment</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static GraphicsEnvironment getLocalGraphicsEnvironment()</span>
Liefert das aktuelle <span class="clisting">GraphicsEnvironment</span>-Objekt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract Font[] getAllFonts()</span>
Liefert ein Feld mit allen verfügbaren <span class="clisting">Font</span>-Objekten in einer Größe von einem Punkt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract String[] getAvailableFontFamilyNames()</span>
Liefert ein Feld mit allen verfügbaren Zeichensatzfamilien.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract String[] getAvailableFontFamilyNames( Locale l )</span>
Liefert ein Feld mit verfügbaren Zeichensatzfamilien, die zu einer Sprache <span class="clisting">l</span> gehören.</li>
</ul><a id="mjdae768bb3fa8f15a823b8ba67776a0e2" name="mjdae768bb3fa8f15a823b8ba67776a0e2"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">20.3.5</span> Neue TrueType-Fonts in Java nutzen  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die auf allen Systemen vordefinierten Standardzeichensätze sind etwas dürftig, obwohl die <span class="clisting">Font</span>-Klasse selbst jeden installierten Zeichensatz einlesen kann. Da ein Java-Programm aber nicht von der Existenz eines bestimmten Zeichensatzes ausgehen kann, ist es praktisch, einen Zeichensatz mit der Installation auszuliefern und dann diesen zu laden; das kann die <span class="clisting">Font</span>-Klasse mit der statischen Methode <span class="clisting">createFont()</span> sein. Aus einem Eingabestrom liest die Methode den TrueType-Zeichensatz und erstellt das entsprechende <span class="clisting">Font</span>-Objekt.</p>
<p class="tabunter"><strong>Listing 20.5    </strong>com/tutego/insel/ui/graphics/TrueTypePanel.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">Font font = Font.createFont( Font.TRUETYPE_FONT,
                            getClass().getResourceAsStream( "/NASALIZA.TTF") );</pre></div>
<p>Das erste Argument ist immer <span class="clisting">Font.TRUETYPE_FONT</span>. Das zweite Argument bestimmt den Eingabestrom zur Binärdatei mit den Zeichensatzinformationen. Die Daten werden ausgelesen und zu einem <span class="clisting">Font</span>-Objekt verarbeitet.</p>
<p>Waren die Beschreibungsinformationen in der Datei ungültig, so erzeugt die <span class="clisting">Font</span>-Klasse eine <span class="clisting">FontFormatException</span><span class="clisting">("Unable to create font &#8211; bad font data")</span>. Dateifehler fallen nicht darunter und werden extra über eine <span class="clisting">IOException</span> angezeigt. Der Datenstrom wird anschließend nicht wieder geschlossen.</p>
<p>An dieser Stelle verwundert es vielleicht, dass die Arbeitsweise der statischen Methode <span class="clisting">createFont()</span> der des Konstruktors ähnlich sein müsste, aber der Parameterliste die Attribute fehlen. Das liegt daran, dass die Methode automatisch einen Zeichensatz der Größe 1 im Stil <span class="clisting">Font.PLAIN</span> erzeugt. Um einen größeren Zeichensatz zu erzeugen, müssen wir ein zweites <span class="clisting">Font</span>-Objekt anlegen, was am einfachsten mit der Methode <span class="clisting">deriveFont()</span> geschieht.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.awt.<span class="cfett">Font</span>
implements Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static Font createFont( int fontFormat, InputStream fontStream )</span>
  <span class="clisting">throws FontFormatException, IOException</span>
Liefert ein neues Zeichensatzobjekt in der Größe von einem Punkt und mit keinem besonderen Stil.</li>
</ul>
<p>Soll nicht direkt der <span class="clisting">Font</span> verwendet werden, sondern der Zeichensatz soll unter seinem Namen in den Namensraum gelegt werden, sodass er später auch über den <span class="clisting">Font</span>-Konstruktor gefunden werden kann, lässt er sich mit <span class="clisting">registerFont()</span> anmelden. Das sieht etwa so aus:</p>
<div class="listing"><pre class="prettyprint">GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont( font );</pre></div><a id="mj109c2be8526524ac3a9664b28499ac10" name="mj109c2be8526524ac3a9664b28499ac10"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">20.3.6</span> Font-Metadaten durch FontMetrics *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Jedes <span class="clisting">Font</span>-Objekt beinhaltet Informationen zur Schriftsatzfamilie, zum Schriftsatznamen sowie zu Größe und Stil. Was es nicht bietet, ist Zugriff auf Metadaten, etwa auf Abmessungen des Zeichensatzes. Um diese Daten aufzuspüren, ist ein <span class="clisting">FontMetrics</span>-Objekt nötig. Es verwaltet metrische Informationen, die mit einer Schriftart verbunden sind. Dazu gehören Ober- und Unterlänge, Schrifthöhe und Zeilenabstand.</p>
<p>Da die Klasse <span class="clisting">FontMetrics</span> keinen öffentlichen Konstruktor und keine statische Fabrikmethode besitzt, müssen wir ein <span class="clisting">FontMetrics</span>-Objekt von einer anderen Stelle aus erfragen. Es bieten sich unter anderem an:</p>
<ul class="gp">
<li><span class="clisting">getFontMetrics()</span> von <span class="clisting">Graphics</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">getFontMetrics(Font)</span> von <span class="clisting">Graphics</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">getFontMetrics(Font)</span> von <span class="clisting">Component</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">getFontMetrics(Font)</span> von <span class="clisting">Toolkit</span> (deprecated)</li>
</ul>
<p>Ein <span class="clisting">FontMetrics</span>-Objekt lässt sich merkwürdigerweise nicht direkt vom <span class="clisting">Font</span>-Objekt erfragen. (Umgekehrt liefert aber <span class="clisting">getFont()</span> aus <span class="clisting">FontMetrics</span> das <span class="clisting">Font</span>-Objekt, das diese Metriken beschreibt.)</p>
<p>In der <span class="clisting">paint()</span>-Methode kann also mittels</p>
<div class="listing"><pre class="prettyprint">FontMetrics fm = g.getFontMetrics();</pre></div>
<p>auf die Metriken des aktuellen Zeichensatzes zugegriffen werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">Graphics</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">FontMetrics getFontMetrics()</span>
Liefert die Font-Metriken zum aktuellen Zeichensatz.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract FontMetrics getFontMetrics( Font f )</span>
Liefert die Font-Metriken für den Zeichensatz <span class="clisting">f</span>.</li>
</ul>
<p>Die Klasse <span class="clisting">FontMetrics</span> bietet die folgenden Methoden an, wobei sich alle Angaben auf das jeweilige Zeichensatzobjekt beziehen. Beziehen sich die Rückgabeparameter auf die Zeichengröße, so erfolgt die Angabe immer in Pixeln.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.awt.<span class="cfett">FontMetrics</span>
implements Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">int charWidth( int ch )</span>, <span class="clisting">int charWidth( char ch )</span>
Liefert die Breite zu einem Zeichen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int charsWidth( char[] data, int off, int len )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">int bytesWidth( byte[] data, int off, int len )</span>
Gibt die Breite aller Zeichen des Felds zurück. Beginnt bei <span class="clisting">off</span> und liest <span class="clisting">len</span> Zeichen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int stringWidth( String str )</span>
Gibt die Breite der Zeichenkette zurück, wenn diese gezeichnet würde. Nutzt intern <span class="clisting">charsWidth()</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getAscent()</span>
Gibt den Abstand von der Grundlinie zur oberen Grenze (Oberlänge) zurück. Ist standardmäßig <span class="clisting">getSize()</span> vom <span class="clisting">Font</span>-Objekt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getDescent()</span>
Gibt den Abstand von der Grundlinie zur unteren Grenze (Unterlänge) zurück, standardmäßig 0.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getLeading()</span>
Gibt den Durchschuss (engl. <span class="ckursiv">leading</span>) zurück. Der Durchschuss ist der Standard-Abstand zwischen zwei Zeilen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getHeight()</span>
Gibt den Standard-Zeilenabstand (Abstand zwischen Grundlinie und Grundlinie) in Pixeln zurück. Er berechnet sich aus Durchschuss + Oberlänge + Unterlänge. In Quellcode ausgedrückt: <span class="clisting">getAscent()</span> + <span class="clisting">getDescent()</span> + <span class="clisting">getLeading()</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getMaxAdvance()</span>
Liefert die Breite des breitesten Zeichens, &#8211;1, wenn unbekannt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getMaxAscent()</span>
Liefert das Maximum aller Oberlängen in Pixeln. Einige Zeichen können sich oberhalb der Oberlänge bewegen. Die Standard-Implementierung leitet einfach nur an <span class="clisting">getAscent()</span> weiter.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getMaxDescent()</span>
Liefert das Maximum aller Unterlängen in Pixeln. Leitet standardmäßig an <span class="clisting">getDescent()</span> weiter.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int[] getWidths()</span>
Liefert in einem Ganzzahlfeld die Breiten &#8211; ermittelt durch <span class="clisting">charWidth()</span> &#8211; der ersten 256 Zeichen zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Font getFont()</span>
Liefert den aktuellen Zeichensatz.</li>
</ul>
<div class="bildbox">
<p><a name="IDAPC1E"></a><a onClick="OpenWin('bilder/fontmetrics.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinfontmetrics.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 20.4    </strong>Die wichtigsten Properties der Font-Metadaten</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die Ergebnisse von <span class="clisting">FontMetrics</span> sind bescheiden und mitunter ungenau. Bessere Ergebnisse, etwa über die Maße eines zu zeichnenden Strings, und interessante Zusatzmethoden bieten <span class="clisting">FontRenderContext</span>, <span class="clisting">TextLayout</span> und <span class="clisting">LineMetrics</span>:</p>
<div class="listing"><pre class="prettyprint">Font font = …;
FontRenderContext frc = g.getFontRenderContext();
TextLayout layout = new TextLayout( "Text", font, frc );
Rectangle2D bounds = layout.getBounds();</pre></div>
<p class="BStandard"><span class="clisting">LineMetrics</span> bietet Angaben, wie zum Beispiel die nötige Dicke einer Linie beim Unterstreichen und Durchstreichen:</p>
<div class="listing"><pre class="prettyprint">Font font = …;
FontRenderContext frc =;
LineMetrics lm = font.getLineMetrics( str, g.getFontRenderContext() );</pre></div>
</td>
</tr>
</table><br><div class="bildbox">
<p><a name="IDACE1E"></a><a onClick="OpenWin('bilder/fontmetricsuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinfontmetricsuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<h4 class="t4">Einen String unterstreichen</h4>
<p>Wir wollen nun <span class="clisting">stringWidth()</span> und die Metadaten nutzen, um einen unterstrichenen Text darzustellen. Dafür gibt es keine offensichtliche Standardmethode in der Java-API. Also schreiben wir uns eine eigene statische Methode <span class="clisting">drawUnderlinedString()</span>, die die Koordinaten sowie den String übergeben bekommt und dann mit <span class="clisting">drawString()</span> die Zeichenkette schreibt. Als Zweites zeichnet <span class="clisting">drawLine()</span> eine Linie unter der Grundlinie des Textes mit einer Verschiebung und Dicke, wie sie <span class="clisting">LineMetrics</span> angibt, und mit der Länge, die das <span class="clisting">FontMetrics</span>-Objekt für die Zeichenkette liefert:</p>
<p class="tabunter"><strong>Listing 20.6    </strong>com/tutego/insel/ui/graphics/DrawUnderlinedString.java, drawUnderlinedString()</p>
<div class="listing"><pre class="prettyprint">public static void drawUnderlinedString( Graphics g, int x, int y, String s )
{
  g.drawString( s, x, y );

  FontMetrics fm = g.getFontMetrics();
  LineMetrics lm = fm.getLineMetrics( s, g );

  g.fillRect( x, y + (int) lm.getUnderlineOffset(),
              fm.stringWidth(s), (int) lm.getUnderlineThickness() );
}</pre></div>
<p>Natürlich achtet so eine kleine Methode nicht auf das Aussparen von Buchstaben, die unter der Grundlinie liegen, und so sind Buchstaben wie »y« oder »q« unten gnadenlos durchgestrichen.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="20.3 Zeichenketten schreiben und Fonts"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_20_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_20_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
