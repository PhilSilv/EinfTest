<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 18.5 Serielle Verarbeitung mit StAX</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 18.5 Serielle Verarbeitung mit StAX">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 18.5 Serielle Verarbeitung mit StAX">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_18_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_18_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9" class="navnav">18 Die eXtensible Markup Language (XML)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_001.htm#mj237c96552ea1a4c3a1a589527471c062" class="navnav">18.1 Auszeichnungssprachen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_001.htm#mj4bf69140239c3ccfb8083eff33d6e100" class="navnav">18.1.1 Die Standard Generalized Markup Language (SGML)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_001.htm#mj8d9f98f3ed036fdd6da7807b17781c09" class="navnav">18.1.2 Extensible Markup Language (XML)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_002.htm#mjcd2666b7c695592d37265e354d2a00c5" class="navnav">18.2 Eigenschaften von XML-Dokumenten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mj773e6fbc6cd573178cb691276f14000d" class="navnav">18.2.1 Elemente und Attribute</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mja84996a84fdc9a2d987cb566797a4e08" class="navnav">18.2.2 Beschreibungssprache für den Aufbau von XML-Dokumenten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mj4333546676a25875787fd18c3d254cfe" class="navnav">18.2.3 Schema &#8211; eine Alternative zu DTD</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mj3c7cfffeea42d17ec6d4e502c45a3f53" class="navnav">18.2.4 Namensraum (Namespace)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mj62e6bcc878e81e95702076b2539f77ac" class="navnav">18.2.5 XML-Applikationen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_003.htm#mj2c1eef25d6c5d71726e5dacc6cb108f3" class="navnav">18.3 Die Java-APIs für XML</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mjf8d3130b29ce805bd7b524fbca11a802" class="navnav">18.3.1 Das Document Object Model (DOM)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mj7cb0e2ca0f72fe23591a4e92dac73a41" class="navnav">18.3.2 Simple API for XML Parsing (SAX)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mj8870c3cd8e4b420b6edc4321a1fc513d" class="navnav">18.3.3 Pull-API StAX</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mjc7e7a85232c1e44ad9998ebe18b8e910" class="navnav">18.3.4 Java Document Object Model (JDOM)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mj9b8b8f0ee81828759f5bfacf01d63061" class="navnav">18.3.5 JAXP als Java-Schnittstelle zu XML</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mjadaf4a5fb065c42826aec8f00788f8d0" class="navnav">18.3.6 DOM-Bäume einlesen mit JAXP *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_004.htm#mja6850a6000c1851e0c5247871971601d" class="navnav">18.4 Java Architecture for XML Binding (JAXB)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mj57b18ee2f86e3548766ce5bcf5668f81" class="navnav">18.4.1 Bean für JAXB aufbauen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mj04094f0a2770094b2b07b5d2cc435a76" class="navnav">18.4.2 JAXBContext und die Marshaller</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mj5fb6a31746fde33e516fb3c447fb5876" class="navnav">18.4.3 Ganze Objektgraphen schreiben und lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mjb62739dc1bf14d196c3ffc52932f7360" class="navnav">18.4.4 Validierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mjb3a737e291d8682c25fa9733ed78be51" class="navnav">18.4.5 Weitere JAXB-Annotationen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mjafd88dfe49de9d1fbe3d33655874e33c" class="navnav">18.4.6 Beans aus XML-Schema-Datei generieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mja0bb01e44ea2953efb971874596be219" class="navh">18.5 Serielle Verarbeitung mit StAX</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mje0378fcae4ad61132cf333148d3dac73" class="navh">18.5.1 Unterschiede der Verarbeitungsmodelle</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc334a0292e78cc60f631d89b5b1af283" class="navh">18.5.2 XML-Dateien mit dem Cursor-Verfahren lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj393a8666323d5cfed19cf9bc56c0896f" class="navh">18.5.3 XML-Dateien mit dem Iterator-Verfahren verarbeiten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjaff1d38fd26ccd588bd3da8e8ad308a2" class="navh">18.5.4 Mit Filtern arbeiten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj15d0d171e564cb7b811b0a17ddc1cc2b" class="navh">18.5.5 XML-Dokumente schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_006.htm#mjceff54f01bc1d65b05bddc3222f86495" class="navnav">18.6 Serielle Verarbeitung von XML mit SAX *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_006.htm#mj5a524e0508926cdfa745b209cff80816" class="navnav">18.6.1 Schnittstellen von SAX</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_006.htm#mjb2c389a8849ed9575dcc02189925c512" class="navnav">18.6.2 SAX-Parser erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_006.htm#mj47a0b5f111c2c8aff3fa875397e87f1f" class="navnav">18.6.3 Operationen der Schnittstelle »ContentHandler«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_006.htm#mje940d87629addf069b86bff51b361470" class="navnav">18.6.4 ErrorHandler und EntityResolver</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_007.htm#mja3b868c348f3f738e42cfdbea9cbc8f6" class="navnav">18.7 XML-Dateien mit JDOM verarbeiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mj77135e597d8d54fe840a04842c68e0ce" class="navnav">18.7.1 JDOM beziehen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mja4fd7db4300f6529b10c873ec9a4a439" class="navnav">18.7.2 Paketübersicht *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mjf2413ed9023819537d4eb80713d718fd" class="navnav">18.7.3 Die Document-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mjd234254e691d54903d0af054d16e5378" class="navnav">18.7.4 Eingaben aus der Datei lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mjb14de35f00d79df6e8ec64c512a43bfa" class="navnav">18.7.5 Das Dokument im XML-Format ausgeben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mj17ab80b9ab3664c2eee70dcf38ed8c12" class="navnav">18.7.6 Der Dokumenttyp *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mj0d2717e8c295b1ff3c20745aea125165" class="navnav">18.7.7 Elemente</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mj271080a85d75ee1810532901af462d33" class="navnav">18.7.8 Zugriff auf Elementinhalte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mj3fecdb875aa7ff97650a6669e9e5224d" class="navnav">18.7.9 Liste mit Unterelementen erzeugen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mjea442487bfa31d02e66b7fc903cafdae" class="navnav">18.7.10 Neue Elemente einfügen und ändern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mjf1e272ceae3e4c21e59dbc898afd5894" class="navnav">18.7.11 Attributinhalte lesen und ändern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_007.htm#mjec16e854326f8b45f103ad33caf2681b" class="navnav">18.7.12 XPath</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_008.htm#mjae77a41021c1f5b42aebe4c77feb10dd" class="navnav">18.8 Transformationen mit XSLT *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_008.htm#mjeb34698c85951c9bf3d4ef4567832616" class="navnav">18.8.1 Templates und XPath als Kernelemente von XSLT</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_008.htm#mjf773d26cac37a605d443b7bde4602b2b" class="navnav">18.8.2 Umwandlung von XML-Dateien mit JDOM und JAXP</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_009.htm#mjfae1480f2969fabf0ee2cade12877730" class="navnav">18.9 XML-Schema-Validierung *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_009.htm#mja91b6ae6be97d96101b8fa28df390e00" class="navnav">18.9.1 SchemaFactory und Schema</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_009.htm#mje7366a9f6e72187c570b0bd76ad9e928" class="navnav">18.9.2 Validator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_009.htm#mjc42d33ecf9649ecc4d3e84119eb9aa91" class="navnav">18.9.3 Validierung unterschiedlicher Datenquellen durchführen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_010.htm#mj534267b3a104b554a24f5af79f86f323" class="navnav">18.10 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mja0bb01e44ea2953efb971874596be219" name="mja0bb01e44ea2953efb971874596be219"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">18.5</span> Serielle Verarbeitung mit StAX  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Die Pull-API StAX inklusive Implementierung ist Teil der Standardbibliothek und JDK/JRE ab Version 6. [Um die API vor Java 6 nutzen zu können, kann unter <span class="ckursiv">http://stax.codehaus.org/</span> eine Implementierung der API bezogen werden.
]  Mit ihr lassen sich XML-Dokumente sehr performant ablaufen, jedoch nicht ändern.</p>
<p>Die allgemeine Vorgehensweise zum Parsen eines XML-Dokuments ist folgende:</p>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>1.</strong></td>
<td valign="top" width="100%" align="left"> Erzeuge eine XMLInputFactory.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>2.</strong></td>
<td valign="top" width="100%" align="left"> Erzeuge den passenden Parser.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>3.</strong></td>
<td valign="top" width="100%" align="left"> Wähle XMLStreamReader für die Cursor-Verarbeitung oder XMLEventReader für die Iterator-Verarbeitung.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>4.</strong></td>
<td valign="top" width="100%" align="left"> Erfrage mit next() die nächste Komponente des XML-Dokuments.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>5.</strong></td>
<td valign="top" width="100%" align="left"> Ermittle den Typ der Komponente, und verarbeite ihn.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table><a id="mje0378fcae4ad61132cf333148d3dac73" name="mje0378fcae4ad61132cf333148d3dac73"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">18.5.1</span> Unterschiede der Verarbeitungsmodelle  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Unterschiede zwischen der Cursor- und der Iterator-Verarbeitung sind auf den ersten Blick nicht eindeutig. Beide Verarbeitungsmodelle bieten ähnliche Methoden, und die Verarbeitung der Inhalte ist auch sehr ähnlich. Der wesentliche Unterschied ist die Art und Weise, wie die Komponenten des XML-Dokuments geliefert werden:</p>
<ul class="gp">
<li>Bei der <span class="ckursiv">Cursor-Verarbeitung</span> wird die Komponente direkt mit dem Parser-Objekt verarbeitet. Hier ist die zentrale Klasse der <span class="clisting">XMLStreamReader</span>, mit dem auch auf die Inhalte der XML-Datei zugegriffen wird. Da diese Klasse ebenso verwendet wird, um auf das nächste Element der XML-Datei zugreifen zu können, steht zu einem Zeitpunkt immer nur eine Komponente des XML-Dokuments zur Verfügung. Der Vorteil ist die hohe Effizienz, da bei der Verarbeitung keine neuen Objekte erzeugt werden. Ein XML-Parser ist ein Zustandautomat und Methoden führen den Automaten von einem Zustand in den nächsten.</li>
</ul>
<ul class="gp">
<li>Bei der <span class="ckursiv">Iterator-Verarbeitung</span> wird ein <span class="clisting">XMLEvent</span>-Objekt geliefert, das anderen Methoden übergeben und in einer Datenstruktur gespeichert werden kann.</li>
</ul>
<div class="bildbox">
<p><a name="IDAXKYC"></a><a onClick="OpenWin('bilder/xmlstreamreaderuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinxmlstreamreaderuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>StAX ist eine symmetrische API, was bedeutet, es gibt Klassen zum Lesen und auch Schreiben von XML-Dokumenten. So wie es für das Lesen die Prinzipien Cursor und Iterator gibt, so bietet die StAX-API die Klassen <span class="clisting">XMLStreamWriter</span> und <span class="clisting">XMLEventWriter</span>. Damit ist es möglich, Elemente, die über die Reader gelesen werden, an die Writer zu übergeben und damit Änderungen an den Inhalten zu schreiben.</p><a id="mjc334a0292e78cc60f631d89b5b1af283" name="mjc334a0292e78cc60f631d89b5b1af283"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">18.5.2</span> XML-Dateien mit dem Cursor-Verfahren lesen  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Zunächst muss ein Parser erzeugt werden, der das XML-Dokument verarbeiten soll:</p>
<div class="listing"><pre class="prettyprint">InputStream     in      = new FileInputStream( "party.xml" );
XMLInputFactory factory = XMLInputFactory.newInstance();
XMLStreamReader parser  = factory.createXMLStreamReader( in );</pre></div>
<p>Der Parser iteriert über die XML-Datei mit einer Tiefensuche und liefert beim Verarbeiten eine Reihe von Events, die den Typ des XML-Elements anzeigen. Die Eventtypen sind ganzzahlige Werte und als Konstanten in der Klasse <span class="clisting">XMLStreamConstants</span> festgelegt. Der Parser liefert die folgenden Elemente:</p>
<ul class="gp">
<li><span class="clisting">START_DOCUMENT</span>: Der Beginn der XML-Datei. Bei diesem Event können Eigenschaften wie das Encoding des Dokuments ermittelt werden.</li>
</ul>
<ul class="gp">
<li><span class="clisting">END_DOCUMENT</span>: Hier steht nur die Methode <span class="clisting">close()</span> zum Schließen der Eingabe zur Verfügung.</li>
</ul>
<ul class="gp">
<li><span class="clisting">START_ELEMENT</span>: Liefert den Typ, wenn ein Element beginnt. Die Attribute und der Namensraum eines Elements können hier ausgewertet werden.</li>
</ul>
<ul class="gp">
<li><span class="clisting">END_ELEMENT</span>: Wenn das Ende eines Elements erreicht ist</li>
</ul>
<ul class="gp">
<li><span class="clisting">CHARACTERS</span>: Text innerhalb von Elementen. Text kann auf Whitespace getestet werden.</li>
</ul>
<ul class="gp">
<li><span class="clisting">ENTITY_REFERENCE</span>: Wenn Entitäten in der XML-Datei auftauchen. Üblicherweise werden Entitäten zuerst aufgelöst und dann als <span class="clisting">CHARACTERS</span>-Event geliefert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">DTD</span>: Mit diesem Event wird die DTD als String geliefert, und es ist möglich, auf Teile der DTD zuzugreifen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">COMMENT</span>: Kommentare in der XML-Datei</li>
</ul>
<ul class="gp">
<li><span class="clisting">PROCESSING_INSTRUCTION</span>: Verarbeitungsanweisungen wie Stylesheet-Angaben</li>
</ul>
<p>Die Events <span class="clisting">ATTRIBUTE</span> und <span class="clisting">NAMESPACE</span> liefert der Parser nur in Ausnahmefällen. Inhalte von Attributen sowie die Namensraumdaten lassen sich beim Event <span class="clisting">START_ELEMENT</span> erfragen.</p>
<p>Passend zum Event sind verschiedene Methodenaufrufe gültig, etwa <span class="clisting">getAttributeCount()</span> im Fall eines Elements, das die Anzahl der Attribute liefert. Mit einer Schleife und einer <span class="clisting">switch</span>-Anweisung lassen sich die Inhalte der XML-Datei dann einfach auswerten:</p>
<p class="tabunter"><strong>Listing 18.15    </strong>com/tutego/insel/xml/stax/XMLStreamReaderDemo.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">XMLInputFactory factory = XMLInputFactory.newInstance();<span class="cfett">
XMLStreamReader parser</span> = factory.createXMLStreamReader( new FileInputStream( 
  "party.xml" ) );

StringBuilder spacer = new StringBuilder();

while (<span class="cfett"> parser.hasNext()</span> )
{
  System.out.println( "Event: " + parser.getEventType() );

  switch (<span class="cfett"> parser.getEventType()</span> )
  {
    case<span class="cfett"> XMLStreamConstants.START_DOCUMENT</span>:
      System.out.println( "START_DOCUMENT: " +<span class="cfett"> parser.getVersion()</span> );
      break;

    case<span class="cfett"> XMLStreamConstants.END_DOCUMENT</span>:
      System.out.println( "END_DOCUMENT: " );
     <span class="cfett"> parser.close()</span>;
      break;

    case<span class="cfett"> XMLStreamConstants.NAMESPACE</span>:
      System.out.println( "NAMESPACE: " +<span class="cfett"> parser.getNamespaceURI()</span> );
      break;

    case<span class="cfett"> XMLStreamConstants.START_ELEMENT</span>:
      spacer.append( "  " );
      System.out.println( spacer + "START_ELEMENT: " +<span class="cfett"> parser.getLocalName()</span> );

      // Der Event XMLStreamConstants.ATTRIBUTE wird nicht geliefert!
      for ( int i = 0; i &lt;<span class="cfett"> parser.getAttributeCount()</span>; i++ )
        System.out.println( spacer + "  Attribut: "
                            +<span class="cfett"> parser.getAttributeLocalName( i )</span>
                            + " Wert: " +<span class="cfett"> parser.getAttributeValue( i )</span> );
      break;

    case<span class="cfett"> XMLStreamConstants.CHARACTERS</span>:
      if ( !<span class="cfett"> parser.isWhiteSpace()</span> )
        System.out.println( spacer + "  CHARACTERS: " +<span class="cfett"> parser.getText()</span> );
      break;

    case<span class="cfett"> XMLStreamConstants.END_ELEMENT</span>:
      System.out.println( spacer + "END_ELEMENT: " +<span class="cfett"> parser.getLocalName()</span> );
      spacer.delete( (spacer.length() &#8211; 2), spacer.length() );
      break;

    default:
      break;
  }
 <span class="cfett"> parser.next()</span>;
}</pre></div>
<p>Dieses Beispiel demonstriert das Lesen einer XML-Datei mit dem Cursor-Verfahren. Das folgende Unterkapitel zeigt die Verarbeitung mit dem Iterator-Verfahren.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Der <span class="clisting">XMLStreamReader</span> liefert beim Parsen keinen Typ <span class="clisting">XMLStreamConstants.ATTRIBUTE</span>. Dieses Event kann nur im Zusammenhang mit XPath auftreten, wenn der Ausdruck ein Attribut als Rückgabe liefert. Beim Parsen von XML-Dokumenten werden Attribute anhand der Elemente geliefert.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class javax.xml.stream.<span class="cfett">XMLInputFactory</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static XMLInputFactory newInstance()</span>
Liefert ein Exemplar der Fabrik <span class="clisting">XMLInputFactory</span>. Aus dem Objekt erfolgt als Nächstes üblicherweise ein Aufruf von <span class="clisting">createXMLEventReader()</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract XMLStreamReader createXMLStreamReader( InputStream stream )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract XMLStreamReader createXMLStreamReader( InputStream stream, String encoding )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract XMLStreamReader createXMLStreamReader( Reader reader )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract createXMLStreamReader( Source source )</span>
Liefert einen <span class="clisting">XMLStreamReader</span>, der aus unterschiedlichen Quellen liest.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">interface javax.xml.stream.<span class="cfett">XMLStreamReader</span>
extends XMLStreamConstants</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean hasNext()</span>
Sagt, ob es noch ein neues Parse-Event gibt.</li>
</ul>
<ul class="gp">
<li>i<span class="clisting">nt getEventType()</span>
Liefert den Typ des Parse-Events, so wie in <span class="clisting">XMLStreamConstants</span> deklariert. Die Schnittstelle <span class="clisting">XMLStreamReader</span> erweitert <span class="clisting">XMLStreamConstants</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int next()</span>
Parst das nächste Element und liefert das nächste Parse-Event.</li>
</ul>
<ul class="gp">
<li>Die JavaDoc listet die <span class="clisting">getXXX()</span>-Methoden auf, die alle Eigenschaften wie Namensraum, Attribute, usw. des Elements liefert. Die nächste Tabelle zeigt, welche Methoden auf welchen Zuständen erlaubt sind.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 18.4    </strong>Erlaubte Methoden der Event-Typen</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Event-Typ</span>
</td>
<td class="tabellenkopf"><span class="cfett">Erlaubte Methoden</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p>auf allen Zuständen</p>
</td>
<td class="tabellentext">
<p><span class="clisting">hasNext()</span>, <span class="clisting">require()</span>, <span class="clisting">close()</span>, <span class="clisting">getNamespaceURI()</span>, <span class="clisting">isStartElement()</span>, <span class="clisting">isEndElement()</span>, <span class="clisting">isCharacters()</span>, <span class="clisting">isWhiteSpace()</span>, <span class="clisting">getNamespaceContext()</span>, <span class="clisting">getEventType()</span>, <span class="clisting">getLocation()</span>, <span class="clisting">hasText()</span>, <span class="clisting">hasName()</span>, <span class="clisting">getProperty()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">START_ELEMENT</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">getName()</span>, <span class="clisting">getLocalName()</span>, <span class="clisting">hasName()</span>, <span class="clisting">getPrefix()</span>, <span class="clisting">getAttributeXXX()</span>, <span class="clisting">isAttributeSpecified()</span>, <span class="clisting">getNamespaceXXX()</span>, <span class="clisting">getElementText()</span>, <span class="clisting">nextTag()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">ATTRIBUTE</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">nextTag()</span>, <span class="clisting">getAttributeXXX()</span>, <span class="clisting">isAttributeSpecified()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">NAMESPACE</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">nextTag()</span>, <span class="clisting">getNamespaceXXX()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">END_ELEMENT</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">getName()</span>, <span class="clisting">getLocalName()</span>, <span class="clisting">hasName()</span>, <span class="clisting">getPrefix()</span>, <span class="clisting">getNamespaceXXX()</span>, <span class="clisting">nextTag()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">CHARACTERS, CDATA, COMMENT, SPACE</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">getTextXXX()</span>, <span class="clisting">nextTag()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">START_DOCUMENT</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">getEncoding()</span>, <span class="clisting">getVersion()</span>, <span class="clisting">isStandalone()</span>, <span class="clisting">standaloneSet()</span>, <span class="clisting">getCharacterEncodingScheme()</span>, <span class="clisting">nextTag()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">PROCESSING_INSTRUCTION</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">getPITarget()</span>, <span class="clisting">getPIData()</span>, <span class="clisting">nextTag()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">ENTITY_REFERENCE</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">getLocalName()</span>, <span class="clisting">getText()</span>, <span class="clisting">nextTag()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">DTD</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">next()</span>, <span class="clisting">getText()</span>, <span class="clisting">nextTag()</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">END_DOCUMENT</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">close()</span></p>
</td>
</tr>
</table><br><a id="mj393a8666323d5cfed19cf9bc56c0896f" name="mj393a8666323d5cfed19cf9bc56c0896f"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">18.5.3</span> XML-Dateien mit dem Iterator-Verfahren verarbeiten *  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Verarbeitung mit der Iterator-Variante der StAX-API ist ein wenig komplizierter, aber auch viel flexibler. Es wird nicht direkt mit dem allgemeinen Parser-Objekt auf die Daten zugegriffen, sondern es wird bei jeder Iteration ein <span class="clisting">XMLEvent</span>-Objekt erzeugt. Mit diesem Objekt kann der Typ des Events ermittelt und ganz ähnlich zur Cursor-API ausgewertet werden.</p>
<div class="bildbox">
<p><a name="IDAJEZC"></a><a onClick="OpenWin('bilder/xmleventreadereventuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinxmleventreadereventuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Am Anfang wird ein Parser vom Typ <span class="clisting">XMLEventReader</span> erzeugt, und in einer Schleife werden die einzelnen Komponenten ausgewertet:</p>
<p class="tabunter"><strong>Listing 18.16    </strong>com/tutego/insel/xml/stax/XMLEventReaderDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">InputStream in = new FileInputStream( "party.xml" );
XMLInputFactory factory = XMLInputFactory.newInstance();<span class="cfett">
XMLEventReader parser = factory.createXMLEventReader( in )</span>;

StringBuilder spacer = new StringBuilder();
while (<span class="cfett"> parser.hasNext()</span> )
{
 <span class="cfett"> XMLEvent event = parser.nextEvent()</span>;

  switch (<span class="cfett"> event.getEventType()</span> )
  {
    case<span class="cfett"> XMLStreamConstants.START_DOCUMENT</span>:
      System.out.println( "START_DOCUMENT:" );
      break;
    case XMLStreamConstants<span class="cfett">.END_DOCUMENT</span>:
      System.out.println( "END_DOCUMENT:" );
     <span class="cfett"> parser.close()</span>;
      break;
    case<span class="cfett"> XMLStreamConstants.START_ELEMENT</span>:
     <span class="cfett"> StartElement element = event.asStartElement()</span>;
      System.out.println( spacer.append("  ")
                          + "START_ELEMENT: "
                          + element.getName() );
      for ( Iterator&lt;?&gt; attributes =<span class="cfett"> element.getAttributes()</span>;
            attributes.hasNext(); )
      {
        Attribute attribute = (Attribute) attributes.next();
        System.out.println( spacer + "  Attribut: "
                            + attribute.getName() + " Wert: "
                            + attribute.getValue() );
      }
      break;
    case<span class="cfett"> XMLStreamConstants.CHARACTERS</span>:
     <span class="cfett"> Characters characters = event.asCharacters()</span>;
      if ( !<span class="cfett"> characters.isWhiteSpace()</span> )
        System.out.println( spacer
                            + "  CHARACTERS: "
                            + characters.getData<span class="cfett">()</span> );
      break;
    case XMLStreamConstants.END_ELEMENT:
      System.out.println( spacer
                          + "END_ELEMENT: "
                          +<span class="cfett"> event.asEndElement().getName()</span> );
      spacer.delete( (spacer.length() &#8211; 2), spacer.length() );
      break;
    case XMLStreamConstants.ATTRIBUTE:
      break;

    default :
      break;
  }
}</pre></div>
<p>Diese Form der Verarbeitung sieht auf den ersten Blick komplizierter aus, bietet aber zusätzliche Möglichkeiten, weil die erzeugten Objekte für die weitere Verarbeitung zur Verfügung stehen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class javax.xml.stream.<span class="cfett">XMLInputFactory</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">abstract XMLEventReader createXMLEventReader( InputStream stream )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract XMLEventReader createXMLEventReader( InputStream stream, String encoding )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract XMLEventReader createXMLEventReader( Reader reader )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract XMLEventReader createXMLEventReader( Source source )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract XMLEventReader createXMLEventReader( XMLStreamReader reader )</span>
Liefert <span class="clisting">XMLEventReader</span>, der die Eingabe aus unterschiedlichen Quellen liest.</li>
</ul><a id="mjaff1d38fd26ccd588bd3da8e8ad308a2" name="mjaff1d38fd26ccd588bd3da8e8ad308a2"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">18.5.4</span> Mit Filtern arbeiten *  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mithilfe von Filtern gibt es die Möglichkeit, nur Teile eines XML-Dokuments zu parsen. Diese Filter werden durch die Implementierung einer der Schnittstellen <span class="clisting">javax.xml.stream.EventFilter</span> (für die XML-Events) oder <span class="clisting">javax.xml.stream.StreamFilter</span> (für die <span class="clisting">XMLStreamReader</span>) programmiert. Es muss lediglich die Methode <span class="clisting">accept()</span> implementiert und ein <span class="clisting">boolean</span>-Wert zurückgegeben werden. Als Parameter erwartet diese Methode entweder einen <span class="clisting">javax.xml.stream.events.XMLEvent</span> bei der Iterator-Variante oder einen <span class="clisting">XMLStreamReader</span> bei der Cursor-Variante. Dazu ein Beispiel: Ein Filter soll für die Iterator-Variante die schließenden Tags auslassen:</p>
<p class="tabunter"><strong>Listing 18.17    </strong>com/tutego/insel/xml/stax/PartyEventFilter.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.xml.stax;

import javax.xml.stream.EventFilter;
import javax.xml.stream.events.XMLEvent;

public class PartyEventFilter implements EventFilter
{
  @Override public<span class="cfett"> boolean accept( XMLEvent event )</span>
  {
    return ! event.isEndElement();
  }
}</pre></div>
<p>Der Filter wird beim Erzeugen des Parsers mit der <span class="clisting">XMLInputFactory</span> und dem vorhandenen <span class="clisting">XMLEventReader</span> erzeugt. Dazu ein Beispiel zur Erzeugung des Parsers mit dem Event-Filter:</p>
<div class="listing"><pre class="prettyprint">XMLEventReader filteredParser = factory.createFilteredReader(
                                  parser, new PartyEventFilter() );</pre></div>
<p>Dieses Verfahren der Dekoration wird in ähnlicher Form bei Streams verwendet.</p>
<p>Das Erzeugen eines Parsers mit einem Filter für die Cursor-Variante funktioniert analog. Mit Filtern bietet die API eine einfache Lösung, wenn nur bestimmte Teile des XML-Dokuments verarbeitet werden sollen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class javax.xml.stream.<span class="cfett">XMLInputFactory</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">abstract XMLStreamReader createFilteredReader( XMLStreamReader reader, 
StreamFilter filter )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract XMLStreamReader createFilteredReader( XMLStreamReader reader, 
StreamFilter filter )</span>
Liefert <span class="clisting">XMLEventReader</span> oder <span class="clisting">XMLStreamReader</span> mit einem Filter.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">interface javax.xml.stream.<span class="cfett">EventFilter</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean accept( XMLEvent event )</span>
Liefert <span class="clisting">true</span>, wenn das Ereignis in den Ergebnisstrom soll.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">interface javax.xml.stream.<span class="cfett">StreamFilter</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean accept( XMLStreamReader reader )</span>
Liefert <span class="clisting">false</span>, wenn der <span class="clisting">XMLStreamReader</span> in einem Zustand ist, bei dem das Element ignoriert werden soll.</li>
</ul><a id="mj15d0d171e564cb7b811b0a17ddc1cc2b" name="mj15d0d171e564cb7b811b0a17ddc1cc2b"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">18.5.5</span> XML-Dokumente schreiben  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Im Gegensatz zu DOM-orientierten APIs, bei denen das gesamte Dokument im Speicher vorliegt und verändert werden kann, ist es bei StAX nicht möglich, die vorhandene XML-Datei zu verändern. Es ist aber trotzdem möglich, XML zu schreiben. Auch hier wird zwischen der Cursor- und der Iterator-Variante unterschieden. Bei der Iterator-Variante werden Event-Objekte geschrieben, die entweder aus einem gelesenen XML-Dokument stammen oder mit einer <span class="clisting">XMLEventFactory</span> erzeugt werden. Bei der Cursor-Variante wird mit einem <span class="clisting">XMLStreamWriter</span> die XML-Komponente direkt erzeugt und geschrieben. In beiden Fällen wird über die <span class="clisting">XMLOutputFactory</span> ein passender Writer erzeugt. Die Reihenfolge, in der die Komponenten geschrieben werden, entscheidet über den Aufbau des zu erzeugenden XML-Dokuments.</p>
<h4 class="t4">XMLStreamWriter</h4>
<p>Zuerst zeigen wir, wie mit der Cursor-Variante eine XML-Datei geschrieben werden kann. Dazu erzeugen wir mit der <span class="clisting">XMLOutputFactory</span> einen <span class="clisting">XMLStreamWriter</span>, der die Elemente und Attribute direkt in eine XML-Datei schreibt:</p>
<p class="tabunter"><strong>Listing 18.18    </strong>com/tutego/insel/xml/stax/XMLStreamWriterDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">XMLOutputFactory factory = XMLOutputFactory.newInstance();
XMLStreamWriter writer = factory.createXMLStreamWriter( new FileOutputStream(
  "writenParty.xml" ) );
// Der XML-Header wird erzeugt
writer.writeStartDocument();
// Zuerst wird das Wurzelelement mit Attribut geschrieben
  writer.writeStartElement( "party" );
    writer.writeAttribute( "datum", "31.12.01" );
    // Unter dieses Element das Element gast mit einem Attribut erzeugen
    writer.writeStartElement( "gast" );
      writer.writeAttribute( "name", "Albert Angsthase" );
    writer.writeEndElement();
  writer.writeEndElement();
writer.writeEndDocument();
writer.close();</pre></div>
<p>Beim Schreiben werden zuvor keine speziellen Objekte in einem XML-Baum erzeugt, sondern die Elemente direkt geschrieben. Der große Vorteil ist, dass das Schreiben sehr performant ist und die Größe der XML-Ausgabe beliebig sein kann.</p>
<h4 class="t4">XMLEventWriter *</h4>
<p>Das Schreiben von XML-Dokumenten mit dem <span class="clisting">XMLEventWriter</span> erfolgt in drei Stufen:</p>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>1.</strong></td>
<td valign="top" width="100%" align="left"> Von der XMLOutputFactory wird ein Objekt vom Typ XMLEventWriterXMLEventWriter, Schnittstelle erfragt. In den XMLEventWriter werden dann die Ereignisobjekte geschrieben.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>2.</strong></td>
<td valign="top" width="100%" align="left"> Für das Erzeugen der Event-Objekte wird eine XMLEventFactory benötigt. Mit ihr lassen sich neue XMLEvent-Objekte erzeugen und irgendwo speichern.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>3.</strong></td>
<td valign="top" width="100%" align="left"> Die XMLEvent-Objekte werden geschrieben.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<p>Der zentrale Unterschied zwischen dem <span class="clisting">XMLStreamWriter</span> und <span class="clisting">XMLEventWriter</span> ist also, dass beim <span class="clisting">XMLEventWriter</span> erst die <span class="clisting">XMLEvent</span>-Objekte erzeugt werden &#8211; in beliebiger Reihenfolge &#8211; und sie dann in den <span class="clisting">XMLEventWriter</span> kommen; die Reihenfolge beim Erzeugen hat keinen Einfluss auf die Reihenfolge in der späteren Ausgabe:</p>
<p class="tabunter"><strong>Listing 18.19    </strong>com/tutego/insel/xml/stax/ XMLEventWriterDemo.java, main() Teil 1</p>
<div class="listing"><pre class="prettyprint">XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();
XMLEventWriter writer = outputFactory.createXMLEventWriter(
  new FileOutputStream("writenParty.xml" ) );
XMLEventFactory eventFactory = XMLEventFactory.newInstance();
XMLEvent header = eventFactory.createStartDocument();
XMLEvent startRoot = eventFactory.createStartElement( "", "", "party" );
XMLEvent datumAttribut = eventFactory.createAttribute( "datum", "31.12.01" );
XMLEvent endRoot = eventFactory.createEndElement( "", "", "party" );
XMLEvent startGast = eventFactory.createStartElement( "", "", "gast" );
XMLEvent name = eventFactory.createAttribute( "name",  "Albert Angsthase" );
XMLEvent endGast = eventFactory.createEndElement( "", "", "gast" );
XMLEvent endDocument = eventFactory.createEndDocument();</pre></div>
<p>Zuerst werden für das Wurzelelement das öffnende und schließende Tag sowie das Attribut <span class="clisting">datum</span> erzeugt. Hierfür wird die Methode <span class="clisting">createStartElement()</span> verwendet.</p>
<p>Um die Elemente zu schreiben, werden sie dem <span class="clisting">XMLEventWriter</span> übergeben. Hier entscheidet die Reihenfolge über den Aufbau der XML-Datei:</p>
<p class="tabunter"><strong>Listing 18.20    </strong>com/tutego/insel/xml/stax/XMLEventWriterDemo.java, main() Teil 2</p>
<div class="listing"><pre class="prettyprint">writer.add( header );
writer.add( startRoot );
    writer.add( datumAttribut );
    writer.add( startGast );
      writer.add( name );
    writer.add( endGast );
  writer.add( endRoot );
writer.add( endDocument );
writer.close();</pre></div>
<p>In diesem Beispiel wurde gezeigt, wie Events erzeugt werden können und wie sie geschrieben werden. Das Schreiben von Elementen aus einer Eingabe funktioniert analog. Falls sich Elemente wiederholen oder aus einer anderen Quelle stammen (etwa ein <span class="clisting">XMLEvent</span>, das serialisiert vom Netzwerk kommt), können sie direkt in den <span class="clisting">XMLEventWriter</span> geschrieben werden. In dem Fall ist die Iterator-Variante flexibler als die Cursor-Variante. Diese Flexibilität wird durch einen etwas höheren Aufwand erkauft.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die Ausgabe ist weder beim <span class="clisting">XMLStreamWriter</span> noch beim <span class="clisting">XMLEventWriter</span> formatiert oder eingerückt, und die XML-Elemente stehen einfach hintereinander: <span class="clisting">&lt;?xml version="1.0" ?&gt;&lt;party datum="31.12.01"&gt;&lt;gast name="Albert Angsthase"&gt;&lt;getraenk&gt;Wein </span>&lt;/getraenk&gt;&lt;getraenk&gt;Bier&lt;/getraenk&gt;&lt;zustand ledig="true" nuechtern="true"/&gt;&lt;/gast&gt; &lt;/party&gt;. </p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Besteht die Anforderung, dass die XML-Ausgabe eingerückt ist, kann Java SE standardmäßig nichts machen, und es muss auf externe Hilfklassen zugrückgegriffen werden. Die StAX-Utility-Sammlung unter <span class="ckursiv">https://stax-utils.dev.java.net/</span> bietet den <span class="clisting">javanet.staxutils.IndentingXMLEventWriter</span> beziehungsweise  <span class="clisting">IndentingXMLStreamWriter</span>, dessen Nutzung so aussieht:</p>
<div class="listing"><pre class="prettyprint">XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(
  outputStream );
writer = <span class="cfett">new IndentingXMLStreamWriter( writer );</span>
writer.writeStartDocument();</pre></div>
<p class="BStandard">Der <span class="clisting">IndentingXMLStreamWriter</span> realisiert das Dekorator-Pattern.</p>
</td>
</tr>
</table><br><h4 class="t4">Zusammenfassung</h4>
<p>Wir haben gesehen, wie mit der StAX-API XML gelesen und geschrieben werden kann, welche Unterschiede zwischen der Cursor- und der Iterator-Variante bestehen und welche Filter für die Eingabe zur Verfügung stehen. Grundsätzlich ist die Iterator-Variante die flexiblere Lösung und in den meisten Fällen performant genug. Sie ist in jedem Fall performanter als eine DOM-basierte Lösung, wenn nicht die gesamte XML-Struktur im Speicher benötigt wird. Die Cursor-Variante sollte gewählt werden, wenn hohe Verarbeitungsgeschwindigkeit und geringer Speicherverbrauch Priorität haben. Diese Variante ist insbesondere für Endgeräte mit wenig Speicher und geringer Rechenleistung die bessere Wahl.</p>
<p>Die Anwendungsgebiete der StAX-API sind die gleichen wie die der SAX-API, weil die Vorteile beider Verfahren gute Performance und geringer Speicherverbrauch sind. Für die meisten Programmierer ist diese Form der Verarbeitung einfacher als die SAX-Variante, weil der XML-Inhalt direkt gelesen wird. SAX hat den Vorteil, dass es weit verbreitet ist und in vielen Programmiersprachen zur Verfügung steht. Wir stellen SAX im folgenden Unterkapitel kurz vor.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="18.5 Serielle Verarbeitung mit StAX"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_18_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_18_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
