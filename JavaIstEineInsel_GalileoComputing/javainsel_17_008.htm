<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 17.8 Datenkompression *</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 17.8 Datenkompression *">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 17.8 Datenkompression *">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_17_007.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_17_009.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d" class="navnav">17 Datenströme</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_001.htm#mj7a324cf69fbedec30392b88f514c1531" class="navnav">17.1 Stream-Klassen und Reader/Writer am Beispiel von Dateien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_001.htm#mj87f7ea8c7b8051417049399df2c5782a" class="navnav">17.1.1 Mit dem FileWriter Texte in Dateien schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_001.htm#mj5716136ecff252fbd4596261b9080831" class="navnav">17.1.2 Zeichen mit der Klasse »FileReader« lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_001.htm#mjb01e1a0c69c28aad4f4d7eeee1de357d" class="navnav">17.1.3 Kopieren mit »FileOutputStream« und »FileInputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_001.htm#mjbdc9ce90e6d512ae0291a2ed6232d72a" class="navnav">17.1.4 Das FileDescriptor-Objekt *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_002.htm#mj9a4cc18f2e2c6f801a5cc621aa15984f" class="navnav">17.2 Basisklassen für die Ein-/Ausgabe</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj203b54d682c73aada147e1b57c01662f" class="navnav">17.2.1 Die abstrakten Basisklassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj7a1dda9729bd603bcadebc990609f10f" class="navnav">17.2.2 Übersicht über Ein-/Ausgabeklassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mjd34b697cdf6ea75732127f6a06fc88b0" class="navnav">17.2.3 Die abstrakte Basisklasse »OutputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj2202e460fa14e6ecb6820f4ef86a77f8" class="navnav">17.2.4 Die Schnittstellen »Closeable« und »Flushable«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj25199db178b60bddb59bd9defea22c22" class="navnav">17.2.5 Ein Datenschlucker *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj534fca11b85556e6eec99b4fdd7a4553" class="navnav">17.2.6 Die abstrakte Basisklasse »InputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mjc2905c008847dad671feaa7501f0d82f" class="navnav">17.2.7 Ressourcen aus dem Klassenpfad und aus Jar–Archiven laden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj8c65b2939c83b858ed311032513e29b4" class="navnav">17.2.8 Ströme mit SequenceInputStream zusammensetzen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mjb3889bbefb776f81c16212ee860a5b81" class="navnav">17.2.9 Die abstrakte Basisklasse »Writer«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj8bdb238857679cf8eede58d00850de6b" class="navnav">17.2.10 Die Schnittstelle »Appendable« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj923c62d6bac3e8a5c5b75c58df0b0bd3" class="navnav">17.2.11 Die abstrakte Basisklasse »Reader«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_003.htm#mjb6060f6cd569b28d5768b131b007f8c8" class="navnav">17.3 Formatierte Textausgaben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_003.htm#mj3573ae904c53fd07e28b8d6dc4973fc8" class="navnav">17.3.1 Die Klassen »PrintWriter« und »PrintStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_003.htm#mjc6e7c16fc76cbc87e02a674ecb288cbf" class="navnav">17.3.2 »System.out«, »System.err« und »System.in«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_004.htm#mj52686ccc039a7d0b9fdf13da77f25534" class="navnav">17.4 Schreiben und Lesen aus Strings und Byte-Feldern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mj97a3eda7509a5b9a017d7b03763042ee" class="navnav">17.4.1 Mit dem »StringWriter« ein String-Objekt füllen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mj94b85a8029a72b2ead03272e22027344" class="navnav">17.4.2 CharArrayWriter</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mj1fbd4214555249440ffa5a256c369d52" class="navnav">17.4.3 »StringReader« und »CharArrayReader«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mjb453ad9336694734eec75f9d0145cc03" class="navnav">17.4.4 Mit »ByteArrayOutputStream« in ein Byte-Feld schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mje1eff635da76d0cbd2c4c316ee940cfb" class="navnav">17.4.5 Mit »ByteArrayInputStream« aus einem Byte-Feld lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_005.htm#mjafc99f810e12c276ba2a4b6fc3c009c3" class="navnav">17.5 Datenströme filtern und verketten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mj4466c357c7508a8eb1ceaaaa7a22f5ed" class="navnav">17.5.1 Streams als Filter verketten (verschalen)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mj3a1085565ee3f519c058eb06e024f57a" class="navnav">17.5.2 Gepufferte Ausgaben mit »BufferedWriter«/»BufferedOutputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mjd7529c220ef65a0b793a27365ea5de14" class="navnav">17.5.3 Gepufferte Eingaben mit »BufferedReader«/»BufferedInputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mj019dc3443d19cfbdda730582336dc29d" class="navnav">17.5.4 »LineNumberReader« zählt automatisch Zeilen mit *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mj46d4c0c0873fbee2cbb4dbbf6aacfb92" class="navnav">17.5.5 Daten mit der Klasse »PushbackReader« zurücklegen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mjeee25cb2d512bd9c6098a285327bb9de" class="navnav">17.5.6 DataOutputStream/DataInputStream *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mj5ca3c8f350c3026418585f4f6765a4a7" class="navnav">17.5.7 Basisklassen für Filter *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mj9f0672d3026eda914c090ee852a9042f" class="navnav">17.5.8 Die Basisklasse »FilterWriter« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mjcf7a24a8d32eab395c95b5a1a055ee61" class="navnav">17.5.9 Ein LowerCaseWriter *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mj4744fe492703c6ebebb6a59fc1ecab41" class="navnav">17.5.10 Eingaben mit der Klasse »FilterReader« filtern *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_005.htm#mjbb86eafceec41ba0b8b469e325491f65" class="navnav">17.5.11 Anwendungen für »FilterReader« und »FilterWriter« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_006.htm#mj23b9709abc382e2f5711eb2fa2afe62a" class="navnav">17.6 Vermittler zwischen Byte-Streams und Unicode-Strömen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_006.htm#mj3d46af3cebae8a6b48a1b86f51aa9a9a" class="navnav">17.6.1 Datenkonvertierung durch den »OutputStreamWriter«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_006.htm#mj144d7a0549a2ce1fab9915120fb31b22" class="navnav">17.6.2 Automatische Konvertierungen mit dem »InputStreamReader«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_007.htm#mjfe86e50114d12487bf98150109f0c80e" class="navnav">17.7 Kommunikation zwischen Threads mit Pipes *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_007.htm#mj5543b5920d0846d094719457aed5af2d" class="navnav">17.7.1 »PipedOutputStream« und »PipedInputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_007.htm#mj59d39f069c9dee074ea833ee91cdb61d" class="navnav">17.7.2 »PipedWriter« und »PipedReader«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjbbc77ec964ae1ebbe66c5eb2007a8b82" class="navh">17.8 Datenkompression *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj3a803e5a22241029d6675e5d613ea7e2" class="navh">17.8.1 Java-Unterstützung beim Komprimieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj7fca467b6415e4b9fe73aee4c8e16a50" class="navh">17.8.2 Datenströme komprimieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mje0c8562dbd63f757609825045dddf21d" class="navh">17.8.3 Zip-Archive</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjd663fcaaa21f8f86000c0a811e58b9f1" class="navh">17.8.4 Jar-Archive</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_009.htm#mj7b8d560bda25a4f29394a149b2c3d535" class="navnav">17.9 Prüfsummen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_009.htm#mje3d5968795a85089bfd586581f1b781a" class="navnav">17.9.1 Die Schnittstelle Checksum</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_009.htm#mj9cdca16397ae80dcd9d85adf2cf3cc2f" class="navnav">17.9.2 Die Klasse »CRC32«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_009.htm#mj50d1509644070e5a1d40daa4faa61fa9" class="navnav">17.9.3 Die Adler32-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_010.htm#mjfbe8cb1105d7dfaf6adbc23f31c81b93" class="navnav">17.10 Persistente Objekte und Serialisierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj69bf799342565da382851751b8405c7a" class="navnav">17.10.1 Objekte mit der Standard-Serialisierung speichern und lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj9d80b91a6c19f204a99e533d4b06d998" class="navnav">17.10.2 Zwei einfache Anwendungen der Serialisierung *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj4cfaf8e1986ce009185bb267467eb491" class="navnav">17.10.3 Die Schnittstelle »Serializable«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mjcafe7062d212cfb4fcf71bb901c8099c" class="navnav">17.10.4 Nicht serialisierbare Attribute aussparen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mjd107c87fbdb86f55755ffc6b4039e012" class="navnav">17.10.5 Das Abspeichern selbst in die Hand nehmen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mjb643b06ff5b465827ea26c24669f7289" class="navnav">17.10.6 Tiefe Objektkopien *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj263338363082753d9e0405edbfce3f51" class="navnav">17.10.7 Versionenverwaltung und die SUID</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj07f5c3cb185628598b5c79a3729d9f9d" class="navnav">17.10.8 Wie die »ArrayList« serialisiert *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mjfcd0e0b26ebafe7b761d60df5980a4cd" class="navnav">17.10.9 Probleme mit der Serialisierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_011.htm#mj127a190a2c34664de897acc631316756" class="navnav">17.11 Alternative Datenaustauschformate</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_011.htm#mjf9ee0e42eb705d67748dc15d0336cb3f" class="navnav">17.11.1 Serialisieren in XML-Dateien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_011.htm#mje0da83ef3a9c48ec1e3010dacb6e808f" class="navnav">17.11.2 XML-Serialisierung von JavaBeans mit JavaBeans Persistence *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_011.htm#mja49e87eb234ecf53ab600822784dddcb" class="navnav">17.11.3 Open-Source Bibliothek XStream *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_012.htm#mja2c8f5a4b1baf6bb787a020787e01cc9" class="navnav">17.12 Tokenizer *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_012.htm#mjd6c5137e5c1c6b9e9b82dbd43f2c974a" class="navnav">17.12.1 StreamTokenizer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_013.htm#mj4a4cb19892fe3082f19af7d71ff8b2e5" class="navnav">17.13 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjbbc77ec964ae1ebbe66c5eb2007a8b82" name="mjbbc77ec964ae1ebbe66c5eb2007a8b82"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">17.8</span> Datenkompression *  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Damit Daten weniger Platz auf dem Datenträger einnehmen, werden sie komprimiert. Bei Netzwerkverbindungen ist die logische Konsequenz, dass weniger Daten natürlich auch schneller übertragen werden. Über alle Plattformen hinweg haben sich Standards gebildet. Zwei Kompressionsstandards sollen an dieser Stelle beschrieben werden.</p>
<h4 class="t4">compress/uncompress, GZip/GunZip</h4>
<p>Seitdem der LZW-Algorithmus im Juni 1984 im IEEE-Journal beschrieben wurde, gibt es in jedem Unix-System die Dienstprogramme <span class="ckursiv">compress</span> und <span class="ckursiv">uncompress</span>, die verlustfrei Daten zusammenpacken und wieder auspacken. [Interessanterweise wurde danach der LZW-Algorithmus von der Sperry Company patentiert &#8211; dies zeigt eigentlich, wie unsinnig das Patentrecht in den USA ist.
]  <span class="ckursiv">gzip</span> und <span class="ckursiv">gunzip [</span>Gibt es sogar für den C=64: <span class="ckursiv">http://www.cs.tut.fi/~albert/Dev/gunzip/</span>
]  sind freie Unix-Tools von compress/uncompress und unterliegen der GNU Public License. Das Format enthält eine zyklische Überprüfung bezüglich defekter Daten. Die Endung einer Datei, die mit gzip gepackt ist, ist mit <span class="ckursiv">.gz</span> angegeben, wobei die Endung unter compress nur <span class="ckursiv">.Z</span> ist. gzip behält die Rechte und Zeitattribute der Dateien bei.</p>
<h4 class="t4">Zip</h4>
<p>Das Dienstprogramm <span class="ckursiv">zip</span> bündelt in einem Archiv mehrere Dateien und kann die hierarchische Struktur der Ordner erhalten. Auf jede Datei im Zip-Archiv lässt sich anschließend individuell zugreifen. Programme wie WinZip oder 7-Zip können unter Windows Zip-Dateien verarbeiten. Obwohl Zip und GZip von der Anwendung her unterschiedlich arbeiten &#8211; GZip stellt einen Filter dar, der einen Datenstrom komprimiert &#8211;, verwenden sie denselben Algorithmus. Beide basieren auf Algorithmen, die im RFC 1952 definiert sind.</p>
<p>Es gibt auch unkomprimierte Zip-Archive (allerdings selten). Ein Beispiel dafür sind die Java-Archive des frühen Internet Explorers. Die größte Datei ist unkomprimiert 5,3 MB groß, gepackt wäre sie 2 MB schwer. Sie wurden aus Gründen der Geschwindigkeit nicht gepackt, da sich die Daten aus unkomprimierten Archiven schneller lesen lassen, weil keine Prozessorleistung für das Entpacken aufzuwenden ist.</p>
<h4 class="t4">Das Archivformat und Archivierungsprogramm »tar«</h4>
<p>Das unter Unix-Systemen bekannte Dienstprogramm <span class="ckursiv">tar [</span>»tar« steht für <span class="ckursiv">tape archiver</span>, was übersetzt <span class="ckursiv">Bandarchivierer</span> heißt.
]  bündelt mehrere Dateien zu einer neuen Datei, ohne sie zu komprimieren. Das Ergebnis, ein Tar-Archiv, wird oft anschließend mit dem Tool gzip beziehungsweise bzip2 gepackt. Die Endung ist dann <span class="ckursiv">.tar.Z</span>. Werden mehrere Daten erst in einem Tar-Archiv zusammengefasst und dann gepackt, ist die Kompressionsrate höher, als wenn jede Datei einzeln komprimiert wird. Der Grund ist simpel: Das Kompressionsprogramm kann die Redundanz besser ausnutzen. Der Nachteil ist freilich, dass für eine Datei gleich das ganze Tar-Archiv ausgepackt werden muss.</p><a id="mj3a803e5a22241029d6675e5d613ea7e2" name="mj3a803e5a22241029d6675e5d613ea7e2"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">17.8.1</span> Java-Unterstützung beim Komprimieren  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Unter Java ist ein Paket <span class="clisting">java.util.zip</span> eingerichtet, um mit komprimierten Dateien zu operieren. Das Paket bietet zur Komprimierung zwei allgemein gebräuchliche Formate: GZip/GunZip zum Komprimieren beziehungsweise Entkomprimieren von Datenströmen und Zip zum Behandeln von Archiven und zum Komprimieren von Dateien. Auch wird das eigene Archiv-Format Jar (<span class="cfett">J</span>ava <span class="cfett">Ar</span>chive) durch das Paket <span class="clisting">java.util.jar</span> unterstützt. Jar ist eine Erweiterung des Zip-Formats. Speziell Klassendateien in Java-Archiven können durch <span class="clisting">java.util.jar.Pack200</span> noch höher komprimiert werden.</p>
<p>Tar-Archive werden nicht unterstützt, doch gibt es eine Reihe freier Implementierungen, unter anderem von der Apache Software Foundation: <span class="ckursiv">http://tutego.de/go/tarcvs</span>; sie definieren Ein- und Ausgabeströme. Für BZip2 bietet die Apache Foundation Unterstützung über das Paket <span class="ckursiv">Commons Compress</span> (<span class="ckursiv">http://tutego.de/go/bzip2</span>). Neben der Unterstützung durch das Paket <span class="clisting">java.util.zip</span> für GZip-Ströme und Zip-Dateien ist <span class="ckursiv">TrueZIP</span> (<span class="ckursiv">https://truezip.    dev.java.net/</span>) eine sehr interessante Open-Source-Bibliothek, die die Behandlung von Archiven stark vereinfacht.</p><a id="mj7fca467b6415e4b9fe73aee4c8e16a50" name="mj7fca467b6415e4b9fe73aee4c8e16a50"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">17.8.2</span> Datenströme komprimieren  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Zum Packen und Entpacken von Strömen wird GZip verwendet. Wir sehen uns im Folgenden die Datenströme <span class="clisting">java.util.zip.GZIPInputStream</span> (ein spezieller <span class="clisting">FilterInputStream</span>) und <span class="clisting">java.util.zip.GZIPOutputStream</span> (ein <span class="clisting">FilterOutputStream</span>) genauer an.</p>
<div class="bildbox">
<p><a name="IDALPEZ"></a><a onClick="OpenWin('bilder/gzipxxxstreamuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleingzipxxxstreamuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<h4 class="t4">Daten packen</h4>
<p>Das Paket <span class="clisting">java.util.zip</span> bietet zwei Unterklassen von <span class="clisting">FilterOutputStream</span>, die das Schreiben komprimierter Daten ermöglichen: <span class="clisting">GZIPOutputStream</span> und <span class="clisting">ZipOutputStream</span>. Um Daten unter dem GZip-Algorithmus zu packen, müssen wir einfach einen vorhandenen Datenstrom zu einem <span class="clisting">GZIPOutputStream</span> erweitern. Die Klasse <span class="clisting">ZipOutputStream</span> dient Zip-Archiven, denen wir uns später widmen werden.</p>
<div class="listing"><pre class="prettyprint">OutputStream<span class="cfett"> fos</span>    = new FileOutputStream( file );
OutputStream zipout = new GZIPOutputStream(<span class="cfett"> fos</span> );</pre></div>
<div class="bildbox">
<p><a name="IDAEYEZ"></a><a onClick="OpenWin('bilder/365_java_12_009.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_12_009.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.zip.<span class="cfett">GZIPOutputStream</span>
extends DeflaterOutputStream</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">GZIPOutputStream( OutputStream out)</span>
Erzeugt einen packenden Datenstrom mit der voreingestellten Puffergröße von 512 Byte.</li>
</ul>
<ul class="gp">
<li><span class="clisting">GZIPOutputStream( OutputStream out, int size )</span>
Erzeugt einen packenden Datenstrom mit einem Puffer der Größe <span class="clisting">size</span>.</li>
</ul>
<h4 class="t4">GZip-Kommandozeilenprogramm</h4>
<p>Das folgende Programm soll eine Datei nach dem GZip-Format packen. Es verhält sich in der Arbeitsweise ähnlich wie das unter Unix bekannte Programm <span class="ckursiv">gzip</span>:</p>
<p class="tabunter"><strong>Listing 17.21    </strong>com/tutego/insel/io/zip/gzip.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.zip;

import java.io.*;
import java.util.zip.*;

public class gzip
{
  public static void main( String[] args )
  {
    if ( args.length != 1 ) {
      System.err.println( "Benutzung: gzip &lt;source&gt;" );
      return;
    }

    OutputStream os = null;
    InputStream  is = null;

    try
    {
      os = new GZIPOutputStream( new FileOutputStream( args[0] + ".gz" ) );
      is  = new FileInputStream( args[0] );

      byte[] buffer = new byte[ 8192 ];

      for ( int length; (length = is.read(buffer)) != &#8211;1; )
        os.write( buffer, 0, length );
    }
    catch ( IOException e )
    {
      System.err.println( "Fehler: Kann nicht packen " + args[0] );
    }
    finally
    {
      if ( is != null ) try { is.close(); } catch ( IOException e ) { }
      if ( os != null ) try { os.close(); } catch ( IOException e ) { <img src="common/umbruch.gif" border="0" alt="Umbruch">
        e.printStackTrace(); 
}
    }
  }
}</pre></div>
<p>Das Programm prüft zuerst, ob ein Argument auf der Kommandozeile vorhanden ist. Aus diesem Argument konstruiert es einen Dateinamen mit der Endung <span class="ckursiv">.gz</span>. Der Dateiname bekommt der Konstruktor von <span class="clisting">FileOutputStream</span>. Den <span class="clisting">OutputStream</span> dekoriert anschließend der <span class="clisting">GZIPOutputStream</span>. Die <span class="clisting">read()</span>-Methode vom <span class="clisting">FileInputStream</span> liest Block für Block aus der Datei und schreibt die gelesenen Segmente in den <span class="clisting">GZIPOutputStream</span>, der die Daten komprimiert.</p>
<h4 class="t4">Daten entpacken</h4>
<p>Um die Daten zu entpacken, müssen wir nur den umgekehrten Weg beschreiten. Zum Einsatz kommt hier eine der beiden Unterklassen von <span class="clisting">FilterInputStream</span>. Wieder wickeln wir um einen <span class="clisting">InputStream</span> einen <span class="clisting">GZIPInputStream</span> und lesen dann daraus.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.zip.<span class="cfett">GZIPInputStream</span>
extends InflaterInputStream</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">GZIPInputStream( InputStream in, int size )</span>
Erzeugt einen auspackenden Datenstrom mit einem Puffer der Größe <span class="clisting">size</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">GZIPInputStream( InputStream in )</span>
Erzeugt einen auspackenden Datenstrom mit der voreingestellten Puffergröße von 512 Byte.</li>
</ul>
<h4 class="t4">GunZip-Kommandozeilenprogramm</h4>
<p>Zum Java-Programm <span class="ckursiv">gzip</span> wollen wir eine zweite Anwendung hinzunehmen, die sich so verhält, wie das unter Unix bekannte Kommandozeilenprogramm <span class="ckursiv">gunzip</span>:</p>
<p class="tabunter"><strong>Listing 17.22    </strong>com/tutego/insel/io/zip/gunzip.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.zip;

import java.io.*;
import java.util.zip.*;

public class gunzip
{
  public static void main( String[] args )
  {
    if ( args.length != 1 ) {
      System.err.println( "Benutzung: gunzip &lt;source&gt;" );
      return;
    }

    String source, destination;

    if ( args[0].toLowerCase().endsWith(".gz") ) {
      source       = args[0];
      destination  = source.substring( 0, source.length() &#8211; 3 );
    }
    else {
      source       = args[0] + ".gz";
      destination  = args[0];
    }

    InputStream  is = null;
    OutputStream os = null;

    try
    {
      is = new GZIPInputStream( new FileInputStream(source) );
      os  = new FileOutputStream( destination );

      byte[] buffer = new byte[ 8192 ];

      for ( int length; (length = is.read(buffer)) != &#8211;1; )
        os.write( buffer, 0, length );
    }
    catch ( IOException e )
    {
      System.err.println( "Fehler: Kann nicht entpacken " + args[0] );
    }
    finally
    {
      if ( os != null ) try { os.close(); } catch ( IOException e ) { 
      e.printStackTrace(); 
}
      if ( is != null ) try { is.close(); } catch ( IOException e ) { 
      e.printStackTrace(); 
}
    }
  }
}</pre></div>
<p>Endet die Datei mit <span class="ckursiv">.gz</span>, so entwickeln wir daraus den herkömmlichen Dateinamen. Endet sie nicht mit diesem Suffix, so nehmen wir einfach an, dass die gepackte Datei diese Endung besitzt, der Benutzer dies aber nicht angegeben hat. Nach dem Zusammensetzen des Dateinamens holen wir von der gepackten Datei einen <span class="clisting">FileInputStream</span> und packen einen <span class="clisting">GZIPInputStream</span> darum. Nun öffnen wir die Ausgabedatei und schreiben in Blöcken zu 8 KiB die Datei vom <span class="clisting">GZIPInputStream</span> in die Ausgabedatei.</p><a id="mje0c8562dbd63f757609825045dddf21d" name="mje0c8562dbd63f757609825045dddf21d"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">17.8.3</span> Zip-Archive  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der Zugriff auf die Daten eines Zip-Archivs unterscheidet sich schon deshalb vom Zugriff auf die Daten eines GZip-Streams, weil diese in Form eines Archivs vorliegen. Unter Zip wird jede eingebettete Datei einzeln und unabhängig komprimiert. Wurden etwa über Tar vorher alle Dateien in ein unkomprimiertes Archiv übernommen, kann der Packalgorithmus GZip beim Packen dieser Dateisammlung bessere Ergebnisse erzielen, als wenn &#8211; wie beim Zip-Verfahren &#8211; alle Dateien einzeln gepackt würden.</p>
<h4 class="t4">Die Klassen »ZipFile« und »ZipEntry«</h4>
<p>Objekte der Klasse <span class="clisting">ZipFile</span> repräsentieren ein Zip-Archiv. Die Einträge im Zip-Archiv sind Dateien und Ordner, die Java durch die Klasse <span class="clisting">ZipEntry</span> darstellt. Liegt einmal ein <span class="clisting">ZipEntry</span>-Objekt vor, können ihm durch verschiedene Methoden Dateiattribute entlockt werden, beispielsweise die Originalgröße, das Kompressionsverhältnis, das Datum, wann die Datei angelegt wurde, und Weiteres. Auch kann ein Datenstrom erzeugt werden, sodass sich eine komprimierte Datei im Archiv lesen und schreiben lässt.</p>
<p>Um auf die Dateien eines Archivs zuzugreifen, muss zunächst ein <span class="clisting">ZipFile</span>-Objekt erzeugt werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.zip.<span class="cfett">ZipFile</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">ZipFile( String name ) throws ZipException, IOException
ZipFile( File file ) throws ZipException, IOException</span>
Öffnet ein Zip-Archiv zum Lesen über den Dateinamen oder das <span class="clisting">File</span>-Objekt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">ZipFile( File file, int mode ) throws ZipException, IOException</span>
Öffnet ein Zip-Archiv mit dem gegebenen <span class="clisting">File</span>-Objekt. Der Modus <span class="clisting">ZipFile.OPEN_READ</span> oder <span class="clisting">ZipFile.OPEN_READ|ZipFile.OPEN_DELETE</span> bestimmt den Zugriff auf das Archiv.</li>
</ul>
<p>Eine <span class="clisting">ZipException</span> ist eine Unterklasse von <span class="clisting">IOException</span>.</p>
<div class="bildbox">
<p><a name="IDARCFZ"></a><a onClick="OpenWin('bilder/zipfilezipentryuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinzipfilezipentryuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Die im Zip-Archiv abgelegten Dateien oder Verzeichnisse, also die <span class="clisting">ZipEntry</span>-Einträge, können auf zwei Arten ermittelt werden:</p>
<ul class="gp">
<li>Die Methode <span class="clisting">entries()</span> von <span class="clisting">ZipFile</span> liefert eine Aufzählung von <span class="clisting">ZipEntry</span>-Einträgen. Genauer gesagt ist der Rückgabetyp <span class="clisting">Enumeration&lt;? extends ZipEntry&gt;</span>.</li>
</ul>
<ul class="gp">
<li>Ist der Name der komprimierten Datei oder des Ordners bekannt, liefert <span class="clisting">getEntry(String)</span> sofort ein <span class="clisting">ZipEntry</span>-Objekt.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Iteriere durch die Einträge eines Archivs, und gib die Namen aus:</p>
<div class="listing"><pre class="prettyprint">ZipFile zf = new ZipFile( "foo.zip" );
for ( <span class="cfett">Enumeration&lt;? extends ZipEntry&gt; e = zf.entries()</span>; e.hasMoreElements(); )
{
  <span class="cfett">ZipEntry entry = e.nextElement()</span>;
  System.out.println( entry.getName() );
}</pre></div>
<p class="BStandard">Mit <span class="clisting">Collections.list()</span> lässt sich die Schleife mit einem erweiterten for verkürzen. Die folgenden Beispiele nutzen diese Möglichkeit.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.zip.<span class="cfett">ZipFile</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">ZipEntry getEntry( String name )</span>
Liefert eine Datei aus dem Archiv. Liefert <span class="clisting">null</span>, wenn kein Eintrag mit dem Namen existiert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Enumeration&lt;? extends ZipEntry&gt; entries()</span>
Gibt eine Aufzählung des Zip-Archivs in Form von <span class="clisting">ZipEntry</span>-Objekten zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getName()</span>
Liefert den Pfadnamen des Zip-Archivs.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int size()</span>
Gibt die Anzahl der Einträge im Zip-Archiv zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void close() throws IOException</span>
Schließt das Zip-Archiv.</li>
</ul>
<p>Eine <span class="clisting">IllegalStateException</span> ist bei <span class="clisting">getEntry()</span> und <span class="clisting">entries()</span> die Folge, wenn das Zip-Archiv schon geschlossen wurde.</p>
<h4 class="t4">Das Objekt »ZipEntry» und die Datei-Attribute</h4>
<p>Ein <span class="clisting">ZipEntry</span>-Objekt repräsentiert eine Datei oder ein Verzeichnis eines Archivs. Diese Datei kann gepackt (dafür ist die Konstante <span class="clisting">ZipEntry.DEFLATED</span> reserviert) oder auch ungepackt sein (angezeigt durch die Konstante <span class="clisting">ZipEntry.STORED</span>). Auf dem Objekt können verschiedene Attribute gesetzt und abgefragt werden. Dadurch lassen sich Statistiken über Kompressions-raten und Weiteres ermitteln:</p>
<p class="tabunter"><strong>Listing 17.23    </strong>com/tutego/insel/io/zip/ZipListDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">ZipFile zipFile = new ZipFile( file );
for ( ZipEntry entry : Collections.list( zipFile.entries() ) )
  System.out.printf( "%s%-54s   Größe: %6d   Gepackt: %6d   %tc%n",
                     entry.<span class="cfett">isDirectory()</span> ? "+" : " ",
                     entry.<span class="cfett">getName()</span>,
                     entry.<span class="cfett">getSize()</span>,
                     entry.<span class="cfett">getCompressedSize()</span>,
                     entry.<span class="cfett">getTime()</span> );</pre></div>
<p>Die Ausgabe könnte zum Beispiel sein:</p>
<div class="listing"><pre class="prettyprint">+a/                Größe:      0   Gepackt:      0   Do Mai 24 10:13:46 CEST 2007
 a/a.html          Größe:  42924   Gepackt:   6962   Do Mai 24 10:03:20 CEST 2007
 a/links.xml       Größe:  18900   Gepackt:   1406   Do Mai 24 10:03:20 CEST 2007</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.zip.<span class="cfett">ZipEntry</span>
implements Cloneable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String getName()</span>
Liefert den Namen des Eintrags.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void setTime( long time )</span>
Ändert die Modifikationszeit des Eintrags.</li>
</ul>
<ul class="gp">
<li><span class="clisting">long getTime()</span>
Liefert die Modifikationszeit des Eintrags oder &#8211;1, wenn diese nicht angegeben ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void setSize( long size )</span>
Setzt die Größe der unkomprimierten Datei. Wir werden mit einer <span class="clisting">IllegalArgumentException</span> bestraft, wenn die Größe kleiner 0 oder größer 0xFFFFFFFF ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">long getSize()</span>
Liefert die Größe der unkomprimierten Datei oder &#8211;1, falls diese unbekannt ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">long getCrc()</span>
Liefert die CRC-32-Checksumme der unkomprimierten Datei oder &#8211;1, falls diese unbekannt ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void setMethod( int method )</span>
Setzt die Kompressionsmethode entweder auf <span class="clisting">STORED</span> oder auf <span class="clisting">DEFLATED</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getMethod()</span>
Liefert die Kompressionsmethode. Die Rückgabe ist entweder <span class="clisting">STORED</span>, <span class="clisting">DEFLATED</span> oder &#8211;1, falls unbekannt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void setExtra( byte[] extra )</span>
Setzt das optionale Zusatzfeld für den Eintrag. Übersteigt die Größe des Zusatzfelds 0xFFFF Byte, dann wird eine <span class="clisting">IllegalArgumentException</span> ausgelöst.</li>
</ul>
<ul class="gp">
<li><span class="clisting">byte[] getExtra()</span>
Liefert das Extrafeld oder <span class="clisting">null</span>, falls es nicht belegt ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void setComment( String comment )</span>
Setzt einen Kommentar-String, der 0xFFFF Zeichen lang sein darf (sonst wird eine <span class="clisting">IllegalArgumentException</span> ausgelöst).</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getComment()</span>
Gibt den Kommentar oder <span class="clisting">null</span> zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">long getCompressedSize()</span>
Liefert die Dateigröße nach dem Komprimieren oder &#8211;1, falls diese unbekannt ist. Ist der Kompressionstyp <span class="clisting">ZipEntry.STORED</span>, dann stimmt diese Größe natürlich mit dem Rückgabewert von <span class="clisting">getSize()</span> überein.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isDirectory()</span>
Liefert <span class="clisting">true</span>, falls der Eintrag ein Verzeichnis ist. Der Name der Datei endet mit einem Slash (<span class="clisting">/</span>).</li>
</ul>
<p>Auch überschreibt <span class="clisting">ZipEntry</span> die Methoden <span class="clisting">toString()</span>, <span class="clisting">hashCode()</span> und <span class="clisting">clone()</span> aus <span class="clisting">Object</span>.</p>
<h4 class="t4">Dateien auspacken</h4>
<p>Um Dateien auszupacken, bietet die Java-Bibliothek zwei Möglichkeiten. Die erste ist, mittels <span class="clisting">getInputStream(ZipEntry)</span> ein <span class="clisting">InputStream</span>-Objekt zu holen und dann auf den Inhalt der Datei zuzugreifen (es ist bemerkenswert, dass <span class="clisting">getInputStream()</span> keine Methode von <span class="clisting">ZipEntry</span> ist, sondern von <span class="clisting">ZipFile</span>). Die andere Variante arbeitet über <span class="clisting">ZipInputStream</span>, einen Weg, den wir hier nicht weiter beschreiben.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Liegt im Archiv <span class="ckursiv">moers.zip</span> die gepackte Datei <span class="ckursiv">DerAlteSack.png</span>, dann gelangen wir mit folgenden Zeilen an deren entpackten Inhalt:</p>
<div class="listing"><pre class="prettyprint">ZipFile     zipFile = new ZipFile( "moers.zip" );
ZipEntry    <span class="cfett">entry</span>   = zipFile.getEntry( "DerAlteSack.png" );
InputStream is      = zipFile.getInputStream( <span class="cfett">entry</span> );</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.util.zip.<span class="cfett">ZipFile</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">InputStream getInputStream( ZipEntry entry ) throws IOException</span>
Gibt einen Eingabestrom zurück, mit dem auf den Inhalt einer Datei zugegriffen werden kann. Es folgt eine <span class="clisting">IllegalStateException</span>, wenn das Zip-Archiv schon geschlossen wurde.</li>
</ul>
<h4 class="t4">Ein Archiv Datei für Datei entpacken</h4>
<p>Damit ein Java-Programm das gesamte Zip-Archiv entpackt, lässt sich mit der Aufzählung von <span class="clisting">entries()</span> durch das Archiv laufen und für jeden Eintrag eine Datei oder ein Verzeichnis erzeugen. Das Speichern soll eine eigene Methode <span class="clisting">extractEntry(ZipFile, ZipEntry, String)</span> übernehmen, die zunächst erkennt, ob es sich bei der Datei im Zip-Archiv um ein Verzeichnis handelt oder nicht:</p>
<ul class="gp">
<li>Liefert das <span class="clisting">ZipEntry</span>-Objekt bei <span class="clisting">isDirectory()</span> ein <span class="clisting">true</span>, dann legen wir nur einen Ordner mittels <span class="clisting">mkdirs()</span> an und keine Datei.</li>
</ul>
<ul class="gp">
<li>Steht das <span class="clisting">ZipEntry</span> für eine Datei, kann diese in einem Unterordner stehen, und es müssen ebenfalls die nötigen Ordner angelegt werden. Nachdem für ein Ziel ein <span class="clisting">FileOutputStream</span> angelegt wurde, lassen sich alle <span class="clisting">ZipFile</span>-Bytes von <span class="clisting">getInputStream(ZipEntry)</span> kopieren:</li>
</ul>
<p class="tabunter"><strong>Listing 17.24    </strong>com/tutego/insel/io/zip/unzip.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.zip;

import java.util.zip.*;
import java.io.*;
import java.util.*;

public class unzip
{
  private static final byte[] buffer = new byte[ 0xFFFF ];

  public static void main( String[] args )
  {
    if ( args.length != 2 )
      System.out.println( "Benutzung: unzip &lt;zipfile&gt; &lt;destination&gt;" );
    else
    {
      try
      {
        ZipFile zipFile = new ZipFile( args[0] );
        for ( ZipEntry entry : Collections.list( zipFile.entries() ) )
        {
          System.out.print( entry.getName() + "." );
          extractEntry( zipFile, entry, args[1] );
          System.out.println( ".. entpackt" );
        }
      }
      catch ( FileNotFoundException e )
      {
        System.err.println( "Fehler: ZipFile nicht gefunden!" );
      }
      catch ( IOException e )
      {
        System.err.println( "Fehler: Allgemeiner Ein-/Ausgabefehler!" );
      }
    }
  }

  private static void extractEntry( ZipFile zipFile, ZipEntry entry, String destDir )
    throws IOException
  {
    File file = new File( destDir, entry.getName() );

    if ( entry.isDirectory() )
      file.mkdirs();
    else
    {
      new File( file.getParent() ).mkdirs();

      InputStream  is = null;
      OutputStream os = null;

      try
      {
        is = zipFile.getInputStream( entry );
        os = new FileOutputStream( file );

        for ( int len; (len = is.read(BUFFER)) != &#8211;1; )
          os.write( BUFFER, 0, len );
      }
      finally
      {
        if ( os != null ) os.close();
        if ( is != null ) is.close();
      }
    }
  }
}</pre></div>
<h4 class="t4">Einträge dem Zip-Archiv hinzufügen</h4>
<p>Das Hinzufügen von Dateien zu einem Zip-Archiv unterscheidet sich ein wenig vom Lesen der Dateien, da hier die Klasse <span class="clisting">ZipFile</span> nicht benötigt wird. Im Mittelpunkt steht die Klasse <span class="clisting">ZipOutputStream</span> mit zwei Schritten:</p>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>1.</strong></td>
<td valign="top" width="100%" align="left"> Ein ZipOutputStream wird aufgebaut, etwa über new ZipOutputStream(new FileOutputStream(zipfile).</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>2.</strong></td>
<td valign="top" width="100%" align="left"> new ZipEntry(String) oder new ZipEntry(ZipEntry) erzeugt einen Archiv-Eintrag, und putNextEntry(ZipEntry) verbindet diesen mit dem ZipOutputStream. Nach dem Schreiben schließt closeEntry() das Hinzufügen ab.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<p>Erzeugt <span class="clisting">ZipOutputStream</span> eine Datei, lässt sich die Kompressionsrate über die Methode <span class="clisting">setLevel(int)</span> einstellen. Der Level ist eine Zahl zwischen 0 und 9. Die Kompression übernimmt ein <span class="clisting">Deflater</span>-Objekt, das im <span class="clisting">DeflaterOutputStream</span> (die Oberklasse von <span class="clisting">ZipOutputStream</span>) verwaltet wird. So ruft <span class="clisting">ZipOutputStream</span> lediglich vom <span class="clisting">Deflater</span> die Methode <span class="clisting">setLevel()</span> auf.</p><a id="mjd663fcaaa21f8f86000c0a811e58b9f1" name="mjd663fcaaa21f8f86000c0a811e58b9f1"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">17.8.4</span> Jar-Archive  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Jar-Archive sind mit Zip-Archiven vergleichbar, mit dem Unterschied, dass sie eine Manifest-Datei beinhalten. Die Arbeitsweise und der Zugriff auf die Einträge sind daher denen der Zip-Dateien sehr ähnlich. Die Klasse <span class="clisting">java.util.jar.JarFile</span> repräsentiert ein Jar-Archiv, und ein <span class="clisting">java.util.jar.JarEntry</span> ist ein Eintrag in dem Archiv. <span class="clisting">JarFile</span> ist eine Unterklasse von <span class="clisting">ZipFile</span> und <span class="clisting">JarEntry</span> eine Unterklasse von <span class="clisting">ZipEntry</span>.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="17.8 Datenkompression *"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_17_007.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_17_009.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
