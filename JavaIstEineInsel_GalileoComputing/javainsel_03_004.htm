<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 3.4 Neue Objekte erzeugen</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 3.4 Neue Objekte erzeugen">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 3.4 Neue Objekte erzeugen">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navh" href="##mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_03_003.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_03_005.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf" class="navnav">3 Klassen und Objekte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_001.htm#mj14adccb998e49849e4cf60fea8a67179" class="navnav">3.1 Objektorientierte Programmierung (OOP)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_001.htm#mjb0eec540c2ccdc740aab19214a1f693f" class="navnav">3.1.1 Warum überhaupt OOP?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_001.htm#mj69adbf2f11e355d1e7d031e8ad309320" class="navnav">3.1.2 Denk ich an Java, denk ich an Wiederverwendbarkeit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_002.htm#mj5b619d9f15dfdb8c74f6dd581e8ae52e" class="navnav">3.2 Eigenschaften einer Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_002.htm#mj6d290cc6103e146af08763c9458a4f6e" class="navnav">3.2.1 Die Klasse Point</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_003.htm#mj120069350af17581cd54657a662eac08" class="navnav">3.3 Die UML (Unified Modeling Language) *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_003.htm#mj4a927ff99dbea7d0e3cc439fffbcbad4" class="navnav">3.3.1 Hintergrund und Geschichte zur UML</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_003.htm#mjfc37567f1830529a886ff45e660849f1" class="navnav">3.3.2 Wichtige Diagrammtypen der UML</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_003.htm#mj2cb798ef9fd7e336d385ba789fb4c16f" class="navnav">3.3.3 UML-Werkzeuge</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj188cb023a2e250d061fbf7c4d5c358e2" class="navh">3.4 Neue Objekte erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjfb7e8fdd741bd1a69915f536838150a6" class="navh">3.4.1 Ein Exemplar einer Klasse mit dem new-Operator anlegen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc322bfcdc7b9d9ca13c2f7fea535fac3" class="navh">3.4.2 Garbage-Collector (GC) &#8211; Es ist dann mal weg</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj8e78f63eedef225017005b13f5547df6" class="navh">3.4.3 Deklarieren von Referenzvariablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj0b5cf146c1b62f723db236bd7ebc5245" class="navh">3.4.4 Zugriff auf Variablen und Methoden mit dem ».«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja82dea77b8e3be5715de3f263f3f1798" class="navh">3.4.5 Konstruktoren nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_005.htm#mjaf1a068d749bd6f94d968e3de46e70dc" class="navnav">3.5 Mit Referenzen arbeiten, Identität und Gleichheit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_005.htm#mj21b86db09c28ddf9b92b692620c00cdb" class="navnav">3.5.1 Die null-Referenz</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_005.htm#mj5b75348c12a8a76224c3a28c7148b211" class="navnav">3.5.2 null-Referenzen testen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_005.htm#mj095218f6687d829b7b8cbf2f5dca4bf5" class="navnav">3.5.3 Zuweisungen bei Referenzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_005.htm#mj6fe8d2344da520f9a0e1f3d482613f14" class="navnav">3.5.4 Methoden mit nicht-primitiven Parametern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_005.htm#mj5ce8c0d2c9d1e78654a284dc9d91dacd" class="navnav">3.5.5 Identität von Objekten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_005.htm#mj4e22a27f86fe89bff20e4581e87c5c65" class="navnav">3.5.6 Gleichheit und die Methode »equals()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_006.htm#mjcb5ba14934515b667f05cac0be6da85b" class="navnav">3.6 Kompilationseinheiten, Imports und Pakete schnüren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj5d25bb73620d12f4c40fc1e7ff537fad" class="navnav">3.6.1 Volle Qualifizierung und import-Deklaration</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mjf76adfcb77237accb6dd9a07caca8ed8" class="navnav">3.6.2 Mit import p1.p2.* alle Typen eines Pakets erreichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj1e65252e2f478166362e30ea3f74c456" class="navnav">3.6.3 Hierarchische Strukturen über Pakete</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj69f88a3bc5adac9bede26abe6fa3c166" class="navnav">3.6.4 Die package-Deklaration</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj36d2326bddd0f478fa0882b5a27d6230" class="navnav">3.6.5 Unbenanntes Paket (default package)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj929793f794e65ac195413a8ba075bac3" class="navnav">3.6.6 Klassen mit gleichen Namen in unterschiedlichen Paketen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj2fa9205c29a0f239d6e8fcb591e3be3e" class="navnav">3.6.7 Compilationseinheit (Compilation Unit)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj6dc709bf9e6ebef1937ea0c49e6585a2" class="navnav">3.6.8 Statischer Import</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_006.htm#mj3931543d527206ffd3e586ef443e087b" class="navnav">3.6.9 Eine Verzeichnisstruktur für eigene Projekte *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_007.htm#mj11a4689950bdbe50e0c6342eb22737a6" class="navnav">3.7 Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj23a745f6df230125f0760b9755f8996e" class="navnav">3.7.1 Deklaration von Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mjc64e20fbebf1d1caf31860939b5d54eb" class="navnav">3.7.2 Arrays mit Inhalt</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj1f442b91fd4893d74e1fff78ea7a8b76" class="navnav">3.7.3 Die Länge eines Arrays über das Attribut length auslesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mjd5d447739968e0cd80112c7eb6cbbb3e" class="navnav">3.7.4 Zugriff auf die Elemente über den Index</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj5cde73b74f5421b00c5119616a69ac0b" class="navnav">3.7.5 Array-Objekte mit new erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj7d78b8e145bd133cc355b5ccd3e276b9" class="navnav">3.7.6 Fehler bei Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mja25a7f5d459dfc1dc052d23b42c40371" class="navnav">3.7.7 Die erweiterte for-Schleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj96f432d89b981f10f8c3be24373779ec" class="navnav">3.7.8 Arrays mit nicht-primitiven Elementen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj2627223aa77094452c665b55e7640b8b" class="navnav">3.7.9 Mehrdimensionale Arrays *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj7100c45624457324338529ef85e21324" class="navnav">3.7.10 Vorinitialisierte Arrays *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj83719cf25a616582d6a0ae43dc356cc6" class="navnav">3.7.11 Mehrere Rückgabewerte *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj7da5fd18833c690818519a0c82e8be6e" class="navnav">3.7.12 Methode mit variabler Argumentanzahl (Vararg)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mjd0a6c6bf70eb16174a7c44411d2afbf4" class="navnav">3.7.13 Klonen kann sich lohnen &#8211; Arrays vermehren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mja91938f74923b4f8ab51724e9530e8cb" class="navnav">3.7.14 Feldinhalte kopieren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_007.htm#mj84d959216ad1aa6d5c9ccf5c270e4545" class="navnav">3.7.15 Die Klasse Arrays zum Vergleichen, Füllen und Suchen nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_008.htm#mj7795b13ad8d0d5a6aef1cfcc54ae1245" class="navnav">3.8 Der Einstiegspunkt für das Laufzeitsystem: »main()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_008.htm#mj1f3849b282fa092f3e15359abec6f7ed" class="navnav">3.8.1 Kommandozeilenargumente verarbeiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_008.htm#mj9236ac97667f672f1ca5bc79ac371e3f" class="navnav">3.8.2 Der Rückgabewert von »main()« und »System.exit()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_009.htm#mj670406e2fdaac338f8527952d3305745" class="navnav">3.9 Annotationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_03_009.htm#mj118f79ae762b7f700a379a4588737dd0" class="navnav">3.9.1 Annotationstypen @Override, @Deprecated, @SuppressWarnings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_03_010.htm#mj4c916b181f9b9d4767c8acb844fe8bf8" class="navnav">3.10 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mj188cb023a2e250d061fbf7c4d5c358e2" name="mj188cb023a2e250d061fbf7c4d5c358e2"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">3.4</span> Neue Objekte erzeugen  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Eine Klasse beschreibt also, wie ein Objekt aussehen soll. In einer Mengen- beziehungsweise Element-Beziehung ausgedrückt, entsprechen Objekte den Elementen und Klassen den Mengen, in denen die Objekte als Elemente enthalten sind. Diese Objekte haben Eigenschaften, die sich nutzen lassen. Wenn ein Punkt Koordinaten repräsentiert, wird es Möglichkeiten geben, diese Zustände zu erfragen und zu ändern.</p>
<p>Im Folgenden wollen wir untersuchen, wie sich von der Klasse <span class="clisting">Point</span> zur Laufzeit Exemplare erzeugen lassen und wie der Zugriff auf die Eigenschaften der <span class="clisting">Point</span>-Objekte aussieht.</p><a id="mjfb7e8fdd741bd1a69915f536838150a6" name="mjfb7e8fdd741bd1a69915f536838150a6"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">3.4.1</span> Ein Exemplar einer Klasse mit dem new-Operator anlegen  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Objekte müssen in Java immer ausdrücklich erzeugt werden. Dazu definiert die Sprache den <span class="clisting">new</span>-Operator.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Anlegen eines Punkt-Objekts:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">new</span> java.awt.Point();</pre></div>
</td>
</tr>
</table><br><p>Hinter dem <span class="clisting">new</span>-Operator folgt der Name der Klasse, von der ein Exemplar erzeugt werden soll. Der Klassenname ist hier voll qualifiziert angegeben, da sich <span class="clisting">Point</span> in einem Paket <span class="clisting">java.awt</span> befindet. (Ein Paket ist eine Gruppe zusammengehöriger Klassen. Wir werden später bei den <span class="clisting">import</span>-Deklarationen sehen, dass Entwickler diese Schreibweise auch abkürzen können.) Hinter dem Klassennamen folgt ein Paar runder Klammern für den <span class="ckursiv">Konstruktoraufruf</span>. Dieser ist eine Art Methodenaufruf, über den sich Werte für die Initialisierung des frischen Objekts übergeben lassen.</p>
<p>Konnte die Speicherverwaltung von Java für das anzulegende Objekt freien Speicher reservieren und konnte der Konstruktor gültig durchlaufen werden, gibt der <span class="clisting">new</span>-Ausdruck anschließend eine Referenz auf das frische Objekt an das Programm zurück.</p>
<h4 class="t4">Der Zusammenhang von new, Heap und Garbage-Collector</h4>
<p>Bekommt das Laufzeitsystem die Anfrage, ein Objekt mit <span class="clisting">new</span> zu erzeugen, so reserviert es so viel Speicher, dass alle Objekteigenschaften und Verwaltungsinformationen dort Platz finden. Ein <span class="clisting">Point</span>-Objekt speichert die Koordinaten in zwei <span class="clisting">int</span>-Werte, also sind mindestens 2 mal 4 Byte nötig. Den Speicherplatz nimmt die Laufzeitumgebung vom <span class="ckursiv">Heap</span>. Der hat eine vordefinierte Maximalgröße (standardmäßig 64 MiB), damit ein Java-Programm nicht beliebig viel Speicher vom Betriebssystem abgreifen kann, was die Maschine möglicherweise in den Ruin treibt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Es gibt in Java nur wenige Sonderfälle, wann neue Objekte nicht über den <span class="clisting">new</span>-Operator angelegt werden. So erzeugt die auf nativem Code basierende Methode <span class="clisting">newInstance()</span> vom <span class="clisting">Class</span>- oder <span class="clisting">Constructor</span>-Objekt ein neues Objekt. Auch <span class="clisting">clone()</span> kann ein neues Objekt als Kopie eines anderen Objekts erzeugen. Bei der String-Konkatenation mit <span class="clisting">+</span> ist für uns zwar kein <span class="clisting">new</span>-Operator zu sehen, doch der Compiler wird ein <span class="clisting">new</span> einsetzen, um das neue String-Objekt anzulegen.[Der Compiler generiert selbstständig zum Beispiel beim Ausdruck <span class="clisting">s + t</span> einen Ausdruck wie <span class="clisting">new StringBuilder().append(s).append(t).toString()</span>.]</p>
</td>
</tr>
</table><br><p>Ist das System nicht in der Lage, genügend Speicher für ein neues Objekt bereitzustellen, versucht der Garbage-Collector in einer letzten Rettungsaktion, alles wegzuräumen. Ist dann immer noch nicht ausreichend Speicher frei, generiert die Laufzeitumgebung einen <span class="clisting">OutOfMemoryError</span> und bricht die Abarbeitung ab.</p>
<h4 class="t4">Heap und Stack</h4>
<p>Die JVM-Spezifikation sieht für Daten fünf verschiedene Speicherbereiche (engl. <span class="ckursiv">runtime data area</span>) vor. [§ 3.5 der JVM-Spezifikation, siehe Seite: <span class="ckursiv"><a href="http://java.sun.com/docs/books/jvms/second_edition/html/Overview.doc.html#1732" target="_blank">http://java.sun.com/docs/books/jvms/second_edition/html/Overview.doc.html#1732</a></span>
]  Neben dem <span class="ckursiv">Heap-Speicher</span> wollen wir uns den <span class="ckursiv">Stack-Speicher</span> (Stapelspeicher) kurz anschauen. Den nutzt die Java-Laufzeitumgebung zum Beispiel für lokale Variablen. Auch verwendet Java den Stack beim Methodenaufruf mit Parametern. Die Argumente kommen vor dem Methodenaufruf auf den Stapel, und die aufgerufene Methode kann über den Stack auf die Werte lesend oder schreibend zugreifen. Bei endlosen rekursiven Methodenaufrufen ist irgendwann die maximale Stackgröße erreicht, und es kommt zu einer Exception vom Typ <span class="clisting">java.lang.StackOverflowError</span>. Da mit jedem Thread ein JVM-Stack assoziiert ist, bedeutet das das Ende des Threads.</p><a id="mjc322bfcdc7b9d9ca13c2f7fea535fac3" name="mjc322bfcdc7b9d9ca13c2f7fea535fac3"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">3.4.2</span> Garbage-Collector (GC) &#8211; Es ist dann mal weg  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wird das Objekt nicht mehr vom Programm referenziert, so bemerkt dies der Garbage-Collector (GC) und gibt den reservierten Speicher wieder frei. [Mit dem gesetzten <span class="clisting">java</span>-Schalter <span class="clisting">-verbose:gc</span> gibt es immer Konsolenausgaben, wenn der GC nicht mehr referenzierte Objekte erkennt und wegräumt.
]  Der GC testet dazu regelmäßig, ob die Objekte auf dem Heap noch benötigt werden. Werden sie nicht benötigt, werden sie gelöscht. Es weht also immer ein Hauch von Friedhof über dem Heap, und nachdem die letzte Referenz vom Objekt genommen wird, ist es auch schon tot.</p><a id="mj8e78f63eedef225017005b13f5547df6" name="mj8e78f63eedef225017005b13f5547df6"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">3.4.3</span> Deklarieren von Referenzvariablen  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Das Ergebnis des <span class="clisting">new</span>-Operators ist eine Referenz auf das neue Objekt. Die Referenz wird in der Regel in einer <span class="ckursiv">Referenzvariablen</span> zwischengespeichert, um fortlaufende Eigenschaften vom Objekt nutzen zu können.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Deklariere die Variable <span class="clisting">p</span> vom Typ <span class="clisting">java.awt.Point</span>. Die Variable <span class="clisting">p</span> nimmt anschließend die Referenz von dem neuen Objekt auf, das mit <span class="clisting">new</span> angelegt wurde.</p>
<div class="listing"><pre class="prettyprint">java.awt.Point p;
p = new java.awt.Point();</pre></div>
</td>
</tr>
</table><br><p>Die Deklaration und die Initialisierung einer Referenzvariablen lassen sich kombinieren (auch eine lokale Referenzvariable ist zu Beginn uninitialisiert):</p>
<div class="listing"><pre class="prettyprint">java.awt.Point p = new java.awt.Point();</pre></div>
<p>Die Typen müssen natürlich kompatibel sein, und ein Haus-Objekt geht nicht vom Typ einer Socke durch. Der Versuch, ein Punktobjekt einer <span class="clisting">int</span>- oder <span class="clisting">String</span>-Variablen zuzuweisen, ergibt somit einen Compilerfehler.</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">int</span>    p = new<span class="cfett"> java.awt.Point</span>(); // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> Type mismatch: cannot convert from Point to int<span class="cfett">
String</span> s = new<span class="cfett"> java.awt.Point</span>(); // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> Type mismatch: cannot convert from Point to String</pre></div>
<p>Damit speichert eine Variable entweder einen einfachen Wert (Variable vom Typ <span class="clisting">int</span>, <span class="clisting">boolean</span>, <span class="clisting">double</span> …) oder einen Verweis auf ein Objekt. Referenztypen gibt es in drei Ausführungen: <span class="ckursiv">Klassentypen</span>, <span class="ckursiv">Schnittstellentypen</span> (auch <span class="ckursiv">Interface-Typen</span> genannt) und <span class="ckursiv">Feldtypen</span> (auch <span class="ckursiv">Array-Typen</span> genannt). In unserem Fall haben wir ein Beispiel für einen Klassentyp.</p>
<p><div class="eclipse"><img src="common/eclipseicon.gif" align="top" width="53" height="23" alt="Eclipse" title="Eclipse"></div>
    <span class="tastenkappe">Strg</span>
  +
    <span class="tastenkappe">1</span>
   ermöglicht es, entweder eine neue lokale Variable oder eine Objektvariable für den Ausdruck anzulegen.</p>
<div class="bildbox">
<p><a name="IDARYKV"></a><a onClick="OpenWin('bilder/365_java_03_003.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_03_003.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><a id="mj0b5cf146c1b62f723db236bd7ebc5245" name="mj0b5cf146c1b62f723db236bd7ebc5245"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">3.4.4</span> Zugriff auf Variablen und Methoden mit dem ».«  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die in einer Klasse deklarierten Variablen heißen <span class="ckursiv">Objektvariablen</span> beziehungsweise <span class="ckursiv">Exemplar</span><span class="ckursiv">-, Instanz</span><span class="ckursiv">-</span> oder <span class="ckursiv">Ausprägungsvariablen</span>. Wird ein Objekt geschaffen, dann erhält es seinen eigenen Satz von Objektvariablen. [Es gibt auch den Fall, dass sich mehrere Objekte eine Variable teilen, so genannte statische Variablen. Diesen Fall werden wir später betrachten.
]  Sie bilden den Zustand des Objekts.</p>
<p>Der Punkt-Operator ».« erlaubt auf Objekten den Zugriff auf die Methoden oder Variablen. Er steht zwischen einem Ausdruck, der eine Referenz liefert, und der Objekteigenschaft. Welche Möglichkeiten eine Klasse genau bietet, erfahren Sie in der API-Dokumentation.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Die Variable <span class="clisting">p</span> referenziert ein <span class="clisting">java.awt.Point</span>-Objekt. Die Objektvariablen <span class="clisting">x</span> und <span class="clisting">y</span> sollen initialisiert werden:</p>
<div class="listing"><pre class="prettyprint">java.awt.Point p = new java.awt.Point();
p<span class="cfett">.x</span> = 1;
p<span class="cfett">.y</span> = 2 + p<span class="cfett">.x</span>;</pre></div>
</td>
</tr>
</table><br><p><div class="eclipse"><img src="common/eclipseicon.gif" align="top" width="53" height="23" alt="Eclipse" title="Eclipse"></div>
    <span class="tastenkappe">Strg</span>
  + Leertaste zeigt an, welche Eigenschaften eine Referenz ermöglicht. Eine Auswahl mit 
    <span class="tastenkappe">Enter</span>
   wählt die Eigenschaft aus und setzt insbesondere bei Methoden den Cursor zwischen das Klammerpaar.</p>
<div class="bildbox">
<p><a name="IDAY0KV"></a><a onClick="OpenWin('bilder/365_java_03_004.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_03_004.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Ein Methodenaufruf gestaltet sich genauso einfach wie ein Variablenzugriff. Hinter dem Ausdruck mit der Referenz folgt nach dem Punkt der Methodenname.</p>
<p>Das folgende Beispiel erzeugt einen Punkt, belegt ihn mit Werten und gibt eine String-Repräsentation des Objekts aus:</p>
<p class="tabunter"><strong>Listing 3.1    </strong>MyPoint.java</p>
<div class="listing"><pre class="prettyprint">class MyPoint
{
  public static void main( String[] args )
  {
    java.awt.Point p = new java.awt.Point();
    p<span class="cfett">.x</span> = p<span class="cfett">.y</span> = 12;
    p<span class="cfett">.translate</span>( &#8211;3, 2 );

    java.awt.Point q = new java.awt.Point();
    q<span class="cfett">.setLocation</span>( 10, 100 );

    System.out.println( p<span class="cfett">.toString</span>() );   // java.awt.Point[x=9,y=14]
    System.out.println( q<span class="cfett">.toString</span>() );   // java.awt.Point[x=10,y=100]
  }
}</pre></div>
<p>Im ersten Fall belegen wir die Variablen <span class="clisting">x</span>, <span class="clisting">y</span> explizit und verschieben dann mit <span class="clisting">translate()</span> die Koordinaten um <span class="clisting">&#8211;3, 2</span>. Die Methode verändert die Zustände, was das spätere <span class="clisting">toString()</span> anschaulich zeigt. Im zweiten Fall setzen wir nicht direkt die Objektzustände über die Variablen, sondern verändern die Zustände über die Methode <span class="clisting">setLocation()</span>. Die beiden Objekte besitzen eigene Koordinaten und kommen sich nicht in die Quere.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Anstatt für die Ausgabe explizit <span class="clisting">println(obj.toString())</span> aufzurufen, funktioniert auch ein <span class="clisting">println(obj)</span>. Das liegt daran, dass die Signatur <span class="clisting">println(Object)</span> jedes beliebige Objekt als Argument akzeptiert und auf diesem Objekt automatisch die <span class="clisting">toString()</span>-Methode aufruft.</p>
</td>
</tr>
</table><br><div class="bildbox">
<p><a name="IDAF3KV"></a><a onClick="OpenWin('bilder/mypointusespoint.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinmypointusespoint.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 3.2    </strong>Die Abhängigkeit, dass MyPoint einen java.awt.Point nutzt, zeigt das UML-Diagramm mit einer gestrichelten Linie an. Parameterliste und Rückgabe sind in UML optional und hier nicht dargestellt.</p>
<p><div class="eclipse"><img src="common/eclipseicon.gif" align="top" width="53" height="23" alt="Eclipse" title="Eclipse"></div>
    <span class="tastenkappe">Strg</span>
   + Leertaste auf einem Eigenschaftennamen (oder bei einer Methode im Klammerpaar) zeigt die API-Dokumentation in einem kleinen Fenster an.</p>
<div class="bildbox">
<p><a name="IDAM3KV"></a><a onClick="OpenWin('bilder/365_java_03_005.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_03_005.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<h4 class="t4">Nach dem Punkt geht&#8217;s weiter</h4>
<p>Die Methode <span class="clisting">toString()</span> liefert als Ergebnis ein <span class="clisting">String</span>-Objekt, das den Zustand des Punkts preisgibt:</p>
<div class="listing"><pre class="prettyprint">java.awt.Point  p = new java.awt.Point();
String          s = p.toString();
System.out.println( s );                     // java.awt.Point[x=0,y=0]</pre></div>
<p>Das <span class="clisting">String</span>-Objekt besitzt selbst wieder Methoden. Eine davon ist <span class="clisting">length()</span>, die die Länge der Zeichenkette liefert:</p>
<div class="listing"><pre class="prettyprint">System.out.println( s.length() );            // 23</pre></div>
<p>Das Erfragen des <span class="clisting">String</span>-Objekts und seiner Länge können wir zu einer Anweisung verbinden &#8211; <span class="clisting">p</span> sei wieder unser <span class="clisting">Point</span>-Objekt:</p>
<div class="listing"><pre class="prettyprint">System.out.println(<span class="cfett"> p.toString().length()</span> ); // 23</pre></div>
<h4 class="t4">Objekterzeugung ohne Variablenzuweisung</h4>
<p>Bei der Nutzung von Objekteigenschaften muss der Typ links vom Punkt immer eine Referenz sein:</p>
<div class="listing"><pre class="prettyprint">System.out.println( new Point()<span class="cfett">.toString().length()</span> ); // 23</pre></div>
<div class="bildbox">
<p><a name="IDAR4KV"></a><a onClick="OpenWin('bilder/pointstringinttype.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinpointstringinttype.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Im Prinzip funktioniert auch Folgendes:</p>
<div class="listing"><pre class="prettyprint">new java.awt.Point()<span class="cfett">.x</span> = 1;</pre></div>
<p>Dies ist hier allerdings unsinnig, da zwar das Objekt erzeugt und ein Attribut gesetzt wird, anschließend das Objekt aber für den Garbage-Collector wieder Freiwild ist. Interessant ist die Anwendung zum Beispiel bei einem <span class="clisting">File</span>-Objekt, um etwa herauszufinden, wie groß eine Datei ist:</p>
<div class="listing"><pre class="prettyprint">long size =<span class="cfett"> new java.io.File( "file.txt" )</span>.length();</pre></div><a id="mja82dea77b8e3be5715de3f263f3f1798" name="mja82dea77b8e3be5715de3f263f3f1798"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">3.4.5</span> Konstruktoren nutzen  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Werden Objekte mit dem <span class="clisting">new</span>-Operator angelegt, so wird ein Konstruktor aufgerufen, eine Art Methode mit besonderer Signatur. [Ein Konstruktor hat keinen Rückgabetyp und trägt auch denselben Namen wie die Klasse.
]  Beim Anlegen eines Objekts sollen in der Regel die Objektvariablen initialisiert werden. Diese Initialisierung wird dazu in den Konstruktor gesetzt, um sicherzustellen, dass das neue Objekt einen sinnvollen Anfangszustand aufweist.</p>
<p>Ein Konstruktor ohne Argumente ist der <span class="ckursiv">Standard-Konstruktor</span> (auch <span class="ckursiv">Default-Konstruktor</span>, selten auch <span class="ckursiv">No-Arg-Konstruktor</span> genannt).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Die folgenden Zeilen erzeugen schlussendlich drei <span class="clisting">Point</span>-Objekte mit denselben Koordinaten. Die Variablen <span class="clisting">p1</span>, <span class="clisting">p2</span> und <span class="clisting">p3</span> referenzieren jedoch immer neue Objekte; lediglich die Belegung der x- und y-Koordinaten ist bei den drei Objekten gleich:</p>
<div class="listing"><pre class="prettyprint">java.awt.Point p1 = <span class="cfett">new java.awt.Point()</span>;
p1.setLocation( 10, 10 );
System.out.println( p1 );  // java.awt.Point[x=10,y=10]
java.awt.Point p2 = <span class="cfett">new java.awt.Point( 10, 10 )</span>;
System.out.println( p2 );  // java.awt.Point[x=10,y=10]
java.awt.Point p3 = <span class="cfett">new java.awt.Point( p2 )</span>;
System.out.println( p3 );  // java.awt.Point[x=10,y=10]</pre></div>
<p class="BStandard">Der erste Konstruktor ist der Standard-Konstruktor, der zweite und dritte sind parametrisierte Konstruktoren.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="3.4 Neue Objekte erzeugen"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_03_003.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_03_005.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
