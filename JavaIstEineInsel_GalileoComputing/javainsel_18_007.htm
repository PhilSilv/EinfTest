<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 18.7 XML-Dateien mit JDOM verarbeiten</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 18.7 XML-Dateien mit JDOM verarbeiten">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 18.7 XML-Dateien mit JDOM verarbeiten">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_18_006.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_18_008.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9" class="navnav">18 Die eXtensible Markup Language (XML)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_001.htm#mj237c96552ea1a4c3a1a589527471c062" class="navnav">18.1 Auszeichnungssprachen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_001.htm#mj4bf69140239c3ccfb8083eff33d6e100" class="navnav">18.1.1 Die Standard Generalized Markup Language (SGML)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_001.htm#mj8d9f98f3ed036fdd6da7807b17781c09" class="navnav">18.1.2 Extensible Markup Language (XML)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_002.htm#mjcd2666b7c695592d37265e354d2a00c5" class="navnav">18.2 Eigenschaften von XML-Dokumenten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mj773e6fbc6cd573178cb691276f14000d" class="navnav">18.2.1 Elemente und Attribute</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mja84996a84fdc9a2d987cb566797a4e08" class="navnav">18.2.2 Beschreibungssprache für den Aufbau von XML-Dokumenten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mj4333546676a25875787fd18c3d254cfe" class="navnav">18.2.3 Schema &#8211; eine Alternative zu DTD</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mj3c7cfffeea42d17ec6d4e502c45a3f53" class="navnav">18.2.4 Namensraum (Namespace)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_002.htm#mj62e6bcc878e81e95702076b2539f77ac" class="navnav">18.2.5 XML-Applikationen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_003.htm#mj2c1eef25d6c5d71726e5dacc6cb108f3" class="navnav">18.3 Die Java-APIs für XML</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mjf8d3130b29ce805bd7b524fbca11a802" class="navnav">18.3.1 Das Document Object Model (DOM)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mj7cb0e2ca0f72fe23591a4e92dac73a41" class="navnav">18.3.2 Simple API for XML Parsing (SAX)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mj8870c3cd8e4b420b6edc4321a1fc513d" class="navnav">18.3.3 Pull-API StAX</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mjc7e7a85232c1e44ad9998ebe18b8e910" class="navnav">18.3.4 Java Document Object Model (JDOM)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mj9b8b8f0ee81828759f5bfacf01d63061" class="navnav">18.3.5 JAXP als Java-Schnittstelle zu XML</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_003.htm#mjadaf4a5fb065c42826aec8f00788f8d0" class="navnav">18.3.6 DOM-Bäume einlesen mit JAXP *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_004.htm#mja6850a6000c1851e0c5247871971601d" class="navnav">18.4 Java Architecture for XML Binding (JAXB)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mj57b18ee2f86e3548766ce5bcf5668f81" class="navnav">18.4.1 Bean für JAXB aufbauen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mj04094f0a2770094b2b07b5d2cc435a76" class="navnav">18.4.2 JAXBContext und die Marshaller</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mj5fb6a31746fde33e516fb3c447fb5876" class="navnav">18.4.3 Ganze Objektgraphen schreiben und lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mjb62739dc1bf14d196c3ffc52932f7360" class="navnav">18.4.4 Validierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mjb3a737e291d8682c25fa9733ed78be51" class="navnav">18.4.5 Weitere JAXB-Annotationen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_004.htm#mjafd88dfe49de9d1fbe3d33655874e33c" class="navnav">18.4.6 Beans aus XML-Schema-Datei generieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_005.htm#mja0bb01e44ea2953efb971874596be219" class="navnav">18.5 Serielle Verarbeitung mit StAX</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_005.htm#mje0378fcae4ad61132cf333148d3dac73" class="navnav">18.5.1 Unterschiede der Verarbeitungsmodelle</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_005.htm#mjc334a0292e78cc60f631d89b5b1af283" class="navnav">18.5.2 XML-Dateien mit dem Cursor-Verfahren lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_005.htm#mj393a8666323d5cfed19cf9bc56c0896f" class="navnav">18.5.3 XML-Dateien mit dem Iterator-Verfahren verarbeiten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_005.htm#mjaff1d38fd26ccd588bd3da8e8ad308a2" class="navnav">18.5.4 Mit Filtern arbeiten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_005.htm#mj15d0d171e564cb7b811b0a17ddc1cc2b" class="navnav">18.5.5 XML-Dokumente schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_006.htm#mjceff54f01bc1d65b05bddc3222f86495" class="navnav">18.6 Serielle Verarbeitung von XML mit SAX *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_006.htm#mj5a524e0508926cdfa745b209cff80816" class="navnav">18.6.1 Schnittstellen von SAX</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_006.htm#mjb2c389a8849ed9575dcc02189925c512" class="navnav">18.6.2 SAX-Parser erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_006.htm#mj47a0b5f111c2c8aff3fa875397e87f1f" class="navnav">18.6.3 Operationen der Schnittstelle »ContentHandler«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_006.htm#mje940d87629addf069b86bff51b361470" class="navnav">18.6.4 ErrorHandler und EntityResolver</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mja3b868c348f3f738e42cfdbea9cbc8f6" class="navh">18.7 XML-Dateien mit JDOM verarbeiten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj77135e597d8d54fe840a04842c68e0ce" class="navh">18.7.1 JDOM beziehen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja4fd7db4300f6529b10c873ec9a4a439" class="navh">18.7.2 Paketübersicht *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjf2413ed9023819537d4eb80713d718fd" class="navh">18.7.3 Die Document-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjd234254e691d54903d0af054d16e5378" class="navh">18.7.4 Eingaben aus der Datei lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb14de35f00d79df6e8ec64c512a43bfa" class="navh">18.7.5 Das Dokument im XML-Format ausgeben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj17ab80b9ab3664c2eee70dcf38ed8c12" class="navh">18.7.6 Der Dokumenttyp *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj0d2717e8c295b1ff3c20745aea125165" class="navh">18.7.7 Elemente</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj271080a85d75ee1810532901af462d33" class="navh">18.7.8 Zugriff auf Elementinhalte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj3fecdb875aa7ff97650a6669e9e5224d" class="navh">18.7.9 Liste mit Unterelementen erzeugen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjea442487bfa31d02e66b7fc903cafdae" class="navh">18.7.10 Neue Elemente einfügen und ändern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjf1e272ceae3e4c21e59dbc898afd5894" class="navh">18.7.11 Attributinhalte lesen und ändern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjec16e854326f8b45f103ad33caf2681b" class="navh">18.7.12 XPath</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_008.htm#mjae77a41021c1f5b42aebe4c77feb10dd" class="navnav">18.8 Transformationen mit XSLT *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_008.htm#mjeb34698c85951c9bf3d4ef4567832616" class="navnav">18.8.1 Templates und XPath als Kernelemente von XSLT</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_008.htm#mjf773d26cac37a605d443b7bde4602b2b" class="navnav">18.8.2 Umwandlung von XML-Dateien mit JDOM und JAXP</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_009.htm#mjfae1480f2969fabf0ee2cade12877730" class="navnav">18.9 XML-Schema-Validierung *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_009.htm#mja91b6ae6be97d96101b8fa28df390e00" class="navnav">18.9.1 SchemaFactory und Schema</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_009.htm#mje7366a9f6e72187c570b0bd76ad9e928" class="navnav">18.9.2 Validator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_18_009.htm#mjc42d33ecf9649ecc4d3e84119eb9aa91" class="navnav">18.9.3 Validierung unterschiedlicher Datenquellen durchführen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_18_010.htm#mj534267b3a104b554a24f5af79f86f323" class="navnav">18.10 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mja3b868c348f3f738e42cfdbea9cbc8f6" name="mja3b868c348f3f738e42cfdbea9cbc8f6"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">18.7</span> XML-Dateien mit JDOM verarbeiten  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Über JDOM lassen sich die XML-formatierten Dateien einlesen, manipulieren und dann wieder schreiben. Mit einfachen Aufrufen lässt sich ein Dokument im Speicher erstellen. Zur internen JDOM-Repräsentation werden einige Java-typische Features verwendet, beispielsweise die Collection-API zur Speicherung, Reflection oder schwache Referenzen. Die Nutzung der Collection-API ist ein Vorteil, der unter dem herkömmlichen DOM nicht zum Tragen kommt. Durch JDOM können mit dem <span class="clisting">new</span>-Operator auch Elemente und Attribute einfach erzeugt werden. Es gibt spezielle Klassen für das Dokument, nämlich Elemente, Attribute und Kommentare. Es sind keine Fabrikschnittstellen, die konfiguriert werden müssen, sondern alles wird direkt erzeugt.</p>
<p>Die Modelle StAX, SAX oder DOM liegen eine Ebene unter JDOM, denn sie dienen als Ausgangspunkt zum Aufbau eines JDOM-Baums. Das heißt, dass ein vorgeschalteter SAX- oder StAX-Parser (bei JDOM <span class="ckursiv">Builder</span> genannt) die JDOM-Baumstruktur im Speicher erzeugt. Die Bibliothek bietet daher eine neutrale Schnittstelle für diverse Parser, um die Verarbeitung der XML-Daten so unabhängig wie möglich von den Implementierungen zu machen. JDOM unterstützt dabei aktuelle Standards wie DOM Level 3, SAX 2.0 oder XML Schema. Wenn es nötig wird, DOM oder SAX zu unterstützen, bieten Schnittstellen diesen Einstieg an.</p>
<p>Mit JDOM wird auch eine interne Datenstruktur der XML-Datei erzeugt. Dadurch kann jederzeit auf alle Elemente der XML-Datei zugegriffen werden. Da JDOM Java-spezifische Datenstrukturen verwendet, ist die Verarbeitung effizienter als bei DOM. JDOM stellt eine echte Alternative zu DOM dar. Eine Zusammenarbeit von JDOM und SAX ist auch möglich, weil JDOM in der Lage ist, als Ausgabe SAX-Ereignisse auszulösen. Diese können mit SAX-basierten Tools weiterverarbeitet werden. So lässt sich JDOM auch sehr gut in Umgebungen einsetzen, in denen weitere Tools zur Verarbeitung von XML genutzt werden.</p><a id="mj77135e597d8d54fe840a04842c68e0ce" name="mj77135e597d8d54fe840a04842c68e0ce"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">18.7.1</span> JDOM beziehen  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Webseite <span class="ckursiv">http://www.jdom.org/</span> bietet Download, Dokumentation und Mailinglisten. Das Zip-Archiv <span class="ckursiv">http://jdom.org/dist/binary/jdom-1.1.1.zip</span> enthält im <span class="ckursiv">build</span>-Ordner die Datei <span class="ckursiv">jdom.jar</span>, die wir dem Klassenpfad hinzufügen. Die API-Dokumentation liegt online unter <span class="ckursiv">http://jdom.org/docs/apidocs/index.html</span>. JDOM ist freie Software, die auf der Apache-Lizenz beruht. Das heißt, dass JDOM auch in kommerziellen Produkten eingesetzt werden kann, die dann nicht automatisch Open Source sein müssen.</p><a id="mja4fd7db4300f6529b10c873ec9a4a439" name="mja4fd7db4300f6529b10c873ec9a4a439"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">18.7.2</span> Paketübersicht *  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>JDOM besteht aus sieben Paketen mit den Klassen zur Repräsentation des Dokuments, zum Einlesen und Ausgeben, zur Transformation und für XPath-Anfragen.</p>
<h4 class="t4">Das Paket »org.jdom«</h4>
<p>Das Paket fasst alle Klassen zusammen, um ein XML-Dokument im Speicher zu repräsentieren. Dazu gehören zum Beispiel die Klassen <span class="clisting">Attribute</span>, <span class="clisting">Comment</span>, <span class="clisting">CDATA</span>, <span class="clisting">DocType</span>, <span class="clisting">Document</span>, <span class="clisting">Element</span>, <span class="clisting">Entity</span> und <span class="clisting">ProcessingInstruction</span>. Ein Dokument-Objekt hat ein Wurzelelement, eventuell Kommentare, einen <span class="clisting">DocType</span> und eine <span class="clisting">ProcessingInstruction</span>. <span class="clisting">Content</span> ist die abstrakte Basisklasse und Oberklasse von <span class="clisting">Comment</span>, <span class="clisting">DocType</span>, <span class="clisting">Element</span>, <span class="clisting">EntityRef</span>, <span class="clisting">ProcessingInstruction</span> und <span class="clisting">Text</span>. Die Schnittstelle <span class="clisting">Parent</span> implementieren alle Klassen, die <span class="clisting">Content</span> haben können. Viele Schnittstellen gibt es in JDOM nicht. Andere XML-APIs verfolgen bei dieser Frage andere Ansätze; domj4 definiert zentrale Elemente als Schnittstellen, und die pure DOM-API beschreibt alles über Schnittstellen &#8211; konkrete Objekte kommen nur aus Fabriken, und die Implementierung ist unsichtbar.</p>
<h4 class="t4">Die Pakete »org.jdom.output« und »org.jdom.input«</h4>
<p>In den beiden Paketen liegen die Klassen, die XML-Dateien lesen und schreiben können. <span class="clisting">XMLOutputter</span> übernimmt die interne Repräsentation und erzeugt eine XML-Ausgabe in einen <span class="clisting">PrintWriter</span>. Daneben werden die unterschiedlichen Verarbeitungsstrategien DOM und SAX durch die Ausgabeklassen <span class="clisting">SAXOutputter</span> und <span class="clisting">DOMOutputter</span> berücksichtigt. <span class="clisting">SAXOutputter</span> nimmt einen JDOM-Baum und erzeugt benutzerdefinierte SAX2-Ereignisse. Der <span class="clisting">SAXOutputter</span> ist eine sehr einfache Klasse und bietet lediglich eine <span class="clisting">output(Document)</span>-Methode an. Mit <span class="clisting">DOMOutputter</span> wird aus dem internen Baum ein DOM-Baum erstellt.</p>
<p>Ein Builder nimmt XML-Daten in verschiedenen Formaten entgegen und erzeugt daraus ein JDOM-<span class="clisting">Document</span>-Objekt. Das ist bei JDOM der wirkliche Verdienst, dass unabhängig von der Eingabeverarbeitung ein API-Set zur Verfügung steht. Die verschiedenen DOM-Implementierungen unterscheiden sich an manchen Stellen. Die Schnittstelle <span class="clisting">Builder</span> wird von allen einlesenden Klassen implementiert. Im <span class="clisting">Input</span>-Paket befinden sich dafür die Klassen <span class="clisting">DOMBuilder</span>, die einen JDOM-Baum mit DOM erzeugt, und <span class="clisting">SAXBuilder</span>, die dafür SAX verwendet. Damit kann das Dokument aus einer Datei, einem Stream oder einer URL erzeugt werden. Nach dem Einlesen sind die Daten vom konkreten Parser des Herstellers unabhängig und können weiterverarbeitet werden. <span class="clisting">SAXBuilder</span> ist schneller und speicherschonender. Ein <span class="clisting">DOMBuilder</span> wird meistens nur dann benutzt, wenn ein DOM-Baum weiterverarbeitet werden soll. <span class="clisting">org.jdom.input.StAXBuilder</span> ist eine Klasse aus dem Hilfs-Paket unter <span class="ckursiv">http://tutego.de/go/staxmisc</span>.</p>
<p>Im <span class="clisting">org.jdom.contrib</span>-Package gibt es noch einige Erweiterungen für JDOM. Eine bemerkenswerte Erweiterung ist der <span class="clisting">ResultSetBuilder</span>. Diese Klasse ermöglicht das Erstellen einer JDOM-Datenstruktur anhand eines <span class="clisting">java.sql.ResultSet</span>. Dadurch ist eine Brücke zwischen Datenbanken und XML sehr einfach zu realisieren. Diese und noch viele weitere nützliche Erweiterungen sind nicht in der JDOM-Standarddistribution enthalten, sondern im Contrib-Paket.</p>
<h4 class="t4">Das Paket »org.jdom.transform«</h4>
<p>Mit diesem Paket wird das JAXP-TraX-Modell in JDOM integriert. Dies ermöglicht JDOM die Unterstützung für XSLT-Transformationen von XML-Dokumenten. Das Paket enthält die beiden Klassen <span class="clisting">JDOMResult</span> und <span class="clisting">JDOMSource</span>. Die Klasse <span class="clisting">JDOMSource</span> ist eine Wrapper-Klasse, die ein JDOM-Dokument als Parameter nimmt und diesen als Eingabe für das JAXP-TraX-Modell bereitstellt. Die Klasse <span class="clisting">JDOMResult</span> enthält das Ergebnis der Transformation als JDOM-Dokument. Die beiden Klassen haben nur wenige Methoden, und in der API sind Beispiele für die Benutzung dieser Klassen angegeben.</p>
<h4 class="t4">Das Paket »org.jdom.xpath«</h4>
<p>In diesem Paket befindet sich nur eine Utility-Klasse <span class="clisting">XPath</span>. Diese Klasse bildet die Basis für die Verwendung der Abfragesprache XPath mit JDOM. Eine kurze Einführung in XPath sowie Beispiele für den Einsatz in JDOM werden später gezeigt. Neben der Implementierung, die mit JDOM geliefert wird, kann auch eine spezielle Implementierung der XPath-Methoden für JDOM eingesetzt werden. JDOM bringt keine eigene XPath-Implementierung mit, sondern basiert auf der Open-Source-Implementierung <span class="ckursiv">Jaxen</span> (<span class="ckursiv">http://jaxen.org/</span>).</p>
<h4 class="t4">Das Paket »org.jdom.adapters«</h4>
<p>Klassen dieses Pakets erlauben JDOM, existierende DOM-Implementierungen zu nutzen. Sie sind nur interessant für diejenigen, die selbst einen XML-Parser an JDOM anpassen wollen.</p><a id="mjf2413ed9023819537d4eb80713d718fd" name="mjf2413ed9023819537d4eb80713d718fd"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">18.7.3</span> Die Document-Klasse  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Dokumente werden bei JDOM über die Klasse <span class="clisting">Document</span> verwaltet. Ein Dokument besteht aus einem <span class="clisting">DocType</span>, einer <span class="clisting">ProcessingInstruction</span>, einem Wurzelelement und Kommentaren. Die Klasse <span class="clisting">Document</span> gibt es auch in der Standardschnittstelle für das DOM. Falls sowohl JDOM als auch DOM verwendet werden, muss für die Klasse <span class="clisting">Document</span> der voll qualifizierte Klassenname mit vollständiger Angabe der Pakete verwendet werden, weil sonst nicht klar ist, welche <span class="clisting">Document</span>-Klasse verwendet wird.</p>
<h4 class="t4">Ein JDOM-Document im Speicher erstellen</h4>
<p>Um ein <span class="clisting">Document</span>-Objekt zu erzeugen, bietet die Klasse drei Konstruktoren an. Über einen Standard-Konstruktor erzeugen wir ein leeres Dokument. Dieses können wir später bearbeiten, indem wir zum Beispiel Elemente (Objekt vom Typ <span class="clisting">Element</span>), Entitäten oder Kommentare einfügen. Ein neues Dokument mit einem Element erhalten wir über einen Konstruktor, dem wir ein Wurzelelement angeben. Jedes XML-Dokument hat ein Wurzelelement.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Die folgende Zeile erzeugt ein JDOM-Dokument mit einem Wurzelelement:</p>
<p class="tabunter"><strong>Listing 18.26    </strong>com/tutego/insel/xml/jdom/CreateRoot.java, main()</p>
<div class="listing"><pre class="prettyprint">Document doc = new Document( new Element("party") );</pre></div>
<p class="BStandard">In XML formatiert könnte das so aussehen:</p>
<div class="listing"><pre class="prettyprint">&lt;party&gt;
&lt;/party&gt;</pre></div>
</td>
</tr>
</table><br><a id="mjd234254e691d54903d0af054d16e5378" name="mjd234254e691d54903d0af054d16e5378"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">18.7.4</span> Eingaben aus der Datei lesen  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ein zweiter Weg, um ein JDOM-Dokument anzulegen, führt über einen Eingabestrom oder eine Datei. Dafür benötigen wir einen Builder, zum Beispiel den <span class="clisting">SAXBuilder</span> (den wir bevorzugen wollen).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Lies die Datei party.xml ein:</p>
<p class="tabunter"><strong>Listing 18.27    </strong>com/tutego/insel/xml/jdom/ReadXmlFile.java, main()</p>
<div class="listing"><pre class="prettyprint">String filename = "party.xml";
Document doc = new SAXBuilder().build( filename );</pre></div>
<p class="BStandard">Die möglichen Ausnahmen <span class="clisting">IOException</span> und <span class="clisting">JDOMException</span> muss die Anwendung abfangen.</p>
</td>
</tr>
</table><br><p>Die Klasse <span class="clisting">Document</span> bietet selbst keine Lese-Methoden. Es sind immer die Builder, die <span class="clisting">Document</span>-Objekte liefern. Es ist ebenso möglich, ein JDOM-Dokument mithilfe des DOM-Parsers über <span class="clisting">DOMBuilder</span> zu erzeugen. Neben den Standard-Konstruktoren bei <span class="clisting">SAXBuilder</span> und <span class="clisting">DOMBuilder</span> lässt sich unter anderem ein <span class="clisting">boolean</span>-Wert angeben, der die Validierung auf wohldefinierten XML-Code einschaltet.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Wenn ein DOM-Baum nicht schon vorliegt, ist es sinnvoll, ein JDOM-Dokument stets mit dem SAX-Parser zu erzeugen. Das schont die Ressourcen und geht viel schneller, weil keine spezielle Datenstruktur für den DOM-Baum erzeugt werden muss. Das Ergebnis ist in beiden Fällen ein JDOM-Dokument, das die XML-Datei in einer Baum-ähnlichen Struktur abbildet.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.input.<span class="cfett">SAXBuilder</span>
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">SAXBuilder()</span>
Baut einen XML-Leser auf Basis von SAX auf. Es wird nicht validiert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">SAXBuilder( boolean validate )</span>
Baut einen validierenden <span class="clisting">SAXBuilder</span> auf.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Document build( File file )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Document build( InputSource in )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Document build( InputStream in )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Document build( InputStream in, String systemId )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Document build( Reader characterStream )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Document build( Reader characterStream, String systemId )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Document build( String systemId )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Document build( URL url )</span>
Baut ein JDOM-Dokument aus der gegebenen Quelle auf. Im Fall des <span class="clisting">String</span>-Arguments handelt es sich um einen URI-Namen und nicht um ein XML-Dokument im String.</li>
</ul><a id="mjb14de35f00d79df6e8ec64c512a43bfa" name="mjb14de35f00d79df6e8ec64c512a43bfa"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">18.7.5</span> Das Dokument im XML-Format ausgeben  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mit einem <span class="clisting">XMLOutputter</span> lässt sich der interne JDOM-Baum als XML-Datenstrom in einen <span class="clisting">OutputStream</span> oder <span class="clisting">Writer</span> schieben.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gib das JDOM-Dokument auf der Konsole aus:</p>
<p class="tabunter"><strong>Listing 18.28    </strong>com/tutego/insel/xml/jdom/ReadXmlFile.java, main()</p>
<div class="listing"><pre class="prettyprint">XMLOutputter out = new XMLOutputter();
out.output( doc, System.out );</pre></div>
</td>
</tr>
</table><br><p>Die Standard-Parametrisierung des Formatierers schreibt die XML-Daten mit schönen Einrückungen. Jeder Eintrag kommt in eine einzelne Zeile. Weitere Anpassungen der Formatierung übernimmt ein <span class="clisting">org.jdom.output.Format</span>-Objekt. Einige statische Methoden bereiten <span class="clisting">Format</span>-Objekte mit unterschiedlichen Belegungen vor, so <span class="clisting">getPrettyFormat()</span> für hübsche eingerückte Ausgaben und <span class="clisting">getCompactFormat()</span> mit so genannter »Leerraum-Normalisierung«, wie es die API-Dokumentation nennt.</p>
<div class="listing"><pre class="prettyprint">XMLOutputter out = new XMLOutputter( Format.getPrettyFormat() );
out.output( doc, System.out );</pre></div>
<p>Unterschiedliche <span class="clisting">setXXX()</span>-Methoden auf dem <span class="clisting">XMLOutputter</span>-Objekt ermöglichen eine weitere individuelle Anpassung der <span class="clisting">Format</span>-Objekte. Soll das Ergebnis als String vorliegen, kann <span class="clisting">outputString()</span> verwendet werden, was ein <span class="clisting">String</span>-Objekt liefert.</p><a id="mj17ab80b9ab3664c2eee70dcf38ed8c12" name="mj17ab80b9ab3664c2eee70dcf38ed8c12"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">18.7.6</span> Der Dokumenttyp *  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ein XML-Dokument beschreibt in seinem Dokumenttyp den Typ der Datei und besitzt oft einen Verweis auf die beschreibende DTD.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Ein gültiger Dokumenttyp für XHTML-Dateien hat folgendes Format:</p>
<div class="listing"><pre class="prettyprint">&lt;!DOCTYPE html PUBLIC
  "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</pre></div>
</td>
</tr>
</table><br><p>Bearbeiten wir dies über JDOM, so liefert die Methode <span class="clisting">getDocType()</span> vom Dokument-Objekt ein <span class="clisting">DocType</span>-Objekt, das wir nach den IDs fragen können. Über <span class="clisting">setDocType()</span> kann der veränderte Dokumenttyp neu zugewiesen werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Document</span>
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">DocType getDocType()</span>
Liefert das zugehörige <span class="clisting">DocType</span>-Objekt oder <span class="clisting">null</span>, wenn keines existiert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Document setDocType( DocType docType )</span>
Setzt ein neues <span class="clisting">DocType</span>-Objekt für das Dokument.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Wir erfragen vom Dokument den Elementnamen, die öffentliche ID und die System-ID:</p>
<div class="listing"><pre class="prettyprint">DocType docType = doc.getDocType();
System.out.println( "Element: "   + <span class="cfett">docType.getElementName()</span> );
System.out.println( "Public ID: " + <span class="cfett">docType.getPublicID()</span> );
System.out.println( "System ID: " + <span class="cfett">docType.getSystemID()</span> );</pre></div>
</td>
</tr>
</table><br><p>Zu den Methoden <span class="clisting">getPublicID()</span> und <span class="clisting">getSystemID()</span> gibt es entsprechende Setze-Methoden, nicht aber für den Elementnamen; dieser kann nachträglich nicht mehr modifiziert werden. Wir müssen dann ein neues <span class="clisting">DocType</span>-Objekt anlegen. Es gibt mehrere Varianten von Konstruktoren, mit denen gesteuert werden kann, welche Einträge gesetzt werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Wir legen ein neues <span class="clisting">DocType</span>-Objekt an und weisen es einem Dokument <span class="clisting">doc</span> zu:</p>
<div class="listing"><pre class="prettyprint">DocType doctype = new DocType( "html", "-//W3C...", "http://..." );
doc.setDocType( doctype );</pre></div>
</td>
</tr>
</table><br><a id="mj0d2717e8c295b1ff3c20745aea125165" name="mj0d2717e8c295b1ff3c20745aea125165"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">18.7.7</span> Elemente  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Jedes Dokument besteht aus einem Wurzelelement. Wir haben schon gesehen, dass dieses durch die allgemeine Klasse <span class="clisting">Element</span> abgebildet wird. Mit dem Wurzelelement gelingt der Zugriff auf die anderen Elemente des Dokumentenbaums.</p>
<h4 class="t4">Wurzelelement</h4>
<p>Die folgenden Beispieldateien verwenden die XML-Datei <span class="ckursiv">party.xml</span>, um die Methoden von JDOM vorzustellen. Durch das Erzeugen eines leeren JDOM-Dokuments und die Methoden zur Erstellung von Elementen und Attributen kann JDOM den Dateiinhalt auch leicht aufbauen:</p>
<p class="tabunter"><strong>Listing 18.29    </strong>party.xml</p>
<div class="listing"><pre class="prettyprint">&lt;party datum="31.12.01"&gt;
    &lt;gast name="Albert Angsthase"&gt;
        &lt;getraenk&gt;Wein&lt;/getraenk&gt;
        &lt;getraenk&gt;Bier&lt;/getraenk&gt;
        &lt;zustand ledig="true" nuechtern="false"/&gt;
    &lt;/gast&gt;
    &lt;gast name="Martina Mutig"&gt;
        &lt;getraenk&gt;Apfelsaft&lt;/getraenk&gt;
        &lt;zustand ledig="true" nuechtern="true"/&gt;
    &lt;/gast&gt;
    &lt;gast name="Zacharias Zottelig"&gt;&lt;/gast&gt;
&lt;/party&gt;</pre></div>
<p>Um an das Wurzelelement <span class="clisting">&lt;party&gt;</span> zu gelangen und von dort aus weitere Elemente oder Attribute auslesen zu können, erzeugen wir zunächst ein JDOM-Dokument aus der Datei <span class="ckursiv">party.xml</span> und nutzen zum Zugriff <span class="clisting">getRootElement()</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Lies die Datei party.xml, und erfrage das Wurzelelement:</p>
<p class="tabunter"><strong>Listing 18.30    </strong>com/tutego/insel/xml/jdom/RootElement.java, main()</p>
<div class="listing"><pre class="prettyprint">Document doc = new SAXBuilder().build( "party.xml" );
Element party = doc.<span class="cfett">getRootElement()</span>;</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Document</span>
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Element getRootElement()</span>
Gibt das <span class="clisting">Root</span>-Element zurück oder <span class="clisting">null</span>, falls kein <span class="clisting">Root</span>-Element vorhanden ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isRootElement()</span>
Rückgabe eines Wahrheitswerts, der ausdrückt, ob das Element die Wurzel der JDOM-Datenstruktur ist.</li>
</ul>
<p>Durch die oben gezeigten Anweisungen wird aus der XML-Datei <span class="ckursiv">party.xml</span> eine JDOM-Datenstruktur im Speicher erzeugt. Um mit dem Inhalt der XML-Datei arbeiten zu können, ist der Zugriff auf die einzelnen Elemente notwendig. Durch die Methode <span class="clisting">getRootElement()</span> wird das Wurzelelement der XML-Datei zurückgegeben. Dieses Element ist der Ausgangspunkt für die weitere Verarbeitung der Datei.</p>
<h4 class="t4">Zugriff auf Elemente</h4>
<p>Um ein bestimmtes Element zu erhalten, gibt es die Methode <span class="clisting">getChild(String name)</span>. Mit dieser Methode wird das nächste Unterelement des Elements zurückgegeben, das diesen Namen trägt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Wenn wir den ersten Gast auf der Party haben möchten, schreiben wir:</p>
<p class="tabunter"><strong>Listing 18.31    </strong>com/tutego/insel/xml/jdom/AlbertTheFirst.java, main()</p>
<div class="listing"><pre class="prettyprint">Element party = doc.getRootElement();
Element albert = party.<span class="cfett">getChild( "gast" )</span>;</pre></div>
<p class="BStandard">Wenn wir wissen wollen, was Albert trinkt, schreiben wir:</p>
<div class="listing"><pre class="prettyprint">Element albertGetraenk = albert.getChild( "getraenk" );</pre></div>
<p class="BStandard">Durch eine Kaskadierung ist es möglich, über das Wurzelelement auf das Getränk des ersten Gastes zuzugreifen:</p>
<div class="listing"><pre class="prettyprint">Element albertGetraenk = party.getChild( "gast" ).getChild( "getraenk" );</pre></div>
</td>
</tr>
</table><br><p>Eine Liste mit allen Elementen liefert die Methode <span class="clisting">getChildren()</span>. Sie gibt eine nicht generisch verwendete <span class="clisting">java.util.List</span> mit allen Elementen dieses Namens zurück.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Falls wir eine Gästeliste der Party haben wollen, schreiben wir:</p>
<div class="listing"><pre class="prettyprint">List gaeste = party.getChildren( "gast" );</pre></div>
<p class="BStandard">Diese Liste enthält alle Elemente der Form <span class="clisting">&lt;gast ...&gt; ... &lt;/gast&gt;</span>, die direkt unter dem Element <span class="clisting">&lt;party&gt;</span> liegen.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Element</span>
extends Content
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Element getChild( String name )</span>
Rückgabe des ersten untergeordneten Elements mit dem lokalen Namen <span class="clisting">name</span>, das keinem Namensraum zugeordnet ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element getChild( String name, Namespace ns )</span>
Rückgabe des ersten untergeordneten Elements mit dem lokalen Namen <span class="clisting">name</span>, das dem Namensraum <span class="clisting">ns</span> zugeordnet ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">List getChildren()</span>
Rückgabe einer Liste der Elemente, die diesem Element direkt untergeordnet sind. Falls keine Elemente existieren, wird eine leere Liste zurückgegeben. Änderungen an der Liste spiegeln sich auch in der JDOM-Datenstruktur wider.</li>
</ul>
<ul class="gp">
<li><span class="clisting">List getChildren( String name )</span>
Rückgabe einer Liste der Elemente mit dem Namen <span class="clisting">name</span>, die diesem Element direkt untergeordnet sind. Falls keine Elemente existieren, wird eine leere Liste zurückgegeben. Änderungen an der Liste spiegeln sich auch in der JDOM-Datenstruktur wider.</li>
</ul>
<ul class="gp">
<li><span class="clisting">List getChildren( String name, Namespace ns )</span>
Rückgabe einer Liste der Elemente mit dem Namen <span class="clisting">name</span>, die diesem Namensraum zugeordnet und diesem Element direkt untergeordnet sind. Falls keine Elemente existieren, wird eine leere Liste zurückgegeben. Änderungen an der Liste spiegeln sich auch in der JDOM-Datenstruktur wider.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean hasChildren()</span>
Rückgabe eines <span class="clisting">boolean</span>-Werts, der ausdrückt, ob Elemente untergeordnet sind oder nicht.</li>
</ul><a id="mj271080a85d75ee1810532901af462d33" name="mj271080a85d75ee1810532901af462d33"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">18.7.8</span> Zugriff auf Elementinhalte  <a href="#t2t310"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Von Beginn eines Elements bis zu dessen Ende treffen wir auf drei unterschiedliche Informationen:</p>
<ul class="gp">
<li>Es können weitere Elemente folgen. Im oberen Beispiel folgt in <span class="clisting">&lt;gast&gt;</span> noch ein Element <span class="clisting">&lt;getraenk&gt;</span>.</li>
</ul>
<ul class="gp">
<li>Das Element enthält Text (wie das Element <span class="clisting">&lt;getraenk&gt;</span>).</li>
</ul>
<ul class="gp">
<li>Zusätzlich kann ein Element auch Attribute beinhalten. Dies haben wir auch beim Element <span class="clisting">&lt;gast&gt;</span> gesehen, das als Attribut den Namen des Gasts enthält. Der Inhalt von Attributen ist immer Text.</li>
</ul>
<p>Für diese Aufgaben bietet die <span class="clisting">Element</span>-Klasse unterschiedliche Anfrage- und Setze-Methoden. Wir wollen mit dem Einfachsten, dem Zugriff auf den Textinhalt eines Elements, beginnen.</p>
<h4 class="t4">Elementinhalte auslesen und setzen</h4>
<p>Betrachten wir das Element, dessen Inhalt wir auslesen wollen, so nutzen wir dazu die Methode <span class="clisting">getText()</span>:</p>
<div class="listing"><pre class="prettyprint">&lt;getraenk&gt;Wein&lt;/getraenk&gt;</pre></div>
<p>Sie liefert einen String, sofern eine String-Repräsentation des Inhalts erlaubt ist. Falls das Element keinen Text oder nur Unterelemente besitzt, ist der Rückgabewert ein Leerstring.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Um an das erste Getränk von Albert zu kommen, schreiben wir:</p>
<p class="tabunter"><strong>Listing 18.32    </strong>com/tutego/insel/xml/jdom/AlbertsDrink.java, main()</p>
<div class="listing"><pre class="prettyprint">Element party = doc.getRootElement();
Element albertGetraenk = party.getChild( "gast" ).getChild( "getraenk" );
String getraenk = albertGetraenk.getText();</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Element</span>
extends Content
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String getText()</span>
Rückgabe des Inhalts des Elements. Dies beinhaltet alle Leerzeichen und CDATA-Sektionen. Falls der Elementinhalt nicht zurückgegeben werden kann, wird der leere String zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getTextNormalize()</span>
Verhält sich wie <span class="clisting">getText()</span>. Leerzeichen am Anfang und am Ende des Strings werden entfernt. Leerzeichen innerhalb des Strings werden auf ein Leerzeichen normalisiert. Falls der Text nur aus Leerzeichen besteht, wird der leere String zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getTextTrim()</span>
Verhält sich wie <span class="clisting">getTextNormalize()</span>. Leerzeichen innerhalb des Strings bleiben erhalten.</li>
</ul>
<p>Für die Methode <span class="clisting">getText()</span> muss das Element vorliegen, dessen Inhalt gelesen werden soll. Mit der Methode <span class="clisting">getChildText()</span> kann der Inhalt eines untergeordneten Elements auch direkt ermittelt werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Lies den Text des ersten untergeordneten Elements mit dem Namen <span class="clisting">getraenk</span>. Das übergeordnete Element von Getränk ist <span class="clisting">albert</span>:</p>
<p class="tabunter"><strong>Listing 18.33    </strong>com/tutego/insel/xml/jdom/AlbertsDrink.java, main()</p>
<div class="listing"><pre class="prettyprint">Element albert = party.getChild( "gast" );
String getraenk = albert.<span class="cfett">getChildText</span>( "getraenk" );</pre></div>
</td>
</tr>
</table><br><p>In der Implementierung der Methode <span class="clisting">getChildText()</span> sind die Methoden <span class="clisting">getChild()</span> und <span class="clisting">getText()</span> zusammengefasst.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Element</span>
extends Content
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String getChildText( String name )</span>
Rückgabe des Inhalts des Elements mit dem Namen <span class="clisting">name</span>. Falls der Inhalt kein Text ist, wird ein leerer String zurückgegeben. Falls das Element nicht existiert, wird <span class="clisting">null</span> zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getChildText( String name, Namespace ns )</span>
Verhält sich wie <span class="clisting">getChildText(String)</span> im Namensraum <span class="clisting">ns</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getChildTextTrim( String name )</span>
Verhält sich wie <span class="clisting">getChildText(String)</span>. Leerzeichen am Anfang und am Ende des Strings werden entfernt. Leerzeichen innerhalb des Strings bleiben erhalten.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getChildTextTrim( String name, Namespace ns )</span>
Verhält sich wie <span class="clisting">getChildTextTrim(String)</span> im Namensraum <span class="clisting">ns</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getName()</span>
Rückgabe des lokalen Namens des Elements ohne Namensraum-Präfix.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Namespace getNamespace()</span>
Rückgabe des Namensraums oder eines leeren Strings, falls diesem Element kein Namensraum zugeordnet ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Namespace getNamespace( String prefix )</span>
Rückgabe des Namensraums des Elements mit diesem Präfix. Dies beinhaltet das Hochlaufen in der Hierarchie des JDOM-Dokuments. Falls kein Namensraum gefunden wird, gibt diese Methode <span class="clisting">null</span> zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getNamespacePrefix()</span>
Rückgabe des Namensraum-Präfixes. Falls kein Namensraum-Präfix existiert, wird ein Leerstring zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getNamespaceURI()</span>
Rückgabe der Namensraum-URI, die dem Präfix dieses Elements zugeordnet ist, oder des Standardnamensraums. Falls keine URI gefunden werden kann, wird ein leerer String zurückgegeben.</li>
</ul><a id="mj3fecdb875aa7ff97650a6669e9e5224d" name="mj3fecdb875aa7ff97650a6669e9e5224d"></a><a name="t39"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t310"></a><h3 class="t3"><span class="cfett">18.7.9</span> Liste mit Unterelementen erzeugen *  <a href="#t2t311"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t39"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mit den oben beschriebenen Methoden war es bislang immer nur möglich, das erste untergeordnete Element mit einem bestimmten Namen zu lesen. Um gezielt nach bestimmten Elementen zu suchen, ist es notwendig, die untergeordneten Elemente in eine Liste zu übertragen. Mit der Methode <span class="clisting">getContent()</span> wird eine Liste mit allen Elementen und Unterelementen erzeugt. Diese Liste enthält Referenzen der Elemente aus der JDOM-Datenstruktur.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Hol eine Liste aller Informationen der Party, und laufe sie mit einem Iterator ab:</p>
<p class="tabunter"><strong>Listing 18.34    </strong>com/tutego/insel/xml/jdom/PartyList.java, main()</p>
<div class="listing"><pre class="prettyprint">List&lt;?&gt; partyInfo = <span class="cfett">party.getContent()</span>;
Iterator&lt;?&gt; partyIterator = <span class="cfett">partyInfo.iterator()</span>;
while ( partyIterator.hasNext() )
  System.out.println( partyIterator.next() );</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Element</span>
extends Content
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">List getContent()</span>
Dies liefert den vollständigen Inhalt eines Elements mit allen Unterelementen. Die Liste kann Objekte vom Typ <span class="clisting">String</span>, <span class="clisting">Element</span>, <span class="clisting">Comment</span>, <span class="clisting">ProcessingInstruction</span> und <span class="clisting">Entity</span> enthalten. Falls keine Elemente vorhanden sind, wird eine leere Liste zurückgegeben.</li>
</ul><a id="mjea442487bfa31d02e66b7fc903cafdae" name="mjea442487bfa31d02e66b7fc903cafdae"></a><a name="t310"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t311"></a><h3 class="t3"><span class="cfett">18.7.10</span> Neue Elemente einfügen und ändern  <a href="#t2t312"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t310"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um neue Elemente zu erzeugen, bietet die Klasse <span class="clisting">Element</span> unter anderem den Konstruktor <span class="clisting">Element(String)</span> an. Es wird ein Element mit dem entsprechenden Namen erzeugt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Erfrage eine Liste mit allen Unterelementen von <span class="clisting">albert</span>, erzeuge ein neues Element, und füge es in die Liste ein:</p>
<p class="tabunter"><strong>Listing 18.35    </strong>com/tutego/insel/xml/jdom/AlbertsWater.java, main()</p>
<div class="listing"><pre class="prettyprint">Element party = doc.getRootElement();
Element albert = party.getChild( "gast" );
List albertInfo = albert.getContent();
Element wasser = new Element( "getraenk" );
wasser.addContent( "Wasser" );</pre></div>
</td>
</tr>
</table><br><p>Um den Wert eines Elements zu ändern, gibt es die Methoden <span class="clisting">setText()</span> und <span class="clisting">addContent()</span>. Die Methode <span class="clisting">setText()</span> hat allerdings die unangenehme Eigenschaft, alle Unterelemente zu entfernen. Die Methode <span class="clisting">addContent()</span> fügt neuen Inhalt hinzu.</p>
<p>Wenn der Inhalt eines Elements ausgetauscht werden soll, muss der alte entfernt und der neue mit <span class="clisting">addContent()</span> hinzugefügt werden. Die Methode <span class="clisting">addContent()</span> kann nicht nur Text, sondern jeden beliebigen Inhalt einfügen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Albert will in Zukunft keinen Wein mehr trinken, sondern nur noch Wasser und Bier. Dazu wird zuerst das erste Unterelement gelöscht:</p>
<div class="listing"><pre class="prettyprint">albert.removeChild( "getraenk" );</pre></div>
<p class="BStandard">Ein neues Element <span class="clisting">wasser</span> wird erzeugt und mit Inhalt gefüllt:</p>
<div class="listing"><pre class="prettyprint">Element wasser = new Element( "getraenk" );
wasser.addContent( "Wasser" );</pre></div>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Das neue Element wird dem Element <span class="clisting">albert</span> untergeordnet:</p>
<div class="listing"><pre class="prettyprint">albert.addContent( wasser );</pre></div>
</td>
</tr>
</table><br><p>Werfen wir erneut einen Blick auf unsere XML-Datei, und entfernen wir das erste Element <span class="clisting">&lt;getraenk&gt;</span>, das dem ersten Element <span class="clisting">&lt;gast&gt;</span> untergeordnet ist:</p>
<div class="listing"><pre class="prettyprint">&lt;party datum="31.12.01"&gt;
    &lt;gast name="Albert Angsthase"&gt;
        &lt;getraenk&gt;Wein&lt;/getraenk&gt;
        &lt;getraenk&gt;Bier&lt;/getraenk&gt;
        &lt;zustand ledig="true" nuechtern="false"/&gt;
    &lt;/gast&gt;
&lt;party&gt;</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Die Methode <span class="clisting">removeChild</span> entfernt das Element <span class="clisting">&lt;getraenk&gt;</span>:</p>
<div class="listing"><pre class="prettyprint">Element party = doc.getRootElement();
Element albert = party.getChild( "gast" );</pre></div>
<p class="BStandard">Es werden nur die direkten Nachfolger durchsucht. Diese Methode findet das Element <span class="clisting">&lt;getraenk&gt;Wein&lt;/getraenk&gt;</span> nicht.</p>
<div class="listing"><pre class="prettyprint">party.removeChild( "getraenk" );</pre></div>
<p class="BStandard">Mit <span class="clisting">removeChild()</span> wird das Element <span class="clisting">&lt;getraenk&gt;Wein&lt;/getraenk&gt;</span> gelöscht.</p>
<div class="listing"><pre class="prettyprint">albert.<span class="cfett">removeChild</span>( "getraenk" );</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Element</span>
extends Content
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Element( String name )</span>
Dieser Konstruktor erzeugt ein Element mit dem Namen <span class="clisting">name</span> ohne Zuordnung zu einem Namensraum.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element( String name, Namespace namespace )</span>
Dieser Konstruktor erzeugt ein Element mit dem Namen <span class="clisting">name</span> und dem Namensraum <span class="clisting">namespace</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element( String name, String uri )</span>
Dieser Konstruktor erzeugt ein neues Element mit dem lokalen Namen <span class="clisting">name</span> und der URI des Namensraums, der zu dem Element ohne Präfix gehört.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element( String name, String prefix, String uri )</span>
Dieser Konstruktor erzeugt ein neues Element mit dem lokalen Namen <span class="clisting">name</span>, dem Namenspräfix <span class="clisting">prefix</span> und der URI des Namensraums.</li>
</ul>
<p>Von diesen Konstruktoren ist in den Beispielen nur der erste benutzt worden.</p>
<ul class="gp">
<li><span class="clisting">boolean removeChild( String name )</span>
Entfernt das erste gefundene Unterelement mit dem Namen <span class="clisting">name</span>, das keinem Namensraum zugeordnet ist. Es werden nur die direkten Nachfolger durchsucht.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean removeChild( String name, Namespace ns )</span>
Verhält sich wie <span class="clisting">removeChild(String name)</span>. Der Namensraum wird bei der Auswahl des Elements berücksichtigt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean removeChildren()</span>
Entfernt alle untergeordneten Elemente.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean removeChildren( String name )</span>
Entfernt alle Unterelemente mit den Namen <span class="clisting">name</span>, die gefunden werden und keinem Namensraum zugeordnet sind. Es werden nur die direkten Nachfolger durchsucht.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean removeChildren( String name, Namespace ns )</span>
Verhält sich wie <span class="clisting">removeChildren(String)</span> im Namensraum <span class="clisting">ns</span>.</li>
</ul>
<p>Bei den folgenden Methoden wird als Rückgabewert das geänderte Element zurückgegeben:</p>
<ul class="gp">
<li><span class="clisting">Element setText( String text )</span>
Setzt den Inhalt des Elements. Alle anderen Inhalte und alle Unterelemente werden gelöscht.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element addContent( String text )</span>
Ergänzt den Inhalt des Elements um den Text.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element addContent( content child )</span>
Ergänzt den Inhalt des Elements um das Element als Unterelement.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element getCopy( String name )</span>
Erzeugt eine Kopie des Elements mit dem neuen Namen <span class="clisting">name</span>, ohne Zuordnung zu einem Namensraum.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element getCopy( String name, Namespace ns )</span>
Erzeugt eine Kopie des Elements mit dem neuem Namen <span class="clisting">name</span> und eine Zuordnung zu dem Namensraum <span class="clisting">ns</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Document getDocument()</span>
Liefert das Dokument dieses Elements oder <span class="clisting">null</span>, falls das Element keinem Dokument zugeordnet ist.</li>
</ul><a id="mjf1e272ceae3e4c21e59dbc898afd5894" name="mjf1e272ceae3e4c21e59dbc898afd5894"></a><a name="t311"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t312"></a><h3 class="t3"><span class="cfett">18.7.11</span> Attributinhalte lesen und ändern  <a href="#t2t313"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t311"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ein Element kann auch einen Attributwert enthalten. Dies ist der Wert, der direkt in dem Tag mit angegeben ist. Betrachten wir dazu folgendes Element:</p>
<div class="listing"><pre class="prettyprint">&lt;gast name="Albert Angsthase"&gt;</pre></div>
<p>Das Element hat als Attribut <span class="clisting">name="Albert Angsthase"</span>. Diesen Wert liefert die Methode <span class="clisting">getAttribute(String).getValue()</span> der Klasse <span class="clisting">Element</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Lies den Namen des ersten Gastes:</p>
<p class="tabunter"><strong>Listing 18.36    </strong>com/tutego/insel/xml/jdom/Wedding, main()</p>
<div class="listing"><pre class="prettyprint">Element   party      = doc.getRootElement();
Element   albert     = party.getChild( "gast" );
Attribute albertAttr = albert.<span class="cfett">getAttribute</span>( "name" );
String albertName    = albert.getAttribute( "name" ).<span class="cfett">getValue()</span>;</pre></div>
<p class="BStandard">Martina möchte wissen, ob Albert noch ledig ist:</p>
<div class="listing"><pre class="prettyprint">albert.getChild( "zustand" ).getAttribute( "ledig" ).getValue();</pre></div>
</td>
</tr>
</table><br><p>Auf ähnliche Weise lässt sich der Wert eines Attributs ändern. Dazu gibt es die Methoden <span class="clisting">setAttribute(String)</span> der Klasse <span class="clisting">Attribute</span> und <span class="clisting">addAttribute(Attribute)</span> der Klasse <span class="clisting">Element</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Martina und Albert haben geheiratet, und Albert nimmt den Namen von Martina an:</p>
<div class="listing"><pre class="prettyprint">albert.getAttribute( "name" ).setAttribute( "Albert Mutig" );</pre></div>
<p class="BStandard">Seit der Hochzeit mit Albert trinkt Martina auch Wein. Also muss ein neues Element <span class="clisting">wein</span> unter dem Element <span class="clisting">&lt;gast name="Martina Mutig"&gt;</span> eingefügt werden. Zuerst erzeugen wir ein Element der Form <span class="clisting">&lt;getraenk&gt;Wein&lt;/getraenk&gt;</span>:</p>
<div class="listing"><pre class="prettyprint">Element wein = new Element( "getraenk" );
wein.addContent( "Wein" );</pre></div>
<p class="BStandard">Danach suchen wir Martina in der Gästeliste und fügen das Element <span class="clisting">&lt;wein&gt;</span> ein:</p>
<div class="listing"><pre class="prettyprint">Iterator gaesteListe = party.getChildren( "gast" ).iterator();
while ( gaesteListe.hasNext() )
{
  Element gast = (Element) gaesteListe.next();

  if ( "Martina Mutig".equals( gast.getAttribute( "name" ).getValue()) )
    gast.<span class="cfett">addContent</span>( wein );
}</pre></div>
</td>
</tr>
</table><br><p>Das Beispiel macht deutlich, wie flexibel die Methode <span class="clisting">addContent(Inhalt)</span> ist. Es zeigt ebenso, wie JDOM für Java, etwa durch die Implementierung der Schnittstelle <span class="clisting">List</span>, optimiert wurde.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Element</span>
extends Content
implements Parent</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Attribute getAttribute( String name )</span>
Rückgabe des Attributs mit dem Namen <span class="clisting">name</span>, das keinem Namensraum zugeordnet ist. Falls das Element kein Attribut mit dem Namen <span class="clisting">name</span> hat, ist die Rückgabe <span class="clisting">null</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Attribute getAttribute( String name, Namespace ns )</span>
Verhält sich wie <span class="clisting">getAttribute(String)</span> in dem Namensraum <span class="clisting">ns</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">List getAttributes()</span>
Rückgabe einer Liste aller Attribute eines Elements oder einer leeren Liste, falls das Element keine Attribute hat.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getAttributeValue( String name )</span>
Rückgabe des Attributwerts mit dem Namen <span class="clisting">name</span>, dem kein Namensraum zugeordnet ist. Es wird <span class="clisting">null</span> zurückgegeben, falls keine Attribute dieses Namens existieren, und der leere String, falls der Wert des Attributs leer ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getAttributeValue( String name, Namespace ns )</span>
Verhält sich wie <span class="clisting">getAttributeValue(String)</span> in dem Namensraum <span class="clisting">ns</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element setAttributes( List attributes )</span>
Fügt alle Attribute der Liste dem Element hinzu. Alle vorhandenen Attribute werden entfernt. Das geänderte Element wird zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element addAttribute( Attribute attribute )</span>
Einfügen des Attributs <span class="clisting">attribute</span>. Bereits vorhandene Attribute mit gleichem Namen und gleichem Namensraum werden ersetzt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element addAttribute( String name, String value )</span>
Einfügen des Attributs mit dem Namen <span class="clisting">name</span> und dem Wert <span class="clisting">value</span>. Um Attribute mit einem Namensraum hinzuzufügen, sollte die Methode <span class="clisting">addAttribute(Attribute attribute)</span> verwendet werden.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.<span class="cfett">Attribute</span>
implements Serializable, Cloneable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String getValue()</span>
Rückgabe des Werts dieses Attributs</li>
</ul>
<p>Die folgenden Methoden versuchen eine Umwandlung in einen primitiven Datentyp. Falls eine Umwandlung nicht möglich ist, wird eine <span class="clisting">DataConversionException</span> ausgelöst.</p>
<ul class="gp">
<li><span class="clisting">getBooleanValue()</span>
Gibt den Wert des Attributs als <span class="clisting">boolean</span> zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">double getDoubleValue()</span>
Gibt den Wert des Attributs als <span class="clisting">double</span> zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">float getFloatValue()</span>
Gibt den Wert des Attributs als <span class="clisting">float</span> zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getIntValue()</span>
Gibt den Wert des Attributs als <span class="clisting">int</span> zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">long getLongValue()</span>
Gibt den Wert des Attributs als <span class="clisting">long</span> zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getName()</span>
Gibt den lokalen Namen des Attributs zurück. Falls der Name die Form <span class="clisting">[namespacePrefix]:[elementName]</span> hat, wird <span class="clisting">[elementName]</span> zurückgegeben. Wenn der Name kein Namensraum-Präfix hat, wird einfach nur der Name ausgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Namespace getNamespace()</span>
Gibt den Namensraum des Attributs zurück. Falls kein Namensraum vorhanden ist, wird das konstante Namensraum-Objekt <span class="clisting">NO_NAMESPACE</span> zurückgegeben. Diese Konstante enthält ein Namensraum-Objekt mit dem leeren String als Namensraum.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getNamespacePrefix()</span>
Gibt das Präfix des Namensraums zurück. Falls kein Namensraum zugeordnet ist, wird ein leerer String zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getNamespaceURI()</span>
Gibt die URI zurück, die zu dem Namensraum dieses Elements gehört. Falls kein Namensraum zugeordnet ist, wird ein leerer String zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Element getParent()</span>
Gibt das Element zurück, das dem Element dieses Attributs übergeordnet ist. Falls kein übergeordnetes Element vorhanden ist, wird <span class="clisting">null</span> zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getQualifiedName()</span>
Rückgabe des qualifizierten Namens des Attributs. Falls der Name die Form <span class="clisting">[namespacePrefix]:[elementName]</span> hat, wird dies zurückgegeben. Ansonsten wird der lokale Name zurückgegeben.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Attribute setValue( String value )</span>
Setzt den Wert dieses Attributs.</li>
</ul><a id="mjec16e854326f8b45f103ad33caf2681b" name="mjec16e854326f8b45f103ad33caf2681b"></a><a name="t312"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t313"></a><h3 class="t3"><span class="cfett">18.7.12</span> XPath  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t312"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der Standard <span class="ckursiv">XPath</span> (<span class="ckursiv">http://www.w3.org/TR/xpath20/</span>) bietet eine Syntax, um einzelne Knoten oder Knotenmengen aus einer XML-Struktur zu erhalten, so wie auch eine Notation im Dateisystem die Angabe einer Datei erlaubt. Der XPath-Standard wird vom W3C verwaltet und findet in vielen Bereichen Anwendung, etwa in XSLT.</p>
<p>XPath betrachtet die XML-Datenstruktur als Baum. Am Anfang dieses Baumes steht die <span class="ckursiv">XPath-Wurzel</span>, die sich wie üblich vor dem ersten Element des XML-Dokuments befindet. Innerhalb des Baums kann ein XPath-Ausdruck die einzelnen Elemente, deren Attribute und Werte, Verarbeitungsanweisungen und Kommentare selektieren. Die folgenden Beispiele stellen den Zugriff auf Elemente, Elementwerte, Attribute und Attributwerte vor.</p>
<h4 class="t4">Knoten(-mengen) selektieren</h4>
<p>XPath bietet zwei Notationen zur Selektierung:</p>
<ul class="gp">
<li>Die einfachere Form ist die Dateisystem-Notation, die sich an den Regeln für das UNIX-Dateisystem orientiert.</li>
</ul>
<ul class="gp">
<li>Daneben gibt es noch eine spezielle XPath-Notation, die etwas komplizierter ist.</li>
</ul>
<p>In der folgenden Tabelle werden einige Sprachkonstrukte der beiden Notationen exemplarisch einander gegenübergestellt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 18.5    </strong>Dateisystem-Notation und XPath-Notation im Vergleich</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Beschreibung</span>
</td>
<td class="tabellenkopf"><span class="cfett">XPath-Notation</span>
</td>
<td class="tabellenkopf"><span class="cfett">Dateisystem-Notation</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p>Zugriff auf den ersten Knoten namens <span class="clisting">party</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">/child::party</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">/party</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p>übergeordnete Knoten verwenden</p>
</td>
<td class="tabellentext">
<p><span class="clisting">/child::party/child::gast/child::zustand/parent::node()</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">/party/gast/zustand/.</span>.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p>der erste Gast unserer Party</p>
</td>
<td class="tabellentext">
<p><span class="clisting">/child::party/child::gast[1]</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">/party/gast[1]</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p>alle ledigen Gäste</p>
</td>
<td class="tabellentext">
<p><span class="clisting">/child::party/child::gast/child::zustand/attribute::ledig[(child::text() = "true")]</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">/party/gast/zustand[@ledig="true"]</span></p>
</td>
</tr>
</table><br><p>Es gibt ebenso die Möglichkeit, auf Geschwisterknoten und den aktuellen Knoten zuzugreifen. Zudem können Knoten in Abhängigkeit von der Position im XML-Dokument und bestimmten Werten von Elementen und Attributen abgefragt werden. Um die Beispiele einfach zu halten, wollen wir allerdings immer die Dateisystem-Notation verwenden.</p>
<h4 class="t4">XPath-APIs</h4>
<p>So, wie es unterschiedliche APIs zur Repräsentation der XML-Bäume im Speicher gibt (W3C DOM, JDOM, …), gibt es auch mehrere XPath-APIs. Zwei wichtige sind:</p>
<ul class="gp">
<li><span class="cfett">DOM Level 3 XPath</span>: Eine programmiersprachenunabhängige API ausschließlich für Bäume nach dem offiziellen W3C-DOM-Modell. Das Paket <span class="clisting">javax.xml.xpath</span> setzt diese API in Java um.</li>
</ul>
<ul class="gp">
<li><span class="cfett">Jaxen</span>: Eine pure Java-API, die unterschiedliche DOM-Modelle wie DOM, JDOM und dom4j zusammenbringt.</li>
</ul>
<h4 class="t4">XPath mit JDOM</h4>
<p>Um XPath-Anfragen mit JDOM durchzuführen, steht die Klasse <span class="clisting">org.jdom.xpath.XPath</span> vom JDOM im Zentrum. Im Hintergrund arbeitet Jaxen, sodass die JDOM-Klasse nur eine Fassade für die Jaxen-API ist. Damit die folgenden Beispiele laufen, muss aus dem Ordner <span class="ckursiv">lib</span> des Archivs <span class="ckursiv">jdom-1.1.1.zip</span> die Jar-Datei <span class="ckursiv">jaxen.jar</span> in den Klassenpfad aufgenommen werden.</p>
<p>Die statische Methode <span class="clisting">XPath.selectNodes(Object context, String path)</span> bekommt als Argument ein XML-Dokument und einen XPath-Ausdruck als String und liefert als Ergebnis eine Liste mit den selektierten Werten. Die Liste kann Elemente, Attribute oder Strings enthalten. Der XPath-Ausdruck legt fest, was aus dem XML-Dokument gewünscht ist.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Erzeuge eine Liste mit den Namen aller Gäste, und gib sie aus:</p>
<p class="tabunter"><strong>Listing 18.37    </strong>com/tutego/insel/xpath/XPathDemo.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">List&lt;?&gt; nameList = <span class="cfett">XPath.selectNodes( doc, "/party/gast/@name" )</span>;
for ( Object object : nameList )
{</pre></div>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">  Attribute attribute = (Attribute) object;
  System.out.println( attribute.getValue() );
}</pre></div>
</td>
</tr>
</table><br><p>Über die statische Methode <span class="clisting">newInstance(String path)</span> lässt sich auch ein <span class="clisting">XPath</span>-Objekt erzeugen; dann ist der XPath-Ausdruck schon vorcompiliert, was eine bessere Performance ergibt, wenn der gleiche Ausdruck auf unterschiedlichen JDOM-Bäumen angewendet wird (es entspricht in etwa dem Verhalten mit der Klasse <span class="clisting">Pattern</span> und <span class="clisting">compile()</span>). Die Selektion übernimmt anschließend die Methode <span class="clisting">selectNodes(Object context)</span>, die als Argument nur das XML-Dokument bekommt. Die Rückgabe ist wie bei der statischen Methode eine Liste mit den Werten, die diesem XPath-Ausdruck entsprechen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Erzeuge ein Exemplar von <span class="clisting">XPath</span> für einen Ausdruck zur Selektion von Getränken und gib eine Liste aller Getränke auf den Bildschirm aus:</p>
<p class="tabunter"><strong>Listing 18.38    </strong>com/tutego/insel/xpath/XPathDemo.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">XPath xpath = <span class="cfett">XPath.newInstance( "/party/gast/getraenk" )</span>;
List&lt;?&gt; drinkList = <span class="cfett">xpath.selectNodes( doc )</span>;

for ( Object object : drinkList )
{
  Element aktuellesElement= (Element) object;
  System.out.println( aktuellesElement.getValue() );
}</pre></div>
</td>
</tr>
</table><br><p>Das Ergebnis dieser beiden Aufrufe ist immer eine Knotenmenge. Es gibt aber auch Situationen, in denen nur das erste Element der Ergebnisliste verarbeitet werden soll oder nur ein Element als Ergebnis bei einem XPath-Ausdruck möglich ist, wie zum Beispiel bei der Abfrage von Elementen mit Positionsangabe. Für diesen Fall bietet die Klasse <span class="clisting">XPath</span> zwei praktische Methoden:</p>
<ul class="gp">
<li><span class="clisting">Object selectSingleNode(Object context, String path)</span> als statische Methode</li>
</ul>
<ul class="gp">
<li><span class="clisting">Object selectSingleNode(String path)</span> als Objektmethode für vorhandene <span class="clisting">XPath</span>-Objekte</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gib den Namen des ersten Gastes aus:</p>
<p class="tabunter"><strong>Listing 18.39    </strong>com/tutego/insel/xpath/XPathDemo.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">Object firstGuest = <span class="cfett">XPath.selectSingleNode( doc, "/party/gast[1]/@name" )</span>;
System.out.println( <span class="cfett">((Attribute) firstGuest).getValue()</span> );</pre></div>
</td>
</tr>
</table><br><p>Die Möglichkeiten von XPath können als Alternative zu den Zugriffen über die Datenstrukturen von Java betrachtet werden. Es ist häufig einfacher, mit einem XPath-Ausdruck als mit einzelnen Methodenaufrufen den Pfad zu den Inhalten zu kodieren. Eine Anwendung, die dem Benutzer einen Zugriff auf die XML-Daten bietet, sollte auf jeden Fall XPath anbieten, weil dies der Standard für den Zugriff ist.</p>
<p>Speziell für Datenbanken, die sich auf die Speicherung von XML-Dokumenten spezialisiert haben, ist es üblich, XPath als Abfragesprache zu verwenden. Als neuer Standard in diesem Umfeld entwickelt sich XQuery, wo eine SQL-ähnliche Syntax angeboten wird. Ebenso wird XPath im Standard XSLT verwendet, um Knoten für die Umwandlung auszuwählen. Wir stellen diesen Standard im nächsten Abschnitt kurz vor.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class org.jdom.xpath.<span class="cfett">XPath</span>
implements Serializable</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static XPath newInstance( String path ) throws JDOMException</span>
Liefert eine Exemplar vom XPath mit vorcompiliertem XPath-Ausdruck <span class="clisting">path</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static List selectNodes( Object context, String path ) throws JDOMException</span>
Wertet den XPath-Ausdruck auf dem JDOM-Knoten aus und liefert eine Liste von Knoten, die auf den XPath-Ausdruck passen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static Object selectSingleNode( Object context, String path ) throws JDOMException</span>
Wertet den XPath-Ausdruck auf dem JDOM-Knoten aus und liefert den atomaren Wert oder bei einer Liste das erste Element.</li>
</ul>
<ul class="gp">
<li><span class="clisting">abstract List selectNodes( Object context ) throws JDOMException</span>
Wertet den vorcompilierten XPath-Ausdruck &#8211; gespeichert beim aktuellen <span class="clisting">XPath</span>-Objekt &#8211; auf dem Knoten <span class="clisting">context</span> auf. Ein <span class="clisting">XPath</span>-Objekt baut <span class="clisting">newInstance()</span> auf.</li>
</ul><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="18.7 XML-Dateien mit JDOM verarbeiten"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_18_006.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_18_008.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
