<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 17.5 Datenströme filtern und verketten</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 17.5 Datenströme filtern und verketten">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 17.5 Datenströme filtern und verketten">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_17_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_17_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d" class="navnav">17 Datenströme</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_001.htm#mj7a324cf69fbedec30392b88f514c1531" class="navnav">17.1 Stream-Klassen und Reader/Writer am Beispiel von Dateien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_001.htm#mj87f7ea8c7b8051417049399df2c5782a" class="navnav">17.1.1 Mit dem FileWriter Texte in Dateien schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_001.htm#mj5716136ecff252fbd4596261b9080831" class="navnav">17.1.2 Zeichen mit der Klasse »FileReader« lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_001.htm#mjb01e1a0c69c28aad4f4d7eeee1de357d" class="navnav">17.1.3 Kopieren mit »FileOutputStream« und »FileInputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_001.htm#mjbdc9ce90e6d512ae0291a2ed6232d72a" class="navnav">17.1.4 Das FileDescriptor-Objekt *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_002.htm#mj9a4cc18f2e2c6f801a5cc621aa15984f" class="navnav">17.2 Basisklassen für die Ein-/Ausgabe</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj203b54d682c73aada147e1b57c01662f" class="navnav">17.2.1 Die abstrakten Basisklassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj7a1dda9729bd603bcadebc990609f10f" class="navnav">17.2.2 Übersicht über Ein-/Ausgabeklassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mjd34b697cdf6ea75732127f6a06fc88b0" class="navnav">17.2.3 Die abstrakte Basisklasse »OutputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj2202e460fa14e6ecb6820f4ef86a77f8" class="navnav">17.2.4 Die Schnittstellen »Closeable« und »Flushable«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj25199db178b60bddb59bd9defea22c22" class="navnav">17.2.5 Ein Datenschlucker *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj534fca11b85556e6eec99b4fdd7a4553" class="navnav">17.2.6 Die abstrakte Basisklasse »InputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mjc2905c008847dad671feaa7501f0d82f" class="navnav">17.2.7 Ressourcen aus dem Klassenpfad und aus Jar–Archiven laden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj8c65b2939c83b858ed311032513e29b4" class="navnav">17.2.8 Ströme mit SequenceInputStream zusammensetzen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mjb3889bbefb776f81c16212ee860a5b81" class="navnav">17.2.9 Die abstrakte Basisklasse »Writer«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj8bdb238857679cf8eede58d00850de6b" class="navnav">17.2.10 Die Schnittstelle »Appendable« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_002.htm#mj923c62d6bac3e8a5c5b75c58df0b0bd3" class="navnav">17.2.11 Die abstrakte Basisklasse »Reader«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_003.htm#mjb6060f6cd569b28d5768b131b007f8c8" class="navnav">17.3 Formatierte Textausgaben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_003.htm#mj3573ae904c53fd07e28b8d6dc4973fc8" class="navnav">17.3.1 Die Klassen »PrintWriter« und »PrintStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_003.htm#mjc6e7c16fc76cbc87e02a674ecb288cbf" class="navnav">17.3.2 »System.out«, »System.err« und »System.in«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_004.htm#mj52686ccc039a7d0b9fdf13da77f25534" class="navnav">17.4 Schreiben und Lesen aus Strings und Byte-Feldern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mj97a3eda7509a5b9a017d7b03763042ee" class="navnav">17.4.1 Mit dem »StringWriter« ein String-Objekt füllen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mj94b85a8029a72b2ead03272e22027344" class="navnav">17.4.2 CharArrayWriter</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mj1fbd4214555249440ffa5a256c369d52" class="navnav">17.4.3 »StringReader« und »CharArrayReader«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mjb453ad9336694734eec75f9d0145cc03" class="navnav">17.4.4 Mit »ByteArrayOutputStream« in ein Byte-Feld schreiben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_004.htm#mje1eff635da76d0cbd2c4c316ee940cfb" class="navnav">17.4.5 Mit »ByteArrayInputStream« aus einem Byte-Feld lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjafc99f810e12c276ba2a4b6fc3c009c3" class="navh">17.5 Datenströme filtern und verketten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj4466c357c7508a8eb1ceaaaa7a22f5ed" class="navh">17.5.1 Streams als Filter verketten (verschalen)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj3a1085565ee3f519c058eb06e024f57a" class="navh">17.5.2 Gepufferte Ausgaben mit »BufferedWriter«/»BufferedOutputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjd7529c220ef65a0b793a27365ea5de14" class="navh">17.5.3 Gepufferte Eingaben mit »BufferedReader«/»BufferedInputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj019dc3443d19cfbdda730582336dc29d" class="navh">17.5.4 »LineNumberReader« zählt automatisch Zeilen mit *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj46d4c0c0873fbee2cbb4dbbf6aacfb92" class="navh">17.5.5 Daten mit der Klasse »PushbackReader« zurücklegen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjeee25cb2d512bd9c6098a285327bb9de" class="navh">17.5.6 DataOutputStream/DataInputStream *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj5ca3c8f350c3026418585f4f6765a4a7" class="navh">17.5.7 Basisklassen für Filter *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj9f0672d3026eda914c090ee852a9042f" class="navh">17.5.8 Die Basisklasse »FilterWriter« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjcf7a24a8d32eab395c95b5a1a055ee61" class="navh">17.5.9 Ein LowerCaseWriter *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj4744fe492703c6ebebb6a59fc1ecab41" class="navh">17.5.10 Eingaben mit der Klasse »FilterReader« filtern *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjbb86eafceec41ba0b8b469e325491f65" class="navh">17.5.11 Anwendungen für »FilterReader« und »FilterWriter« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_006.htm#mj23b9709abc382e2f5711eb2fa2afe62a" class="navnav">17.6 Vermittler zwischen Byte-Streams und Unicode-Strömen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_006.htm#mj3d46af3cebae8a6b48a1b86f51aa9a9a" class="navnav">17.6.1 Datenkonvertierung durch den »OutputStreamWriter«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_006.htm#mj144d7a0549a2ce1fab9915120fb31b22" class="navnav">17.6.2 Automatische Konvertierungen mit dem »InputStreamReader«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_007.htm#mjfe86e50114d12487bf98150109f0c80e" class="navnav">17.7 Kommunikation zwischen Threads mit Pipes *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_007.htm#mj5543b5920d0846d094719457aed5af2d" class="navnav">17.7.1 »PipedOutputStream« und »PipedInputStream«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_007.htm#mj59d39f069c9dee074ea833ee91cdb61d" class="navnav">17.7.2 »PipedWriter« und »PipedReader«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_008.htm#mjbbc77ec964ae1ebbe66c5eb2007a8b82" class="navnav">17.8 Datenkompression *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_008.htm#mj3a803e5a22241029d6675e5d613ea7e2" class="navnav">17.8.1 Java-Unterstützung beim Komprimieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_008.htm#mj7fca467b6415e4b9fe73aee4c8e16a50" class="navnav">17.8.2 Datenströme komprimieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_008.htm#mje0c8562dbd63f757609825045dddf21d" class="navnav">17.8.3 Zip-Archive</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_008.htm#mjd663fcaaa21f8f86000c0a811e58b9f1" class="navnav">17.8.4 Jar-Archive</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_009.htm#mj7b8d560bda25a4f29394a149b2c3d535" class="navnav">17.9 Prüfsummen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_009.htm#mje3d5968795a85089bfd586581f1b781a" class="navnav">17.9.1 Die Schnittstelle Checksum</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_009.htm#mj9cdca16397ae80dcd9d85adf2cf3cc2f" class="navnav">17.9.2 Die Klasse »CRC32«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_009.htm#mj50d1509644070e5a1d40daa4faa61fa9" class="navnav">17.9.3 Die Adler32-Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_010.htm#mjfbe8cb1105d7dfaf6adbc23f31c81b93" class="navnav">17.10 Persistente Objekte und Serialisierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj69bf799342565da382851751b8405c7a" class="navnav">17.10.1 Objekte mit der Standard-Serialisierung speichern und lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj9d80b91a6c19f204a99e533d4b06d998" class="navnav">17.10.2 Zwei einfache Anwendungen der Serialisierung *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj4cfaf8e1986ce009185bb267467eb491" class="navnav">17.10.3 Die Schnittstelle »Serializable«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mjcafe7062d212cfb4fcf71bb901c8099c" class="navnav">17.10.4 Nicht serialisierbare Attribute aussparen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mjd107c87fbdb86f55755ffc6b4039e012" class="navnav">17.10.5 Das Abspeichern selbst in die Hand nehmen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mjb643b06ff5b465827ea26c24669f7289" class="navnav">17.10.6 Tiefe Objektkopien *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj263338363082753d9e0405edbfce3f51" class="navnav">17.10.7 Versionenverwaltung und die SUID</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mj07f5c3cb185628598b5c79a3729d9f9d" class="navnav">17.10.8 Wie die »ArrayList« serialisiert *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_010.htm#mjfcd0e0b26ebafe7b761d60df5980a4cd" class="navnav">17.10.9 Probleme mit der Serialisierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_011.htm#mj127a190a2c34664de897acc631316756" class="navnav">17.11 Alternative Datenaustauschformate</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_011.htm#mjf9ee0e42eb705d67748dc15d0336cb3f" class="navnav">17.11.1 Serialisieren in XML-Dateien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_011.htm#mje0da83ef3a9c48ec1e3010dacb6e808f" class="navnav">17.11.2 XML-Serialisierung von JavaBeans mit JavaBeans Persistence *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_011.htm#mja49e87eb234ecf53ab600822784dddcb" class="navnav">17.11.3 Open-Source Bibliothek XStream *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_012.htm#mja2c8f5a4b1baf6bb787a020787e01cc9" class="navnav">17.12 Tokenizer *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_17_012.htm#mjd6c5137e5c1c6b9e9b82dbd43f2c974a" class="navnav">17.12.1 StreamTokenizer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_17_013.htm#mj4a4cb19892fe3082f19af7d71ff8b2e5" class="navnav">17.13 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjafc99f810e12c276ba2a4b6fc3c009c3" name="mjafc99f810e12c276ba2a4b6fc3c009c3"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">17.5</span> Datenströme filtern und verketten  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>So wie im alltäglichen Leben Filter beim Kaffee oder bei Fotoapparaten eine große Rolle spielen, so sind sie auch bei Datenströmen zu finden. Immer dann, wenn Daten von einer Quelle gelesen oder in eine Senke geschrieben werden, können Filter die Daten auf dem Weg verändern. Die Java-Bibliothek sieht eine ganze Reihe von Filtern vor, die sich zwischen die Kommunikation schalten können.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 17.6    </strong>Filter zwischen Ein- und Ausgabe</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Eingabe</span>
</td>
<td class="tabellenkopf"><span class="cfett">Ausgabe</span>
</td>
<td class="tabellenkopf"><span class="cfett">Anwendung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">BufferedInputStream</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">BufferedOutputStream</span></p>
</td>
<td class="tabellentext" rowspan="2">
<p>Daten puffern</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">BufferedReader</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">BufferedWriter</span></p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">CheckedInputStream</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">CheckedOutputStream</span></p>
</td>
<td class="tabellentext">
<p>Checksumme berechnen</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">DataInputStream</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">DataOutputStream</span></p>
</td>
<td class="tabellentext">
<p>primitive Datentypen aus und in den Strom</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">DigestInputStream</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">DigestOutputStream</span></p>
</td>
<td class="tabellentext">
<p>Digest (Checksumme) mitberechnen</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">InflaterInputStream</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">DeflaterOutputStream</span></p>
</td>
<td class="tabellentext">
<p>Kompression von Daten</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">LineNumberInputStream</span></p>
</td>
<td class="tabellentext"> </td>
<td class="tabellentext" rowspan="2">
<p>Mitzählen von Zeilen</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">LineNumberReader</span></p>
</td>
<td class="tabellentext"> </td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">PushbackInputStream</span></p>
</td>
<td class="tabellentext"> </td>
<td class="tabellentext" rowspan="2">
<p>Daten in den Lesestrom zurücklegen</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">PushbackReader</span></p>
</td>
<td class="tabellentext"> </td>
</tr>
<tr>
<td class="tabellentext">
<p><span class="clisting">CipherInputStream</span></p>
</td>
<td class="tabellentext">
<p><span class="clisting">CipherOutputStream</span></p>
</td>
<td class="tabellentext">
<p>Daten verschlüsseln und entschlüsseln</p>
</td>
</tr>
</table><br><p>Der <span class="clisting">CipherOutputStream</span> stammt als Einziger aus dem Paket <span class="clisting">javax.crypto</span>, manche Typen sind aus <span class="clisting">java.util.zip</span>, alle anderen stammen aus <span class="clisting">java.io</span>.</p><a id="mj4466c357c7508a8eb1ceaaaa7a22f5ed" name="mj4466c357c7508a8eb1ceaaaa7a22f5ed"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">17.5.1</span> Streams als Filter verketten (verschalen)  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Funktionalität der bisher vorgestellten Ein-/Ausgabe-Klassen reicht für den Alltag zwar aus, doch sind Ergänzungen gefordert, die die Fähigkeiten der Klassen erweitern; so zum Beispiel beim Puffern. Da die Programmlogik zur Pufferung mit Daten unabhängig von der Quelle ist, aus der die Daten stammen, findet sich die Pufferung in einer gesonderten Klasse. Java implementiert hier ein bekanntes Muster, das sich <span class="ckursiv">Dekorator</span> nennt. Zwei Zeilen sollen dieses Prinzip verdeutlichen, um gepufferte Daten in eine Datei zu schreiben:</p>
<div class="listing"><pre class="prettyprint">Writer<span class="cfett"> fw</span> = new FileWriter( filename );
Writer bw = new BufferedWriter(<span class="cfett"> fw</span> );</pre></div>
<p>Der Konstruktor von <span class="clisting">BufferedWriter</span> nimmt einen beliebigen anderen <span class="clisting">Writer</span> auf, denn der Pufferung ist es egal, ob die Daten in eine Datei oder ins Netzwerk geschrieben werden. Das Prinzip ist also immer, dass der Filter einen anderen Strom annimmt, an den er die Daten weitergibt oder von dem er sie holt.</p>
<p>Schauen wir uns die Klassen im Paket <span class="clisting">java.io</span> genau an, die andere Ströme im Konstruktor entgegennehmen:</p>
<ul class="gp">
<li><span class="clisting">BufferedWriter</span>, <span class="clisting">PrintWriter</span>, <span class="clisting">FilterWriter</span> nehmen <span class="clisting">Writer</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedReader</span>, <span class="clisting">FilterReader</span>, <span class="clisting">LineNumberReader</span>, <span class="clisting">PushbackReader, StreamTokenizer</span> nehmen <span class="clisting">Reader</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedOutputStream</span>, <span class="clisting">DataOutputStream</span>, <span class="clisting">FilterOutputStream</span>, <span class="clisting">ObjectOutputStream</span>, <span class="clisting">OutputStreamWriter</span>, <span class="clisting">PrintStream</span>, <span class="clisting">PrintWriter</span> nehmen <span class="clisting">OutputStream</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedInputStream</span>, <span class="clisting">DataInputStream</span>, <span class="clisting">FilterInputStream</span>, <span class="clisting">InputStreamReader</span>, <span class="clisting">ObjectInputStream</span>, <span class="clisting">PushbackInputStream</span> nehmen <span class="clisting">InputStream</span>.</li>
</ul><a id="mj3a1085565ee3f519c058eb06e024f57a" name="mj3a1085565ee3f519c058eb06e024f57a"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">17.5.2</span> Gepufferte Ausgaben mit »BufferedWriter«/»BufferedOutputStream«  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klassen <span class="clisting">BufferedWriter</span> und <span class="clisting">BufferedOutputStream</span> haben die Aufgabe, die mittels <span class="clisting">write()</span> in den Ausgabestrom geleiteten Ausgaben zu puffern. Dies ist immer dann nützlich, wenn viele Schreiboperationen gemacht werden, denn das Puffern macht insbesondere Dateioperationen wesentlich schneller, da so mehrere Schreiboperationen zu einer zusammengefasst werden. Um die Funktionalität eines Puffers zu erhalten, besitzen die Klassen einen internen Puffer, in dem die Ausgaben von <span class="clisting">write()</span> zwischengespeichert werden. Standardmäßig fasst der Puffer 8.192 Symbole. Er kann aber über einen parametrisierten Konstruktor auf einen anderen Wert gesetzt werden. Erst wenn der Puffer voll ist oder die Methoden <span class="clisting">flush()</span> oder <span class="clisting">close()</span> aufgerufen werden, werden die gepufferten Ausgaben geschrieben. Durch die Verringerung tatsächlicher <span class="clisting">write()</span>-Aufrufe an das externe Gerät erhöht sich die Geschwindigkeit der Anwendung im Allgemeinen deutlich.</p>
<div class="bildbox">
<p><a name="IDA022B"></a><a onClick="OpenWin('bilder/365_java_12_002.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_12_002.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Um einen <span class="clisting">BufferedWriter</span>/<span class="clisting">BufferedOutputStream</span> anzulegen, gibt es zwei Konstruktoren, denen ein bereits existierender <span class="clisting">Writer</span>/<span class="clisting">OutputStream</span> übergeben wird. An diesen <span class="clisting">Writer</span>/<span class="clisting">OutputStream</span> wird dann der Filter seinerseits die Ausgaben weiterleiten, insbesondere nach einem Aufruf von <span class="clisting">flush()</span>, <span class="clisting">close()</span> oder einem internen Überlauf.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">BufferedWriter</span>     class java.io.<span class="cfett">BufferedOutputStream</span>
extends Writer                   extends FilterOutputStream</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">BufferedWriter( Writer out )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedOutputStream( OutputStream out )</span>
Erzeugt einen puffernden Ausgabestrom mit der Puffergröße von 8.192 Symbolen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedWriter( Writer out, int sz )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedOutputStream( OutputStream out, int size )</span>
Erzeugt einen puffernden Ausgabestrom mit einer Puffergröße. Ist sie nicht echt größer 0, gibt es eine <span class="clisting">IllegalArgumentException</span>.</li>
</ul>
<p>Alle <span class="clisting">write()</span>- und <span class="clisting">append()</span>-Methoden sind so implementiert, dass die Daten erst im Puffer landen. Wenn der Puffer voll ist &#8211; oder <span class="clisting">flush()</span> aufgerufen wird &#8211;, werden sie an den im Konstruktor übergebenen <span class="clisting">Writer</span> durchgespült.</p>
<h4 class="t4">Beispiel zum »BufferedWriter« mit »FileWriter« und »PrintWriter«</h4>
<p>Ein <span class="clisting">FileWriter</span> sichert Daten in einer Datei. Ein <span class="clisting">BufferedWriter</span> soll aber vorher die Daten erst einmal sammeln, sodass sie erst beim Flush an den <span class="clisting">FileWriter</span> gehen. Der Anwendungsentwickler soll in unserem Beispiel aber nicht direkt den <span class="clisting">BufferedWriter</span> nutzen, sondern ihn als allgemeinen <span class="clisting">Writer</span> im Konstruktor von <span class="clisting">PrintWriter</span> übergeben. Ein <span class="clisting">PrintWriter</span> besitzt die komfortablen Methoden <span class="clisting">print()</span>, <span class="clisting">println()</span> und <span class="clisting">printf()</span>, sodass wir nicht mehr nur auf <span class="clisting">write()</span>-Methoden vom <span class="clisting">Writer</span> angewiesen sind:</p>
<p class="tabunter"><strong>Listing 17.10    </strong>com/tutego/insel/io/writer/ChainedWriter.java, main()</p>
<div class="listing"><pre class="prettyprint">PrintWriter pw = null;
try
{
 <span class="cfett"> Writer fw = new FileWriter( "charArrayWriterDemoPuffer.txt" );</span>
 <span class="cfett"> Writer bw = new BufferedWriter( fw );</span>
 <span class="cfett"> pw = new PrintWriter( bw );
</span><span class="clisting">
  for ( int i = 1; i &lt; 10000; i++ )
    pw.println( "Zeile " + i );
}
catch ( IOException e ) {
  System.err.println( "Error creating file!" );</span>
}
finally {
  if ( pw != null )
    pw.close();
}</pre></div>
<p>Zusätzlich bietet die Klasse <span class="clisting">BufferedWriter</span> die Methode <span class="clisting">newLine()</span>, die in der Ausgabe eine neue Zeile beginnt. Das Zeichen für den Zeilenwechsel wird aus der Systemeigenschaft <span class="clisting">line.separator</span> genommen. Da sie intern mit der <span class="clisting">write()</span>-Methode arbeitet, kann sie eine <span class="clisting">IOException</span> auslösen.</p><a id="mjd7529c220ef65a0b793a27365ea5de14" name="mjd7529c220ef65a0b793a27365ea5de14"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">17.5.3</span> Gepufferte Eingaben mit »BufferedReader«/»BufferedInputStream«  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klassen <span class="clisting">BufferedReader</span> und <span class="clisting">BufferedInputStream</span> puffern Eingaben. Die Daten werden also zuerst in einen Zwischenspeicher geladen, was insbesondere bei Dateien zu weniger Zugriffen auf den Datenträger führt und so die Geschwindigkeit der Anwendung erhöht.</p>
<p>Die Klassen <span class="clisting">BufferedReader</span> und <span class="clisting">BufferedInputStream</span> besitzen je zwei Konstruktoren. Bei einem lässt sich die Größe des internen Puffers angeben. Die Puffergröße beträgt wie beim <span class="clisting">BufferedWriter</span>/<span class="clisting">BufferedOutputStream</span> standardmäßig 8.192 Einträge.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">BufferedReader</span>     class java.io.<span class="cfett">BufferedInputStream</span>
extends Reader                   extends FilterInputStream</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">BufferedReader( Reader in )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedInputStream( InputStream in )</span>
Erzeugt einen puffernden Zeichenstrom mit der Puffergröße von 8.192.</li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedReader( Reader in, int sz )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">BufferedInputStream( InputStream in, int size )</span>
Erzeugt einen puffernden Zeichenstrom mit der gewünschten Puffergröße.</li>
</ul>
<h4 class="t4">Programm zur Anzeige von Dateien</h4>
<p>Das folgende Programm implementiert ein einfaches »cat«-Kommando [Der kurze Name »cat« stammt von »catenate«, einem Synonym für »concatenate«.
]  von Unix, um Dateiinhalte über die Standardausgabe auszugeben. Die Dateinamen werden auf der Kommandozeile übergeben:</p>
<p class="tabunter"><strong>Listing 17.11    </strong>com/tutego/insel/io/stream/cat.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.stream;

import java.io.*;

class cat
{
  public static void main( String[] args )
  {
    for ( String filename : args ) {
      try {
        InputStream in = new BufferedInputStream( new FileInputStream(filename) );

        try {
          for ( int c; (c = in.read()) != &#8211;1 /* EOF */; )
            System.out.write( c );
        }
        finally {
          in.close();
        }
      }
      catch ( IOException e ) {
        System.err.println( "cat: Fehler beim Verarbeiten von " + filename );
        System.exit( 1 );
      }
    } // end for
  }
}</pre></div>
<p>Die Dateiangaben nimmt das Programm über die Kommandozeile entgegen; etwa so:</p>
<div class="listing"><pre class="prettyprint">$ java com.tutego.insel.io.stream.cat adam.txt eva.txt</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett"> Hinweis   </span>Insbesondere bei externen Hintergrundspeichern macht eine Pufferung Sinn. So sollten zum Beispiel die File-Klassen immer gepuffert werden, insbesondere, wenn einzelnde Bytes/Zeichen gelesen oder geschrieben werden.</p>
<p class="BStandard"><span class="cfett">Ohne Pufferung In der Regel schneller mit Pufferung</span></p>
<p class="BStandard"><span class="clisting">new FileReader(f) new BufferedReader(new FileReader(f))</span></p>
<p class="BStandard"><span class="clisting">new FileWriter(f) new BufferedWriter(new FileWriter(f))</span></p>
<p class="BStandard"><span class="clisting">new FileInputStream(f) new BufferedInputStream(new FileInputStream(f))</span></p>
<p class="BStandard"><span class="clisting">new FileOutputStream(f) new BufferedOutputStream(new FileOutputStream(f))</span></p>
</td>
</tr>
</table><br><h4 class="t4">Zeilen lesen mit »BufferedReader« und »readLine()«</h4>
<p>Die Klasse <span class="clisting">BufferedReader</span> stellt die Methode <span class="clisting">readLine()</span> zur Verfügung, die eine komplette Textzeile liest und als String an den Aufrufer zurückgibt; <span class="clisting">BufferedOutputStream</span> als Byte-orientierte Klasse bietet die Methode nicht an.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">BufferedReader</span>
extends Reader</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String readLine</span><span class="clisting">()</span>
Liest eine Zeile bis zum Zeilenende und gibt den String ohne die Endzeichen zurück. Die Rückgabe ist <span class="clisting">null</span>, wenn der Stream am Ende ist.</li>
</ul>
<p>Da ein <span class="clisting">BufferedReader</span> Markierungen und Sprünge erlaubt, werden die entsprechenden Methoden von <span class="clisting">Reader</span> überschrieben.</p><a id="mj019dc3443d19cfbdda730582336dc29d" name="mj019dc3443d19cfbdda730582336dc29d"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">17.5.4</span> »LineNumberReader« zählt automatisch Zeilen mit *  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Aus <span class="clisting">BufferedReader</span> geht direkt die &#8211; bisher einzige &#8211; Unterklasse <span class="clisting">LineNumberReader</span> hervor, die Zeilennummern zugänglich macht. Sie verfügt damit natürlich auch über <span class="clisting">readLine()</span>. Mit <span class="clisting">getLineNumber()</span> und <span class="clisting">setLineNumber()</span> lässt sich aber zusätzlich auf die Zeilennummer zugreifen. Dass die Zeilennummer auch geschrieben werden kann, ist sicherlich ungewöhnlich, intern wird aber nur die Variable <span class="clisting">lineNumber</span> geschrieben; der Datenzeiger wird nicht verändert. Bei jedem <span class="clisting">read()</span> untersuchen die Methoden, ob im Eingabestrom ein »\n«, »\r« oder eine Folge dieser beiden Zeichen vorkommt. Wenn dies der Fall ist, inkrementieren sie die Variable <span class="clisting">lineNumber</span>. Zeilennummern beginnen bei 0.</p>
<div class="bildbox">
<p><a name="IDAGH3B"></a><a onClick="OpenWin('bilder/linenumberreaderuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinlinenumberreaderuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">LineNumberReader</span>
extends BufferedReader</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">LineNumberReader( Reader in )</span>
Dekoriert einen gegebenen <span class="clisting">Reader</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">LineNumberReader( Reader in, int sz )</span>
Dekoriert einen gegebenen <span class="clisting">Reader</span> mit gegebener Puffer-Größe.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getLineNumber()</span>
Liefert die aktuelle Zeilennummer.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void setLineNumber( int lineNumber )</span>
Setzt die aktuelle Zeilennummer.</li>
</ul><a id="mj46d4c0c0873fbee2cbb4dbbf6aacfb92" name="mj46d4c0c0873fbee2cbb4dbbf6aacfb92"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">17.5.5</span> Daten mit der Klasse »PushbackReader« zurücklegen *  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Klassen <span class="clisting">PushbackReader</span> und <span class="clisting">PushbackInputStream</span> können schon gelesene Eingaben wieder in den Strom zurücklegen. Das ist nützlich für so genannte <span class="ckursiv">vorausschauende Parser</span>, die eine Wahl anhand des nächsten gelesenen Zeichens treffen. Mit den beiden Klassen kann dieses Vorschau-Zeichen wieder in den Eingabestrom gelegt werden, wenn der Parser den Weg doch nicht verfolgen möchte. Der nächste Lesezugriff liest dann nämlich dieses zurückgeschriebene Zeichen.</p>
<p>Die Filterklassen besitzen einen internen Puffer beliebiger Größe, in dem Symbole gespeichert werden, um sie später zurückholen zu können. Im Folgenden wollen wir uns nur mit dem <span class="clisting">PushbackReader</span> beschäftigen; die Nutzung der Klasse <span class="clisting">PushbackInputStream</span> ist ähnlich.</p>
<div class="bildbox">
<p><a name="IDABJ3B"></a><a onClick="OpenWin('bilder/pushbackuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinpushbackuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">PushbackReader</span>
extends FilterReader</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">PushbackReader( Reader in )</span>
Erzeugt einen <span class="clisting">PushbackReader</span> aus dem Reader <span class="clisting">in</span> mit der Puffergröße 1.</li>
</ul>
<ul class="gp">
<li><span class="clisting">PushbackReader( Reader in, int size )</span>
Erzeugt einen <span class="clisting">PushbackReader</span> aus dem Reader <span class="clisting">in</span> mit der Puffergröße <span class="clisting">size</span>.</li>
</ul>
<p>Um ein Zeichen oder eine Zeichenfolge wieder in den Eingabestrom zu legen, wird die Methode <span class="clisting">unread()</span> ausgeführt.</p>
<ul class="gp">
<li><span class="clisting">public void unread( int c ) throws IOException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">public void unread( char[] cbuf, int off, int len ) throws IOException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">public void unread( char[] cbuf ) throws IOException</span>
Legt ein Zeichen oder ein Feld von Zeichen zurück in den Zeichenstrom.</li>
</ul>
<p><span class="clisting">PushbackReader</span> ist ein Eingabefilter und die einzige Klasse, die direkt aus <span class="clisting">FilterReader</span> abgeleitet ist.</p>
<h4 class="t4">Zeilennummern entfernen mit einem »PushbackReader«</h4>
<p>Das nächste Programm demonstriert die Möglichkeiten eines <span class="clisting">PushbackReader</span>. Die Implementierung wirkt möglicherweise etwas gezwungen, sie zeigt jedoch, wie <span class="clisting">unread()</span> eingesetzt werden kann. Das Programm löst folgendes Problem: Wir haben eine Textdatei (im Programm einfach als String über einen <span class="clisting">StringReader</span> zur Verfügung gestellt), in der Zeilennummern mit dem String verbunden sind.</p>
<div class="listing"><pre class="prettyprint">134Erste Zeile
234Zeile</pre></div>
<p>Wir wollen nun die Zahlen vom Rest der Zeilen trennen. Dazu lesen wir so lange die Zahlen ein, bis ein Zeichen folgt, bei dem <span class="clisting">Character.isDigit()</span> die Rückgabe <span class="clisting">false</span> ergibt. Dann wissen wir, dass wir keine Ziffer mehr im Strom haben. Das Problem ist nun, dass zum Test schon ein Zeichen mehr gelesen werden musste. In einem normalen Programm ohne die Option, das Zeichen zurücklegen zu können, würde das ungemütlich. Dieses Zeichen müsste dann gesondert behandelt werden, da es das erste Zeichen der neuen Eingabe ist und nicht mehr zur Zahl gehört. Doch anstelle dieser Sonderbehandlung legen wir es einfach wieder mit <span class="clisting">unread()</span> in den Datenstrom, und dann kann der nachfolgende Programmcode einfach so weitermachen, als ob nichts gewesen wäre:</p>
<p class="tabunter"><strong>Listing 17.12    </strong>com/tutego/insel/io/stream/PushbackReaderDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">String s = "134Erste Zeile\n234Zeile";

PushbackReader in = new PushbackReader( new StringReader(s) );

for ( int c; ; )
{

  try
  {
    int number = 0;

    // Read until no digit

    while ( Character.isDigit((char)(<span class="cfett">c = in.read()</span>)) )
      number = number * 10 + Character.digit( c, 10 );

    if ( c == &#8211;1 )         // Ende erreicht? Dann aufhören
      break;

   <span class="cfett"> in.unread( c );</span>        // Gelesenes Zeichen zurücklegen

    System.out.print( number + ":" );

    while ( (c = in.read()) != &#8211;1 )
    {
      System.out.print( (char) c );

      if ( c == '\n' )
        break;
    }
    if ( c == &#8211;1 )
      break;
  }
  catch ( EOFException e )
  {
    break;
  }
}</pre></div>
<h4 class="t4">»PushbackReader« und das fehlende »readLine()«</h4>
<p>Da <span class="clisting">PushbackReader</span> nicht von <span class="clisting">BufferedReader</span> abgeleitet ist und auch selbst keine Methode <span class="clisting">readLine()</span> anbietet, müssen wir mit einer kleinen Schleife selbst Zeilen lesen. Im Bedarfsfall muss die Zeichenkombination »\r\n« gelesen werden. So wie die Methode von uns jetzt programmiert ist, ist sie auf Unix-Plattformen eingeschränkt, die nur ein einziges Ende-Zeichen einfügen. Doch warum nutzen wir nicht <span class="clisting">readLine()</span>? Wer nun auf die Idee kommt, folgende Zeilen zu schreiben, um doch in den Genuss der Methode <span class="clisting">readLine()</span> zu kommen, ist natürlich auf dem Holzweg:</p>
<div class="listing"><pre class="prettyprint">StringReader   sr = new StringReader( s );
BufferedReader br = new BufferedReader ( sr );
PushbackReader in = new PushbackReader( br );
...
br.readLine();      // Achtung, br!!</pre></div>
<p>Wenn wir dem <span class="clisting">PushbackReader</span> das Zeichen wiedergeben, dann arbeitet der <span class="clisting">BufferedReader</span> genau eine Ebene darüber und bekommt vom Zurückgeben nichts mit. Daher ist es sehr gefährlich, die Verkettung zu umgehen. Im konkreten Fall wird das <span class="clisting">unread()</span> nicht durchgeführt, und das erste Zeichen nach der Zahl fehlt.</p><a id="mjeee25cb2d512bd9c6098a285327bb9de" name="mjeee25cb2d512bd9c6098a285327bb9de"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">17.5.6</span> DataOutputStream/DataInputStream *  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Während der <span class="clisting">OutputStream</span> nur einzelne Bytes bzw. Byte-Felder schreibt und der <span class="clisting">InputStream</span> aus einer Eingabe Bytes lesen kann, erweitern die Klassen <span class="clisting">DataOutputStream</span> und <span class="clisting">DataInputStream</span> diese Schreib- und Lesefähigkeit um primitive Datentypen. Die Vorgaben bekommen sie aus <span class="clisting">DataOutput</span> und <span class="clisting">DataInput</span>, die wir schon bei <span class="clisting">RandomAccessFile</span> sahen. Wichtige Methoden sind zum Beispiel <span class="clisting">writeChar(char)</span>, <span class="clisting">writeInt(int)</span>, <span class="clisting">writeUTF(char)</span> oder <span class="clisting">readUnsignedByte()</span>, <span class="clisting">readLong()</span>, <span class="clisting">readFully(byte[])</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Der <span class="clisting">DataInputStream</span> implementiert <span class="clisting">DataInput</span> und erweitert <span class="clisting">FilterInputStream</span>, was wiederum ein <span class="clisting">InputStream</span> ist. Bei <span class="clisting">InputStream</span> ist für die Methode <span class="clisting">read()</span> eine Rückgabe von &#8211;1 vermerkt, wenn kein Byte mehr gelesen werden kann. Der <span class="clisting">DataInputStream</span> muss aber mit einer Methode wie <span class="clisting">readLong()</span> 8 Byte aus der Eingabe lesen. Sind zum Beispiel nur 7 Byte im Strom und das letzte Byte kann nicht gelesen werden, ist das Ergebnis eine <span class="clisting">EOFException</span>, und nicht &#8211;1 (dass kann auch nicht, da &#8211;1 im Datenstrom stehen könnte). Eine <span class="clisting">IOException</span> kann auch ausgelöst werden, aber nicht, wenn Daten fehlen, sondern wenn beim Lesen der einzelnen Bytes die Ausnahme aufkam.</p>
</td>
</tr>
</table><br><a id="mj5ca3c8f350c3026418585f4f6765a4a7" name="mj5ca3c8f350c3026418585f4f6765a4a7"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">17.5.7</span> Basisklassen für Filter *  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Als Basisklassen für existierende Filter &#8211; und insbesondere für eigene Filter &#8211; sieht die Standardbibliothek folgende Klassen vor:</p>
<ul class="gp">
<li><span class="clisting">FilterInputStream</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">FilterOutputStream</span> für die Binärseite</li>
</ul>
<ul class="gp">
<li><span class="clisting">FilterReader</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">FilterWriter</span> für die Zeichenseite</li>
</ul>
<p>Eine konkrete Filter-Klasse überschreibt nötige Methoden ihrer Basisklassen (also vom <span class="clisting">InputStream</span>, <span class="clisting">OutputStream</span>, <span class="clisting">Reader</span> oder <span class="clisting">Writer</span>) und ersetzt diese durch neue Methoden mit erweiterter Funktionalität. Die folgende Abbildung stellt die zentralen Filter vor:</p>
<p>Am UML-Diagramm fällt besonders auf, dass jeder Filter zum einen selbst ein Stream ist und zum anderen einen Stream verwaltet. Damit nimmt er Daten entgegen und leitet sie gleich weiter. Das ist ein bekanntes Design-Pattern und nennt sich <span class="ckursiv">Dekorator</span>.</p>
<div class="bildbox">
<p><a name="IDA4R3B"></a><a onClick="OpenWin('bilder/filteruml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinfilteruml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><a id="mj9f0672d3026eda914c090ee852a9042f" name="mj9f0672d3026eda914c090ee852a9042f"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">17.5.8</span> Die Basisklasse »FilterWriter« *  <a href="#t2t310"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Basis für eigene zeichenorientierte Filter, die vor dem Verarbeiten vom Client modifiziert werden sollen, ist die abstrakte Klasse <span class="clisting">FilterWriter</span>. Wir übergeben im Konstruktor ein <span class="clisting">Writer</span>-Objekt, an das die späteren Ausgaben weitergeleitet werden. Das Konstruktor-Argument wird in dem <span class="clisting">protected</span>-Attribut <span class="clisting">out</span> des <span class="clisting">FilterWriter</span>-Objekts gesichert. In der Unterklasse greifen wir darauf zurück, denn dorthin schickt der Filter seine Ausgaben.</p>
<p>Die Standardimplementierung der Klasse <span class="clisting">FilterWriter</span> überschreibt drei der <span class="clisting">write()</span>-Methoden so, dass die Ausgaben an den im Konstruktor übergebenen <span class="clisting">Writer</span> gehen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.io.<span class="cfett">FilterWriter</span>
extends Writer</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">protected Writer out</span>
Der Ausgabestrom, an den die Daten geschickt werden. Er wird dem Konstruktor übergeben, der ihn in <span class="clisting">out</span> speichert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">protected FilterWriter( Writer out )</span>
Erzeugt einen neuen filternden <span class="clisting">Writer</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void write( int c )</span>
Schreibt ein einzelnes Zeichen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void write( char[] cbuf, int off, int len )</span>
Schreibt einen Teil eines Zeichenfelds.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void write( String str, int off, int len )</span>
Schreibt einen Teil eines Strings.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void close()</span>
Schließt den Stream.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void flush()</span>
Leert den internen Puffer des Streams.</li>
</ul>
<p>Die Klasse ist abstrakt, also können keine direkten Objekte erzeugt werden. Dennoch gibt es einen <span class="clisting">protected</span>-Konstruktor, der für Unterklassen wichtig ist. Abgeleitete Klassen bieten in der Regel selbst einen Konstruktor mit dem Parameter vom Typ <span class="clisting">Writer</span> an und rufen im Rumpf mit <span class="clisting">super(write)</span> den geschützten Konstruktor der Oberklasse <span class="clisting">FilterWriter</span> auf. Über die initialisierte geschützte Objektvariable <span class="clisting">out</span> kommen wir dann an diesen Ur-<span class="clisting">Writer</span>.</p><a id="mjcf7a24a8d32eab395c95b5a1a055ee61" name="mjcf7a24a8d32eab395c95b5a1a055ee61"></a><a name="t39"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t310"></a><h3 class="t3"><span class="cfett">17.5.9</span> Ein LowerCaseWriter *  <a href="#t2t311"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t39"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wir wollen im Folgenden einen Filter schreiben, der alle in den Strom geschriebenen Zeichen in Kleinbuchstaben umwandelt. Drei Dinge sind für einen eigenen <span class="clisting">FilterWriter</span> nötig:</p>
<ul class="gp">
<li>Die Klasse leitet sich von <span class="clisting">FilterWriter</span> ab.</li>
</ul>
<ul class="gp">
<li>Unser Konstruktor nimmt als Parameter ein <span class="clisting">Writer</span>-Objekt und ruft mit <span class="clisting">super(out)</span> den Konstruktor der Oberklasse, also <span class="clisting">FilterWriter</span>, auf. Die Oberklasse speichert das übergebene Argument in der geschützten Objektvariablen <span class="clisting">out</span>, sodass die Unterklassen darauf zugreifen können.</li>
</ul>
<ul class="gp">
<li>Wir überlagern die drei <span class="clisting">write()</span>-Methoden und eventuell noch <span class="clisting">close()</span> und <span class="clisting">flush()</span>. Unsere <span class="clisting">write()</span>-Methoden führen dann die Filteroperationen aus und geben die wahren Daten an den <span class="clisting">Writer</span> weiter.</li>
</ul>
<div class="bildbox">
<p><a name="IDAUV3B"></a><a onClick="OpenWin('bilder/365_java_12_003.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_12_003.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Listing 17.13    </strong>com/tutego/insel/io/stream/LowerCaseWriterDemo.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.stream;

import java.io.*;

class LowerCaseWriter<span class="cfett"> extends FilterWriter</span>
{
  public LowerCaseWriter( Writer writer )
  {
   <span class="cfett"> super( writer );</span>
  }

 <span class="cfett"> @Override</span>
 <span class="cfett"> public void write( int c ) throws IOException</span>
  {
    out.write( Character.toLowerCase((char)c) );
  }

 <span class="cfett"> @Override</span>
 <span class="cfett"> public void write( char[] cbuf, int off, int len ) throws IOException</span>
  {
    out.write( String.valueOf(cbuf).toLowerCase(), off, len );
  }

 <span class="cfett"> @Override</span>
 <span class="cfett"> public void write( String s, int off, int len ) throws IOException</span>
  {
    out.write( s.toLowerCase(), off, len );
  }
}

public class LowerCaseWriterDemo
{
  public static void main( String[] args )
  {
    StringWriter sw = new StringWriter();
    PrintWriter  pw = new PrintWriter( new LowerCaseWriter( sw ) );

    pw.println( "Eine Zeile für klein und groß" );

    System.out.println( sw.toString() );
 }
}</pre></div><a id="mj4744fe492703c6ebebb6a59fc1ecab41" name="mj4744fe492703c6ebebb6a59fc1ecab41"></a><a name="t310"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t311"></a><h3 class="t3"><span class="cfett">17.5.10</span> Eingaben mit der Klasse »FilterReader« filtern *  <a href="#t2t312"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t310"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wie das Schachteln von Ausgabeströmen, so ist auch das Verbinden mehrerer Eingabeströme möglich. Als abstrakte Basiszwischenklasse existiert hier <span class="clisting">FilterReader</span>, die ein <span class="clisting">Reader</span>-Objekt im Konstruktor übergeben bekommt. Dieser sichert das Argument in der <span class="clisting">protected</span>-Variablen <span class="clisting">in</span> (das gleiche Prinzip wie bei den anderen <span class="clisting">FilterXXX</span>-Klassen). Der Konstruktor ist <span class="clisting">protected</span>, da er von der Unterklasse mit <span class="clisting">super()</span> aufgerufen werden soll. Standardmäßig leiten die Methoden vom <span class="clisting">FilterReader</span> die Methoden an den <span class="clisting">Reader</span> aus der Variablen <span class="clisting">in</span> weiter; das heißt etwa: Wenn der <span class="clisting">FilterReader</span> geschlossen wird, wird der Aufruf <span class="clisting">in.close()</span> ausgeführt. Aus diesem Grund muss der <span class="clisting">FilterReader</span> auch alle Methoden von <span class="clisting">Reader</span> überschreiben, da ja eine Umleitung stattfindet.</p>
<div class="bildbox">
<p><a name="IDAYZ3B"></a><a onClick="OpenWin('bilder/365_java_12_006.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_12_006.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class java.io.<span class="cfett">FilterReader</span>
extends Reader</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">protected Reader in</span>
Der Zeicheneingabestrom oder <span class="clisting">null</span>, wenn der Strom geschlossen wurde.</li>
</ul>
<ul class="gp">
<li><span class="clisting">protected FilterReader( Reader in )</span>
Erzeugt einen neuen filternden Reader.</li>
</ul>
<p>Die Methoden <span class="clisting">read()</span>, <span class="clisting">read(char[] cbuf, int off, int len)</span>, <span class="clisting">skip(long n)</span>, <span class="clisting">ready()</span>, <span class="clisting">markSupported()</span>, <span class="clisting">mark(int readAheadLimit)</span>, <span class="clisting">reset()</span> und <span class="clisting">close()</span> werden überschrieben und leiten die Aufrufe direkt an <span class="clisting">Reader</span> weiter. Lösen die Methoden eine Ausnahme aus, leitet der <span class="clisting">FilterReader</span> sie standardmäßig an uns weiter.</p><a id="mjbb86eafceec41ba0b8b469e325491f65" name="mjbb86eafceec41ba0b8b469e325491f65"></a><a name="t311"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t312"></a><h3 class="t3"><span class="cfett">17.5.11</span> Anwendungen für »FilterReader« und »FilterWriter« *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t311"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Unsere nächste Klasse bringt uns etwas näher an das HTML-Format heran. Wir wollen eine Klasse <span class="clisting">HTMLWriter</span> entwerfen, die <span class="clisting">FilterWriter</span> erweitert und Textausgaben in HTML konvertiert. In HTML werden Tags eingeführt, die vom Browser erkannt und besonders behandelt werden. Findet etwa der Browser im HTML-Text eine Zeile der Form <span class="clisting">&lt;strong&gt;Dick&lt;/strong&gt;</span>, so stellt er den Inhalt »Dick« in fetter Schrift dar, da das <span class="clisting">&lt;strong&gt;</span>-Element den Zeichensatz umstellt. Alle Tags werden in spitzen Klammern geschrieben. Daraus ergibt sich, dass HTML einige spezielle Zeichenfolgen (Entities genannt) verwendet. Wenn diese Zeichen auf der HTML-Seite dargestellt werden, muss dies durch spezielle Zeichensequenzen geschehen.</p>
<ul class="gp">
<li><span class="clisting">&lt;</span> wird zu <span class="clisting">&amp;lt;</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">&gt;</span> wird zu <span class="clisting">&amp;gt;</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">&amp;</span> wird zu <span class="clisting">&amp;amp;</span></li>
</ul>
<p>Kommen diese Zeichen im Quelltext vor, so muss unser <span class="clisting">HTMLWriter</span> diese Zeichen durch die entsprechende Sequenz ersetzen. Andere Zeichen sollen nicht ersetzt werden.</p>
<p>Den Browsern ist die Struktur der Zeilen in einer HTML-Datei egal. Sie formatieren wiederum nach speziellen Tags. Zeilenvorschübe etwa werden mit <span class="clisting">&lt;br/&gt;</span> eingeleitet. Unser <span class="clisting">HTMLWriter</span> soll zwei leere Zeilen durch das Zeilenvorschub-Element <span class="clisting">&lt;br/&gt;</span> markieren.</p>
<h4 class="t4">HTML-Dokument schreiben</h4>
<p>Alle sauberen HTML-Dateien haben einen wohldefinierten Anfang und ein wohldefiniertes Ende. Das folgende kleine HTML-Dokument ist wohlgeformt und zeigt, was unser Programm später erzeugen soll:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;
&lt;html&gt;&lt;head&gt;&lt;title&gt;Superkreativer Titel&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;&lt;p&gt;</span>
Und eine Menge von Sonderzeichen:<span class="cfett"> &amp;lt;</span> und<span class="cfett"> &amp;gt;</span> und<span class="cfett"> &amp;amp;</span>
Zweite Zeile<span class="cfett">
&lt;br/&gt;</span>
Leerzeile
Keine Leerzeile danach<span class="cfett">
&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span></pre></div>
<p>Der Titel der Seite sollte im Konstruktor übergeben werden können. Hier nun das Programm für den <span class="clisting">HTMLWriter</span>:</p>
<p class="tabunter"><strong>Listing 17.14    </strong>com/tutego/insel/io/stream/HTMLWriter.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.stream;

import java.io.*;

class HTMLWriter<span class="cfett"> extends FilterWriter</span>
{
  private boolean newLine;

  /**
   * Creates a new filtered HTML writer with a title for the web page.
   *
   * @param out  a Writer object to provide the underlying stream.
   * @throws NullPointerException if &lt;code&gt;out&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
   */
  public HTMLWriter( Writer out, String title )
  {
   <span class="cfett"> super( out );
</span><span class="clisting">
    try
    {
      out.write( "&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"" + </span><img src="common/umbruch.gif" border="0" alt="Umbruch"><span class="clisting">
             " \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n"  );
      out.write( "&lt;html&gt;&lt;head&gt;&lt;title&gt;" + title + </span><img src="common/umbruch.gif" border="0" alt="Umbruch"><span class="clisting">
             "&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;&lt;p&gt;\n" );
    }
    catch ( IOException e )
    {
      e.printStackTrace();
    }
  }

  /**
   * Creates a new filtered HTML writer with no title for the web page.
   *
   * @param out  a Writer object to provide the underlying stream.
   */
  public HTMLWriter( Writer out )
  {</span><span class="cfett">
    this( out, "" );</span>
  }

  /**
   * Writes a single character.
   */
 <span class="cfett"> @Override</span>
 <span class="cfett"> public void write( int c ) throws IOException</span>
  {
    switch ( c )
    {
      case '&lt;':
        out.write( "&amp;lt;" );
        newLine = false;
        break;
      case '&gt;':
        out.write( "&amp;gt;" );
        newLine = false;
        break;
      case '&amp;':
        out.write( "&amp;amp;" );
        newLine = false;
        break;
      case '\n':
        if ( newLine )
        {
          out.write( "&lt;br/&gt;\n" );
          newLine = false;
        }
        else
          out.write( "\n" );
        newLine = true;
        break;
      case '\r':
        break; // ignore

      default :
        out.write( c );
        newLine = false;
    }
  }

  /**
   * Writes a portion of an array of characters.
   *
   * @param  cbuf Buffer of characters to be written
   * @param  off  Offset from which to start reading characters
   * @param  len  Number of characters to be written
   * @exception   IOException If an I/O error occurs
   */
 <span class="cfett"> @Override</span>
 <span class="cfett"> public void write( char[] cbuf, int off, int len ) throws IOException</span>
  {
    for ( int i = off; i &lt; len; i++ )
      write( cbuf[i] );
  }

  /**
   * Writes a portion of a string.
   *
   * @param  str  String to be written.
   * @param  off  Offset from which to start reading characters
   * @param  len  Number of characters to be written
   * @exception   IOException If an I/O error occurs
   */
 <span class="cfett"> @Override</span>
 <span class="cfett"> public void write( String str, int off, int len ) throws IOException</span>
  {
    for ( int i = off; i &lt; len; i++ )
      write( str.charAt( i ) );
  }

  /**
   * Closes the stream.
   *
   * @throws IOException If an I/O error occurs.
   */
 <span class="cfett"> @Override</span>
 <span class="cfett"> public void close() throws IOException</span>
  {
    try
    {
      out.write( "&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;" );
    }
    catch ( IOException e )
    {
      e.printStackTrace();
    }
    out.close();
  }
}</pre></div>
<p>Ein Demo-Programm soll die aufbereiteten Daten in einen <span class="clisting">StringWriter</span> schreiben:</p>
<p class="tabunter"><strong>Listing 17.15    </strong>com/tutego/insel/io/stream/HTMLWriterDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">StringWriter sw = new StringWriter();
HTMLWriter html = new HTMLWriter( sw, "Superkreativer Titel" );
PrintWriter pw  = new PrintWriter( html );

pw.println( "Und eine Menge von Sonderzeichen: &lt; und &gt; und &amp;" );
pw.println( "Zweite Zeile" );
pw.println();
pw.println( "Leerzeile" );
pw.println( "Keine Leerzeile danach" );
pw.close();

System.out.println( sw.toString() );</pre></div>
<h4 class="t4">HTML-Tags mit einem speziellen Filter überlesen</h4>
<p>Unser nächstes Beispiel ist eine Klasse, die den <span class="clisting">FilterReader</span> so erweitert, dass HTML-Tags überlesen werden. Die Klasse <span class="clisting">FilterReader</span> deklariert den notwendigen Konstruktor zur Annahme des tiefer liegenden <span class="clisting">Reader</span> und überschreibt zwei <span class="clisting">read()</span>-Methoden. Die <span class="clisting">read()</span>-Methode ohne Parameter &#8211; die ein <span class="clisting">int</span> für ein gelesenes Zeichen zurückgibt &#8211; legt einfach ein 1 Zeichen großes Feld an und ruft dann die zweite überschriebene <span class="clisting">read()</span>-Methode auf, die die Daten in ein Feld liest. Da dieser Methode neben dem Feld auch noch die Größe übergeben werden kann, müssen wirklich so viele Zeichen gelesen werden. Es reicht einfach nicht aus, die übergebene Anzahl von Zeichen vom tiefer liegenden <span class="clisting">Reader</span> zu lesen, sondern hier müssen wir beachten, dass eingestreute Tags nicht zählen. Die Zeichenkette <span class="clisting">&lt;p&gt;Hallo&lt;p&gt;</span> ist ja nur fünf Zeichen lang und nicht elf!</p>
<p class="tabunter"><strong>Listing 17.16    </strong>com/tutego/insel/io/stream/ HTMLReader.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.stream;

import java.io.*;

class HTMLReader<span class="cfett"> extends FilterReader</span>
{
  private boolean intag = false;

  public HTMLReader( Reader in )
  {
    super( in );
  }

  @Override
  public<span class="cfett"> int read()</span> throws IOException
  {
    char[] buf = new char[1];
    return read( buf, 0, 1 ) == &#8211;1 ? &#8211;1 : buf[0];
  }

  @Override
  public<span class="cfett"> int read( char[] cbuf, int off, int len )</span> throws IOException
  {
    int numchars = 0;

    while ( numchars == 0 )
    {
      numchars = in.read( cbuf, off, len );

      if ( numchars == &#8211;1 ) // EOF?
        return &#8211;1;

      int last = off;

      for ( int i = off; i &lt; off + numchars; i++ )
      {
        if ( ! intag )
        {
          if ( cbuf[i] == '&lt;' )
            intag = true;
          else
            cbuf[last++] = cbuf[i];
        }
        else if ( cbuf[i] == '&gt;' )
          intag = false;
      }
      numchars = last &#8211; off;
    }
    return numchars;
  }
}</pre></div>
<p>Ein Beispielprogramm soll die Daten aus einem <span class="clisting">StringReader</span> ziehen. Auf den <span class="clisting">HTMLReader</span> setzen wir noch einen <span class="clisting">BufferedReader</span> auf, damit wir die komfortable <span class="clisting">readLine()</span>-Methode nutzen können:</p>
<p class="tabunter"><strong>Listing 17.17    </strong>com/tutego/insel/io/stream/HTMLReaderDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">try
{
  String s = "&lt;html&gt;Hallo! &lt;b&gt;Ganz schön fett.&lt;/b&gt;"
             + "Ah, wieder normal.&lt;/html&gt;";

  Reader sr = new StringReader( s );
 <span class="cfett"> Reader hr = new HTMLReader( sr );</span>
  BufferedReader in = new BufferedReader( hr );

  for ( String line; (line = in.readLine()) != null; )
    System.out.println( line );

  in.close();
}
catch ( Exception e )
{
  e.printStackTrace();
}</pre></div>
<p>Es produziert dann die einfache Ausgabe:</p>
<div class="listing"><pre class="prettyprint">Hallo! Ganz schön fett. Ah, wieder normal.</pre></div><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="17.5 Datenströme filtern und verketten"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_17_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_17_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
