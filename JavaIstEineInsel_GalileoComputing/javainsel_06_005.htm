<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 6.5 Auslösen eigener Exceptions</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 6.5 Auslösen eigener Exceptions">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 6.5 Auslösen eigener Exceptions">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_06_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_06_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968" class="navnav">6 Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_001.htm#mj9321c5c3dd6211c2bb893da8e77cf78b" class="navnav">6.1 Problembereiche einzäunen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_001.htm#mj09667c19245b0a48b322fa766dd86d0d" class="navnav">6.1.1 Exceptions in Java mit try und catch</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_001.htm#mjde7dbac5833e26bcf754d8b5df90ff2b" class="navnav">6.1.2 Eine NumberFormatException auffangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_001.htm#mjb4ba177b603272c04ce45ce8b078c105" class="navnav">6.1.3 Ablauf einer Ausnahmesituation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_001.htm#mjb385f2001eab878b098039474440032a" class="navnav">6.1.4 Eigenschaften vom Exception-Objekt</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_001.htm#mj8c86f43f77f7e9e7da49aa21723ec73b" class="navnav">6.1.5 Wiederholung abgebrochener Bereiche *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_001.htm#mjb679137556787a8e305513c7640a6533" class="navnav">6.1.6 Mehrere Ausnahmen auffangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_001.htm#mj88d8245287b37e414bfe9518756fd249" class="navnav">6.1.7 throws im Methodenkopf angeben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_001.htm#mj0dc85a359a70759100957cd4a65f780a" class="navnav">6.1.8 Abschlussbehandlung mit »finally«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_002.htm#mj39419a2ef80f4e7a52181d4035bd5afd" class="navnav">6.2 Die Klassenhierarchie der Fehler</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_002.htm#mj27949c7ba7f27abac25c3c68d6e1734e" class="navnav">6.2.1 Die Exception-Hierarchie</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_002.htm#mj6c5f01922a7c2dd644f2e41c45fbd276" class="navnav">6.2.2 Oberausnahmen auffangen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_002.htm#mj0855da8facac92e2171c7d625006f79e" class="navnav">6.2.3 Alles geht als Exception durch</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_002.htm#mjc3f6411421e854c640407a974a79fa01" class="navnav">6.2.4 Zusammenfassen gleicher catch-Blöcke</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_003.htm#mj496a3283e49d36b5db87d04fd0c0d202" class="navnav">6.3 RuntimeException muss nicht aufgefangen werden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_003.htm#mj04684717a910967f74a97845256fb5cd" class="navnav">6.3.1 Beispiele für RuntimeException-Klassen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_003.htm#mj1b7a4fa13a24557d845699e6356c0d8b" class="navnav">6.3.2 Kann man abfangen, muss man aber nicht</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_004.htm#mjcc9fa42c1c8327e96c824decd4eaff1d" class="navnav">6.4 Harte Fehler: Error *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjb4ba9eb48ba04300bed2201fc59b0813" class="navh">6.5 Auslösen eigener Exceptions</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj7ef7a73173a6a6ba4096fd12ba03c658" class="navh">6.5.1 Mit throw Ausnahmen auslösen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj7844f7fc62723087550e010a35289678" class="navh">6.5.2 Vorhandene Runtime-Fehlertypen kennen und nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj970340e01c0a8d92140b7cd36c8b6106" class="navh">6.5.3 Parameter testen und gute Fehlermeldungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb610c4d39bab82f368ce2423966ec8a4" class="navh">6.5.4 Neue Exception-Klassen deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja12b633a5b1fcfdec6a2406acf3d6158" class="navh">6.5.5 Eigene Ausnahmen als Unterklassen von Exception oder RuntimeException?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj046b20e2dcd62774aa93d0e573c4c9b6" class="navh">6.5.6 Abfangen und weiterleiten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj7de5e280f4b3c74cdbfbfa520fe60054" class="navh">6.5.7 Geschachtelte Ausnahmen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_06_006.htm#mjf23c8575d07f646967546e7dff4684f4" class="navnav">6.6 Assertions *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_006.htm#mj7551d1fca6c28b9aee7c2482c2113eaf" class="navnav">6.6.1 Assertions in eigenen Programmen nutzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_06_006.htm#mj429ac576014c4d5e98b838a728fb9aaf" class="navnav">6.6.2 Assertions aktivieren</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjb4ba9eb48ba04300bed2201fc59b0813" name="mjb4ba9eb48ba04300bed2201fc59b0813"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">6.5</span> Auslösen eigener Exceptions  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Bisher wurden Exceptions lediglich aufgefangen, aber noch nicht selbst erzeugt. In diesem Abschnitt wollen wir sehen, wie eigene Ausnahmen ausgelöst werden. Das kann zum einen erfolgen, wenn die JVM provoziert wird, etwa bei einer ganzzahligen Division durch 0 oder explizit durch <span class="clisting">throw</span>.</p><a id="mj7ef7a73173a6a6ba4096fd12ba03c658" name="mj7ef7a73173a6a6ba4096fd12ba03c658"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">6.5.1</span> Mit throw Ausnahmen auslösen  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Soll eine Methode oder ein Konstruktor selbst eine Exception auslösen, muss zunächst ein Exception-Objekt erzeugt und dann die Ausnahmebehandlung angestoßen werden. Im Sprachschatz dient das Schlüsselwort <span class="clisting">throw</span> dazu, eine Ausnahme zu signalisieren und die Abarbeitung an der Stelle zu beenden.</p>
<p>Als Exception-Typ soll im folgenden Beispiel <span class="clisting">IllegalArgumentException</span> dienen, das ein fehlerhaftes Argument anzeigt:</p>
<p class="tabunter"><strong>Listing 6.13    </strong>com/tutego/insel/exceptions/v1/Player.java, Konstruktor</p>
<div class="listing"><pre class="prettyprint">Player( int age )
{
 <span class="cfett"> if ( age &lt;= 0 )</span>
   <span class="cfett"> throw new IllegalArgumentException( "Kein Alter &lt;= 0 erlaubt!" );

  this.age = age;
}</span></pre></div>
<p>Wir sehen im Beispiel, dass negative oder null Alter-Übergaben nicht gestattet sind und zu einem Fehler führen. Im ersten Schritt baut dazu der <span class="clisting">new</span>-Operator das Exception-Objekt über einen parametrisierten Konstruktor auf. Die Klasse <span class="clisting">IllegalArgumentException</span> bietet einen solchen Konstruktor, der eine Zeichenkette annimmt, die den näheren Grund der Ausnahme übermittelt. Welche Parameter die einzelnen Exception-Klassen deklarieren, ist der API zu entnehmen. Nach dem Aufbau des Exception-Objekts beendet <span class="clisting">throw</span> die lokale Abarbeitung, und die JVM sucht ein <span class="clisting">catch</span>, das die Ausnahme behandelt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Ein <span class="clisting">throws IllegalArgumentException</span> am Konstruktor ist in diesem Beispiel überflüssig, da <span class="clisting">IllegalArgumentException</span> eine <span class="clisting">RuntimeException</span> ist, die nicht über ein <span class="clisting">throws</span> in der Methoden-Signatur angegeben werden muss.</p>
</td>
</tr>
</table><br><p>Lassen wir ein Beispiel folgen, in dem Spieler mit einem negativen Alter initialisiert werden sollen:</p>
<p class="tabunter"><strong>Listing 6.14    </strong>com/tutego/insel/exceptions/v1/Player.java, main()</p>
<div class="listing"><pre class="prettyprint">try
{
 <span class="cfett"> Player d = new Player( &#8211;100 );</span>
  System.out.println( d );
}
catch ( IllegalArgumentException e )
{
  e.printStackTrace();
}</pre></div>
<p>Das führt zu einer Exception, und der Stack-Trace, den <span class="clisting">printStackTrace()</span> ausgibt, ist:</p>
<div class="listing"><pre class="prettyprint">java.lang.IllegalArgumentException: Kein Alter &lt;= 0 erlaubt!
    at com.tutego.insel.exceptions.v1.Player.&lt;init&gt;(Player.java:10)
    at com.tutego.insel.exceptions.v1.Player.main(Player.java:19)</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Löst ein Konstruktor eine Ausnahme aus, ist eine Nutzung wie die folgende problematisch:</p>
<div class="listing"><pre class="prettyprint">Player p = null;
try
{
  p = new Player( v );
}
catch ( IllegalArgumentException e ) { }<span class="cfett">
p.getAge();</span>   // BUMM: <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> NullPointerException</pre></div>
<p class="BStandard">Die Exception führt zu keinem <span class="clisting">Player</span>-Objekt, wenn <span class="clisting">v</span> negativ ist. So bleibt <span class="clisting">p</span> mit <span class="clisting">null</span> vorbelegt. Es folgt in der BUMM-Zeile eine <span class="clisting">NullPointerException</span>. Der Programmcode, der das Objekt erwartet, sollte also mit in den <span class="clisting">try</span>-<span class="clisting">catch</span>-Block.</p>
</td>
</tr>
</table><br><p>Da die <span class="clisting">IllegalArgumentException</span> eine <span class="clisting">RuntimeException</span> ist, hätte es in <span class="clisting">main()</span> auch ohne <span class="clisting">try</span>-<span class="clisting">catch</span> heißen können:</p>
<div class="listing"><pre class="prettyprint">public static void main( String[] args )
{
  Player d = new Player( &#8211;100 );
}</pre></div>
<p>Die Runtime-Exception müsste nicht zwingend aufgefangen werden, aber der Effekt wäre, dass die Ausnahme nicht behandelt würde und das Programm abbräche.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.lang.<span class="cfett">IllegalArgumentException</span>
extends RuntimeException</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">IllegalArgumentException()</span>
Erzeugt eine neue Ausnahme ohne genauere Fehlerangabe.</li>
</ul>
<ul class="gp">
<li><span class="clisting">IllegalArgumentException( String s )</span>
Erzeugt ein neues Fehler-Objekt mit einer detaillierteren Fehlerangabe.</li>
</ul><a id="mj7844f7fc62723087550e010a35289678" name="mj7844f7fc62723087550e010a35289678"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">6.5.2</span> Vorhandene Runtime-Fehlertypen kennen und nutzen  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Java-API bietet eine große Anzahl von Exception-Klassen, und so muss nicht für jeden Fall eine eigene Exception-Klasse deklariert werden. Viele Standard-Fälle, wie falsche Argumente, können durch Standard-Exception-Klassen abgedeckt werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Entwickler sollten nie <span class="clisting">throw new Exception()</span> oder sogar <span class="clisting">throw new Throwable()</span> schreiben, sondern sich immer konkreter Unterklassen bedienen.</p>
</td>
</tr>
</table><br><p>Einige Standard-Runtime-Exception-Unterklassen des <span class="clisting">java.lang</span>-Pakets in der Übersicht:</p>
<h4 class="t4">IllegalArgumentException</h4>
<p>Die <span class="clisting">IllegalArgumentException</span> zeigt an, dass ein Parameter nicht korrekt angegeben ist. Dieser Fehlertyp lässt sich somit nur bei Konstruktoren oder Methoden ausmachen, denen fehlerhafte Argumente übergeben wurden. Oft ist der Grund die Missachtung des Wertebereiches. Wenn die Werte grundsätzlich korrekt sind, darf dieser Fehlertyp nicht ausgelöst werden. Dazu gleich noch ein paar mehr Details.</p>
<h4 class="t4">IllegalStateException</h4>
<p>Objekte haben in der Regel Zustände. Gilt es, Operationen auszuführen, aber die Zustände sind nicht korrekt, so kann die Methode eine <span class="clisting">IllegalStateException</span> auslösen und so anzeigen, dass in dem aktuellen Zustand die Operation nicht möglich ist. Wäre der Zustand korrekt, käme es nicht zu der Ausnahme. Bei statischen Methoden sollte es eine <span class="clisting">IllegalStateException</span> nicht geben. [Im .NET-Framework gibt es eine vergleichbare Ausnahme, die <span class="clisting">System.InvalidOperationException</span>. In Java trifft der Name allerdings etwas besser das Problem.
] </p>
<h4 class="t4">UnsupportedOperationException</h4>
<p>Implementieren Klassen Schnittstellen oder realisieren Klassen abstrakte Methoden von Oberklassen, so muss es immer eine Implementierung geben, auch wenn die Unterklasse die Operation eigentlich gar nicht umsetzen kann oder will. Anstatt den Rumpf der Methode nur leer zu lassen und einen potenziellen Aufrufer glauben zu lassen, die Methode führe etwas aus, sollten diese Methoden eine <span class="clisting">UnsupportedOperationException</span> auslösen. In den API-Dokumentationen werden Methoden, die Unterklassen vielleicht nicht realisieren wollen, als »optionale Operationen« gekennzeichnet.</p>
<div class="bildbox">
<p><a name="IDADU0D"></a><a onClick="OpenWin('bilder/optional operation.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinoptional operation.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 6.4    </strong>Optionale Operationen in der Schnittstelle java.util.List</p>
<p>Unglücklicherweise gibt es auch eine <span class="clisting">javax.naming.OperationNotSupportedException</span>. Doch diese sollte nicht verwendet werden. Sie ist speziell für Namensdienste vorgesehen und auch keine <span class="clisting">RuntimeException</span>.</p>
<h4 class="t4">IndexOutOfBoundsException</h4>
<p>Eine <span class="clisting">IndexOutOfBoundsException</span> löst die JVM automatisch aus, wenn zum Beispiel die Grenzen eines Arrays missachtet werden. Wir können diesen Ausnahmetyp selbst immer dann nutzen, wenn wir Index-Zugriffe haben, etwa auf eine Zeile in einer Datei, und wenn der Index im falschen Bereich liegt. Von <span class="clisting">IndexOutOfBoundsException</span> gibt es die Unterklassen <span class="clisting">ArrayIndexOutOfBoundsException</span> und <span class="clisting">StringIndexOutOfBoundsException</span>. Programmierer werden diese Typen aber in der Regel nicht nutzen. Inkonsistenzen gibt es beim Einsatz von <span class="clisting">IllegalArgumentException</span> und <span class="clisting">IndexOutOfBoundsException</span>. Ist etwa der Index falsch, so entscheiden sich einige Autoren für den ersten Fehlertyp, andere für den zweiten. Beides ist prinzipiell gültig. Die <span class="clisting">IndexOutOfBoundsException</span> ist aber konkreter und zeigt eher ein Im-plementierungsdetail an.</p>
<h4 class="t4">Keine eigene NullPointerException</h4>
<p>Eine <span class="clisting">NullPointerException</span> gehört mit zu den häufigsten Ausnahmen. Die JVM löst diesen Fehler etwa bei folgendem Programmstück aus:</p>
<div class="listing"><pre class="prettyprint">String s = null;
s.length();         // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler"> NullPointerException</pre></div>
<p>Eine <span class="clisting">NullPointerException</span> zeigt immer einen Programmierfehler in einem Stück Code an, und so hat es in der Regel keinen Sinn, diesen Fehler abzufragen &#8211; der Programmierfehler muss behoben werden. Aus diesem Grund wird eine <span class="clisting">NullPointerException</span> in der Regel nie explizit vom Programmierer ausgelöst, sondern von der JVM.</p>
<p>Oft gibt es diese <span class="clisting">NullPointerException</span>, wenn an Methoden <span class="clisting">null</span>-Werte übergeben wurden. Hier muss aus der API-Dokumentation klar hervorgehen, ob <span class="clisting">null</span> als Argument erlaubt ist oder nicht. Wenn nicht, ist es völlig in Ordnung, wenn die Methode eine <span class="clisting">NullPointerException</span> auslöst, wenn fälschlicherweise doch <span class="clisting">null</span> übergeben wurde. Auf <span class="clisting">null</span> zu prüfen, um dann zum Beispiel eine <span class="clisting">IllegalArgumentException</span> auszulösen, ist eigentlich nicht nötig. Allerdings gilt auch hier, dass <span class="clisting">IllegalArgumentException</span> allgemeiner und weniger implementierungsspezifisch als eine <span class="clisting">NullPointerException</span> ist.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Um eine <span class="clisting">NullPointerException</span> auszulösen, ist statt <span class="clisting">throw new NullPointerException();</span> auch einfach ein <span class="clisting">throw null;</span> möglich. Doch da eine selbst aufgebaute <span class="clisting">NullPointerException</span> vermieden werden sollte, ist dieses Idiom nicht wirklich nützlich.</p>
</td>
</tr>
</table><br><a id="mj970340e01c0a8d92140b7cd36c8b6106" name="mj970340e01c0a8d92140b7cd36c8b6106"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">6.5.3</span> Parameter testen und gute Fehlermeldungen  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine <span class="clisting">IllegalArgumentException</span> ist eine wertvolle Ausnahme, die einen internen Fehler anzeigt, dass nämlich eine Methode mit falschen Argumenten aufgerufen wurde. Eine Methode sollte im Idealfall alle Parameter auf ihren korrekten Wertebereich prüfen und nach dem Fail-fast-Verfahren arbeiten, also so schnell wie möglich einen Fehler melden, anstatt Fehler zu ignorieren oder zu verschleppen. Wenn etwa das Alter einer Person bei <span class="clisting">setAge()</span> nicht negativ sein kann, ist eine <span class="clisting">IllegalArgumentException</span> eine gute Wahl. Wenn der Exception-String dann noch aussagekräftig ist, hilft das bei der Behebung des Fehlers ungemein: Der Tipp ist hier, eine aussagekräftige Meldung anzugeben.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Negativbeispiel   </span>Ist der Wertebereich beim Bilden eines Teilstrings falsch, oder ist der Index für einen Feldzugriff zu groß, hagelt es eine <span class="clisting">StringIndexOutOfBoundsException</span> bzw. <span class="clisting">ArrayIndexOutOfBoundsException</span>:</p>
<div class="listing"><pre class="prettyprint">System.out.println( "Orakel-Paul".substring( 0, 20 ) );  //</pre></div>
<p class="BStandard">liefert</p>
<div class="listing"><pre class="prettyprint">Exception in thread "main" java.lang.StringIndexOutOfBoundsException: String index out of range: 20</pre></div>
<p class="BStandard">Und</p>
<div class="listing"><pre class="prettyprint">System.out.println( "Orakel-Paul".toCharArray()[20] );   //</pre></div>
<p class="BStandard">liefert</p>
<div class="listing"><pre class="prettyprint">Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 20</pre></div>
<p class="BStandard">Eine wichtige Information fehlt allerdings! Wie groß ist denn der String bzw. das Feld? Java-Entwickler warten seit über zehn Jahren auf diese Information.</p>
</td>
</tr>
</table><br><p>Da das Testen von Parametern in eine große <span class="clisting">if-throws</span>-Orgie ausarten kann, ist es eine gute Idee, eine Hilfsklasse mit statischen Methoden wie <span class="clisting">isNull()</span>, <span class="clisting">isFalse()</span>, <span class="clisting">isInRange()</span> einzuführen, die dann eine <span class="clisting">IllegalArgumentException</span> auslösen, wenn eben der Parameter nicht korrekt ist. [Die muss nicht selbst geschrieben werden, da die Open-Source-Landschaft mit der Klasse <span class="clisting">org.apache.commons.lang.Validate</span> aus den Apache Commons Lang (<span class="ckursiv"><a href="http://commons.apache.org/lang/" target="_blank">http://commons.apache.org/lang/</a></span>) oder mit <span class="clisting">com.google.common.base.Preconditions</span> von Google Guava (<span class="ckursiv"><a href="http://code.google.com/p/guava-libraries/" target="_blank">http://code.google.com/p/guava-libraries/</a></span>) hier schon Vergleichbares bietet; in jedem Fall ist eine gute Parameterprüfung bei öffentlichen Methoden von Bibliotheken ein Muss.
] </p>
<h4 class="t4">Null-Prüfungen</h4>
<p>Für <span class="clisting">null</span>-Prüfungen wird Java 7 mit <span class="clisting">Objects.nonNull</span><span class="clisting">(reference)</span> eine Methode anbieten, die immer dann eine <span class="clisting">IllegalArgumentException</span> wirft, wenn <span class="clisting">reference == null</span> ist. Optional als zweites Argument lässt sich die Fehlermeldung angeben.</p>
<p>Eine anderer Ansatz sind Prüfungen durch externe Codeprüfungsprogramme. Google zum Beispiel setzt in seinen vielen Java-Bibliotheken auf Parameter-Annotationen wie <span class="clisting">@Nonnull</span> oder <span class="clisting">@Nullable. [</span>Sie wurden in JSR-305: »Annotations for Software Defect Detection« definiert. Java 7 sollte dies ursprünglich unterstützen, doch das wurde gestrichen.
]  Statische Analysetools wie FindBugs (<span class="ckursiv">http://findbugs.sourceforge.net/</span>) testen dann, ob es Fälle geben kann, bei denen die Methode mit null aufgerufen wird. Zur Laufzeit findet der Test jedoch nicht statt.</p><a id="mjb610c4d39bab82f368ce2423966ec8a4" name="mjb610c4d39bab82f368ce2423966ec8a4"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">6.5.4</span> Neue Exception-Klassen deklarieren  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eigene Exceptions sind immer direkte (oder indirekte) Unterklassen von <span class="clisting">Exception</span> (sie können auch Unterklassen von <span class="clisting">Throwable</span> sein, aber das ist unüblich). Eigene <span class="clisting">Exception</span>-Klassen bieten in der Regel zwei Konstruktoren: einen Standard-Konstruktor und einen mit einem String parametrisierten Konstruktor, um eine Fehlermeldung (die <span class="clisting">Exception</span>-Message) anzunehmen und zu speichern.</p>
<p>Um für die Klasse <span class="clisting">Player</span> im letzten Beispiel einen neuen Fehlertyp zu deklarieren, erweitern wir <span class="clisting">RuntimeException</span> zur <span class="clisting">PlayerException</span>:</p>
<div class="bildbox">
<p><a name="IDAS00D"></a><a onClick="OpenWin('bilder/playerexception.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinplayerexception.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Listing 6.15    </strong>com/tutego/insel/exception/v2/PlayerException.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.exception.v2;

public class PlayerException<span class="cfett"> extends RuntimeException</span>
{
  public PlayerException()
  {
  }

  public PlayerException( String s )
  {
    super( s );
  }
}</pre></div>
<p>Nehmen wir uns die Initialisierung mit dem Alter noch einmal vor. Statt der <span class="clisting">IllegalArgument-Exception</span> löst der Konstruktor im Fehlerfall unsere speziellere <span class="clisting">PlayerException</span> aus:</p>
<p class="tabunter"><strong>Listing 6.16    </strong>com/tutego/insel/exception/v2/Player.java, Ausschnitt</p>
<div class="listing"><pre class="prettyprint">if ( age &lt;= 0 )
  throw new<span class="cfett"> PlayerException</span>( " Kein Alter &lt;= 0 erlaubt!" );</pre></div>
<p>Im Hauptprogramm können wir auf die <span class="clisting">PlayerException</span> reagieren, indem wir die Ausnahme explizit mit <span class="clisting">try</span>-<span class="clisting">catch</span> auffangen oder an den Aufrufer weitergeben &#8211; unsere Exception ist ja eine <span class="clisting">RuntimeException</span> und müsste nicht direkt abgefangen werden:</p>
<div class="listing"><pre class="prettyprint">Exception in thread "main"<span class="cfett"> com.tutego.insel.exceptions.v2.PlayerException: Kein </span><img src="common/umbruch.gif" border="0" alt="Umbruch"><span class="cfett"> Alter &lt;= 0 erlaubt!</span>
    at com.tutego.insel.exceptions.v2.Player.&lt;init&gt;(Player.java:10)
    at com.tutego.insel.exceptions.v2.Player.main(Player.java:19)</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Es ist immer eine gute Idee, Unterklassen von <span class="clisting">Exception</span> zu bauen. Würden wir keine Unterklassen anlegen, sondern direkt mit <span class="clisting">throw new Exception()</span> einen Fehler anzeigen, so könnten wir unseren Fehler später nicht mehr von anderen Fehlern unterscheiden. Mit der Hierarchiebildung wird nämlich die Spezialisierung bei mehreren <span class="clisting">catch</span>-Anweisungen sowie eine Unterscheidung mit <span class="clisting">instanceof</span> unterstützt. Wir müssen immer unseren Fehler mit <span class="clisting">catch ( Exception e )</span> auffangen und bekommen so alle anderen Fehler mit aufgefangen, die dann nicht mehr unterschieden werden können. Allerdings sollten Entwickler nicht zu inflationär mit den Ausnahmen-Hierarchien umgehen; in vielen Fällen reicht eine Standard-Ausnahme aus.</p>
</td>
</tr>
</table><br><a id="mja12b633a5b1fcfdec6a2406acf3d6158" name="mja12b633a5b1fcfdec6a2406acf3d6158"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">6.5.5</span> Eigene Ausnahmen als Unterklassen von Exception oder 
RuntimeException?  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Java steht mit der Ausnahmebehandlung über Exceptions nicht allein. Alle modernen Programmiersprachen verfügen über diese Sprachmittel. Allerdings gibt es eine Sache, die Java besonders macht: Die Unterscheidung zwischen geprüften und ungeprüften Ausnahmen. Daher stellt sich beim Design von eigenen Ausnahmenklassen die Frage, ob sie eine Unterklasse von <span class="clisting">RuntimeException</span> sein sollen oder nicht. Einige Entscheidungshilfen:</p>
<ul class="gp">
<li>Betrachten wir, wie die Java-API <span class="ckursiv">geprüfte</span> und <span class="ckursiv">ungeprüfte Ausnahmen</span> einsetzt. Die ungeprüften Ausnahmen signalisieren Programmierfehler, die es zu beheben gilt. Ein gutes Beispiel ist eine <span class="clisting">NullPointerException</span>, <span class="clisting">ClassCastException</span> oder <span class="clisting">ArrayIndexOutOfBound-Exception</span>. Es steht außer Frage, dass Fehler dieser Art Programmierfehler sind und behoben werden müssen. Ein <span class="clisting">catch</span> wäre unnötig, da die Fehler ja im korrekten Code gar nicht auftreten können. Anders ist es bei geprüften Ausnahmen. Die Ausnahmen zeigen Fehler an, die unter gewissen Umständen einfach auftreten können. Eine <span class="clisting">IOException</span> ist nicht schlimmer, denn die Datei kann nun einmal nicht vorhanden sein. Wir sollten uns bei dieser Unterscheidung aber bewusst sein, dass die JVM die Fehler von sich aus auslöst und nicht eine Methode.</li>
</ul>
<ul class="gp">
<li>Soll sich die Anwendung vom dem Fehler »erholen« können oder nicht? Kommt es wegen einer <span class="clisting">RuntimeException</span> zu einem Programmfehler, dann sollte die Anwendung zwar nicht »abstürzen«, allerdings ist ein sinnvolles Weiterarbeiten kaum möglich. Bei geprüften Ausnahmen ist das anders. Sie signalisieren, dass der Fehler behoben und das Programm dann normal fortgesetzt werden kann.</li>
</ul>
<ul class="gp">
<li>Ein Modul kann intern mit <span class="clisting">RuntimeException</span>s arbeiten, und der API-Designer auf der anderen Seite, der Schnittstellen zu Systemen modelliert, kann gut auf geprüfte Ausnahmen zurückgreifen. Das ist einer der Gründe, warum moderne Frameworks wie EJB 3 oder auch Spring fast ausschließlich auf eine <span class="clisting">RuntimeException</span> setzen: Wenn es einen Fehler gibt, dann lässt sich schwer etwas behandeln und einfach korrigieren. Zeigt etwa ein internes Modul beim Datenbankzugriff einen Fehler an, muss die ganze Operation abgebrochen werden, und nichts ist zu retten. Hier gilt im Großen, was auch bei der <span class="clisting">NullPointerException</span> im Kleinen passiert: Der Fehler ist ein echtes Problem, und das Programm kann nicht einfach fortgeführt werden.</li>
</ul>
<ul class="gp">
<li>Geprüfte Ausnahmen können melden, wenn sich der Aufrufer nicht an die Vereinbarung der Methode hält. Die <span class="clisting">FileNotFoundException</span> ist so ein Beispiel. Hätte das Programm mit der <span class="clisting">File</span>-Methode <span class="clisting">exits()</span> vorher nach der Existenz der Datei gefragt, wäre uns diese Ausnahme erspart geblieben. Der Aufrufer ist sozusagen selbst schuld, dass er eine geprüfte Ausnahme bekommt, da er die Rahmenbedingungen nicht einhält. Bei einer ungeprüften Ausnahme ist nicht der Aufrufer an dem Problem schuld, sondern ein Programmierfehler. Da geprüfte Ausnahmen in der Java-Dokumentation auftauchen, ist dem Entwickler klar, was passieren wird, wenn er die Vorbedingungen der Methode nicht einhält. Nach dieser Philosophie müsste eigentlich die <span class="clisting">NumberFormatException</span> eine geprüfte Ausnahme sein, die <span class="clisting">Integer.parseInt()</span> auslöst. Denn der Entwickler hat ja die <span class="clisting">parseInt()</span> mit einem falschen Wert gefüttert, also den Methodenvertrag verletzt. Eine geprüfte Ausnahme wäre nach dieser Philosophie richtig. Auf der anderen Seite lässt sich argumentieren, dass das Missachten von korrekten Parametern ein interner Fehler ist, denn es ist Aufgabe des Aufrufers, das sicherzustellen, und so kann die <span class="clisting">parseInt()</span> mit einer <span class="clisting">RuntimeException</span> aussteigen.</li>
</ul>
<ul class="gp">
<li>Die Unterscheidung zwischen <span class="ckursiv">internen Fehlern</span> und <span class="ckursiv">externen Fehlern</span> erlaubt eine Einteilung in geprüfte und ungeprüfte Ausnahmen. Die Programmierfehler mit Ausnahmen wie <span class="clisting">NullPointerException</span> oder <span class="clisting">ClassCastException</span> lassen sich vermeiden, da wir als Programmierer unseren Quellcode kontrollieren können und die Programmfehler entfernen können. Doch bei externen Fehlern haben wir als Entwickler keine Chance. Das Netzwerk kann plötzlich zusammenbrechen und uns eine <span class="clisting">SocketException</span> und <span class="clisting">IOException</span> bescheren. Alles das liegt nicht in unserer Hand und kann auch durch noch so sorgsame Programmierung nicht verhindert werden. Das schwächt natürlich das Argument aus dem letzten Aufzählungspunkt ab: Es lässt sich zwar abfragen, ob eine Datei vorhanden ist, um eine <span class="clisting">FileNotFoundException</span> abzuwehren, doch wenn die Festplatte plötzlich Feuer fängt, ist uns eine <span class="clisting">IOException</span> gewiss, denn Java-Programme sind nicht wie folgt aufgebaut: »Frage, ob die Festplatte bereit ist, und dann lies.« Wenn der Fehler also nicht innerhalb des Programms liegt, sondern außerhalb, lassen sich geprüfte Ausnahmen verwenden.</li>
</ul>
<ul class="gp">
<li>Bei geprüften Ausnahmen in Methodensignaturen muss sich der Nutzer auf eine bestimmte API einstellen. Eine spätere Änderung des Ausnahmetyps ist problematisch, da alle <span class="clisting">catch</span>-Anweisungen beziehungsweise <span class="clisting">throws</span>-Klauseln abgeändert werden müssen. <span class="clisting">RuntimeExcpetions</span> sind hier flexibler. Werden Programme sehr agil entworfen, und ändert sich der Ausnahmetyp im Lebenslauf einer Software öfter, kann das zu vielen Änderungen führen, die natürlich Zeit und somit Geld kosten.</li>
</ul>
<p>Der erste Punkt führt in der Java-API zu einigen Entscheidungen, die Entwickler quälen, aber nur konsistent sind, etwa die <span class="clisting">InterruptedException</span>. Jedes <span class="clisting">Thread.sleep()</span> zum Schlafenlegen eines Threads muss eine <span class="clisting">InterruptedException</span> auffangen. Sie kann auftreten, wenn ein Thread von außen einen Interrupt sendet. Da das auf keinen Fall einen Fehler darstellt, ist <span class="clisting">InterruptedException</span> eine geprüfte Ausnahme, auch wenn wir dies oft als lästig empfinden und selten auf die <span class="clisting">InterruptedException</span> reagieren müssen. Bei einem Aufbau einer <span class="clisting">URL</span> ist die <span class="clisting">MalformedURLException</span> ebenfalls lästig, aber stammt die Eingabe aus einer Dialogbox, kann das Protokoll einfach falsch sein. [Luxuriös wäre eine Prüfung zur Compilierzeit, denn wenn etwa <span class="clisting">new URL("http://tutego.de")</span> steht, so kann es die Ausnahme nicht geben. Doch von nötigen <span class="clisting">try-catch</span>-Blöcken, je nachdem, was der Compiler statisch entscheiden kann, sind wir weit entfernt.
] </p>
<p>Geprüfte Ausnahmen sind vielen Entwicklern lästig, was zu einem Problem führt, wenn die Ausnahmen einfach aufgefangen werden, aber nichts passiert &#8211; etwa mit einem leeren <span class="clisting">catch</span>-Block. Der Fehler sollte aber vielleicht nach oben laufen. Das Problem besteht bei einer <span class="clisting">RuntimeException</span> seltener, da sie in der Regel an der richtigen zentralen Stelle behandelt wird.</p>
<p>Wenn wir die Punkte genauer betrachten, dann wird schnell eine andere Tatsache klar, sodass heute eine große Unsicherheit über die richtige <span class="clisting">Exception</span>-Basisklasse besteht. Zwar zwingt uns der Compiler, eine geprüfte <span class="clisting">Exception</span> zu behandeln, aber nichts spricht dagegen, das bei einer ungeprüften Ausnahme ebenfalls zu tun. <span class="clisting">Integer.parseInt()</span> und <span class="clisting">NumberFormatException</span> sind ein gutes Beispiel: Der Compiler zwingt uns nicht zu einem Test, wir machen ihn aber trotzdem. Sind Entwickler konsequent, und prüfen sie Ausnahmen selbstständig, braucht der Compiler den Test prinzipiell nicht zu machen. Daher folgen einige Entwickler einer radikalen Strategie und entwerfen alle Ausnahmen als <span class="clisting">RuntimeException</span>. Die Unterscheidung, ob sich eine Anwendung dann »erholen« soll oder nicht, liegt beim Betrachter und ist nur noch reine Konvention. Mit dieser Alles-ist-ungeprüft-Version würde dann Java gleichauf mit C#, C++, Python, Groovy, … liegen. [Doch eines ist sicher: Java-Vater James Gosling ist dagegen: <span class="ckursiv"><a href="http://www.artima.com/intv/solid.html" target="_blank">http://www.artima.com/intv/solid.html</a></span>.
] </p><a id="mj046b20e2dcd62774aa93d0e573c4c9b6" name="mj046b20e2dcd62774aa93d0e573c4c9b6"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">6.5.6</span> Abfangen und weiterleiten *  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Ausnahme, die ein <span class="clisting">try</span>-<span class="clisting">catch</span>-Block auffängt, kann in <span class="clisting">catch</span> wieder neu ausgelöst werden. Dieses <span class="ckursiv">Re-Throwing</span> zeigt folgendes Beispiel, in dem das Programm den Fehler erst über einen Logger ausgibt und dann weiter nach oben reicht:</p>
<p class="tabunter"><strong>Listing 6.17    </strong>Rethrow.java</p>
<div class="listing"><pre class="prettyprint">import java.util.logging.Logger;

public class Rethrow
{
  private static Logger log = Logger.getAnonymousLogger();

  static void rethrow( RuntimeException e )
  {
    log.warning( "RuntimeException" );

//    e.fillInStackTrace();

   <span class="cfett"> throw e;</span>
  }

  public static void main( String[] args )
  {
   <span class="cfett"> try</span>
   <span class="cfett"> {</span>
     <span class="cfett"> ((String)null).length();</span>
   <span class="cfett"> }</span>
   <span class="cfett"> catch ( NullPointerException e )</span>
   <span class="cfett"> {</span>
     <span class="cfett"> rethrow( e );</span>
   <span class="cfett"> }</span>
  }
}</pre></div>
<p>Die Ausgabe ist:</p>
<div class="listing"><pre class="prettyprint">16.08.2006 18:35:27 Rethrow rethrow
WARNUNG: RuntimeException
Exception in thread "main" java.lang.NullPointerException
    at Rethrow.main(Rethrow.java:20)</pre></div>
<p>Wichtig an dieser Stelle ist die Tatsache, dass der Aufrufstack in <span class="clisting">e</span> gespeichert ist und daher der Stack-Trace nicht die eigene Methode <span class="clisting">rethrow()</span> enthält. Wünschen wir dies, müssen wir den Stack-Trace neu füllen. Dazu dient die Methode <span class="clisting">fillInStackTrace</span><span class="clisting">()</span>. Nehmen wir den Aufruf im oberen Beispiel hinein, folgt die Ausgabe:</p>
<div class="listing"><pre class="prettyprint">16.08.2006 18:36:16 Rethrow rethrow
WARNUNG: RuntimeException
Exception in thread "main" java.lang.NullPointerException
   <span class="cfett"> at Rethrow.rethrow(Rethrow.java:11)</span>
    at Rethrow.main(Rethrow.java:24)</pre></div><a id="mj7de5e280f4b3c74cdbfbfa520fe60054" name="mj7de5e280f4b3c74cdbfbfa520fe60054"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">6.5.7</span> Geschachtelte Ausnahmen *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der Grund für eine Ausnahme mag der sein, dass ein eingebetteter Teil versagt. Das ist vergleichbar mit einer Transaktion: Ist ein Teil der Kette fehlerhaft, so ist der ganze Teil nicht ausführbar. Bei Ausnahmen ist das nicht anders. Nehmen wir an, wir haben eine Methode <span class="clisting">foo()</span>, die im Falle eines Misslingens eine Ausnahme <span class="clisting">HellException</span> auslöst. Ruft unsere Methode <span class="clisting">foo()</span> nun ein Unterprogramm <span class="clisting">bar()</span> auf, das zum Beispiel eine Ein-/Ausgabeoperation tätigt, und das geht schief, wird der Anlass für unsere <span class="clisting">HellException</span> die <span class="clisting">IO-Exception</span> sein. Es liegt also nahe, bei der Nennung des Grunds für das eigene Versagen das Misslingen der Unteraufgabe zu nennen (wieder ein Beweis dafür, wie »menschlich« Programmieren sein kann).</p>
<p>Eine <span class="ckursiv">geschachtelte Ausnahme</span> (engl. <span class="ckursiv">nested exception</span>) speichert einen Verweis auf eine weitere Ausnahme. Wenn ein Exception-Objekt aufgebaut wird, lässt sich der Grund (engl. <span class="ckursiv">cause</span>) als Argument im Konstruktor der <span class="clisting">Throwable</span>-Klasse übergeben. Die Ausnahme-Basisklasse bietet dafür zwei Konstruktoren:</p>
<ul class="gp">
<li><span class="clisting">Throwable( Throwable cause )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Throwable( String message, Throwable cause )</span></li>
</ul>
<p>Der Grund kann über die Methode <span class="clisting">Throwable getCause()</span> erfragt werden.</p>
<p>Da Konstruktoren in Java nicht vererbt werden, bieten die Unterklassen oft Konstruktoren an, um den Grund anzunehmen: Zumindest <span class="clisting">Exception</span> macht das und kommt somit auf vier Erzeuger:</p>
<ul class="gp">
<li><span class="clisting">Exception()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Exception( String message )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Exception( String message, Throwable cause )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Exception( Throwable cause )</span></li>
</ul>
<p>Einige der tiefer liegenden Unterklassen haben dann auch diese Konstruktor-Typen mit <span class="clisting">Throw-able</span>-Parameter, wie <span class="clisting">IOException</span>, <span class="clisting">SQLException</span> oder <span class="clisting">ClassNotFoundException</span>, andere wiederum nicht, wie <span class="clisting">PrinterException</span>. Eigene Unterklassen können auch mit <span class="clisting">initCause()</span> genau einmal eine geschachtelte Ausnahme angeben.</p>
<h4 class="t4">Geprüfte Ausnahmen in ungeprüfte Ausnahmen manteln</h4>
<p>In modernen Frameworks ist die Nutzung von Ausnahmen, die nicht geprüft werden müssen, also Exemplare von <span class="clisting">RuntimeException</span> sind, häufiger geworden. Bekannte zu prüfende Ausnahmen werden in <span class="clisting">RuntimeException</span>-Objekte verpackt (eine Art <span class="clisting">Exception</span>-Wrapper), die den Verweis auf die auslösende Nicht-<span class="clisting">RuntimeException</span> speichern.</p>
<p>Dazu ein Beispiel. Die folgenden drei Zeilen ermitteln, ob die Web-Seite zu einer URL verfügbar ist:</p>
<div class="listing"><pre class="prettyprint">HttpURLConnection.setFollowRedirects( false );
HttpURLConnection con = (HttpURLConnection)(new URL( url ).openConnection());
boolean available = con.getResponseCode() == HttpURLConnection.HTTP_OK;</pre></div>
<p>Da der Konstruktor von <span class="clisting">URL</span> eine <span class="clisting">MalformedURLException</span> auslösen kann und es beim Netzwerkzugriff zu einer <span class="clisting">IOException</span> kommen kann, müssen diese beiden Ausnahmen entweder behandelt oder an den Aufrufer weitergereicht werden. Wir wollen eine Variante wählen, in der wir die geprüften Ausnahmen in eine <span class="clisting">RuntimeException</span> hüllen, sodass es eine Utility-Methode gibt und sich der Aufrufer nicht lange mit irgendwelchen Ausnahmen beschäftigen muss:</p>
<p class="tabunter"><strong>Listing 6.18    </strong>NestedException.java, NestedException</p>
<div class="listing"><pre class="prettyprint">public static boolean isAvailable( String url )
{
  try
  {
    HttpURLConnection.setFollowRedirects( false );
    HttpURLConnection con = (HttpURLConnection)(new URL( url ).openConnection());
    return con.getResponseCode() == HttpURLConnection.HTTP_OK;
  }
  catch ( MalformedURLException e )
  {
    throw new RuntimeException( e );
  }
  catch ( IOException e )
  {
    throw new RuntimeException( e );
  }
}

public static void main( String[] args )
{
  System.out.println( isAvailable( "http://laber.rabar.ber/" ) ); // false
  System.out.println( isAvailable( "http://www.tutego.de/" ) );   // true
  System.out.println( isAvailable( "taube://sonsbeck/schlosstrasse/5/" ) ); // <img src="common/totenkopf.gif" border="0" align="bottom" alt="Fehler">
}</pre></div>
<p>In der letzen Zeile kommt es zu einer Ausnahme, da es das Protokoll »taube« nicht gibt. Die Ausgabe ist folgende:</p>
<div class="listing"><pre class="prettyprint">false
true
Exception in thread "main" java.lang.RuntimeException:<span class="cfett"> java.net.</span><img src="common/umbruch.gif" border="0" alt="Umbruch"><span class="cfett">
  MalformedURLException: unknown protocol: taube</span>
    at NestedException.isAvailable(NestedException.java:25)
    at NestedException.main(NestedException.java:12)
Caused by:<span class="cfett"> java.net.MalformedURLException: unknown protocol: taube</span>
    at java.net.URL.&lt;init&gt;(URL.java:590)
    at java.net.URL.&lt;init&gt;(URL.java:480)
    at java.net.URL.&lt;init&gt;(URL.java:429)
    at NestedException.isAvailable(NestedException.java:20)
    ... 1 more</pre></div>
<p>In der Praxis wird es bei großen Stack-Traces &#8211; und einem Szenario, bei dem abgefangen, ummantelt, abgefangen, ummantelt wird &#8211; fast unmöglich, aus der Ausgabe den Verlauf zu entschlüsseln, da sich diverse Teile wiederholen und dann wieder abgekürzt werden. Die duplizierten Teile sind zur Verdeutlichung fett hervorgehoben.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="6.5 Auslösen eigener Exceptions"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_06_004.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_06_006.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
