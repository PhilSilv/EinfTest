<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 25.3 Attribute, Methoden und Konstruktoren</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 25.3 Attribute, Methoden und Konstruktoren">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 25.3 Attribute, Methoden und Konstruktoren">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_25_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_25_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf" class="navnav">25 Reflection und Annotationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_25_001.htm#mj2abe911fdec059a6e42247b9b091064f" class="navnav">25.1 Metadaten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_001.htm#mj315a4069dd5f2c47668112f03fb9d797" class="navnav">25.1.1 Metadaten durch JavaDoc-Tags</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_25_002.htm#mj16f08fd7fd4c9adeb13f5d7c2fcd919f" class="navnav">25.2 Metadaten der Klassen mit dem Class-Objekt</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_002.htm#mj09d7b1757c11f48d2685f264293cfd81" class="navnav">25.2.1 An ein Class-Objekt kommen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_002.htm#mj67c730a004636f6b47cd8c294e184982" class="navnav">25.2.2 Was das Class-Objekt beschreibt *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_002.htm#mj3099d747a25881ea8508e42405ac13b7" class="navnav">25.2.3 Der Name der Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_002.htm#mj61fae72b0d46a4162986360803fdb072" class="navnav">25.2.4 »instanceof« mit Class-Objekten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_002.htm#mja42718317af09f43821fba60e5e53536" class="navnav">25.2.5 Oberklassen finden *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_002.htm#mj707904bd78adebe73ebc9f20c1fca7aa" class="navnav">25.2.6 Implementierte Interfaces einer Klasse oder eines Interfaces *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_002.htm#mjb52b207dc3b9c9ab6add1ccb619d8024" class="navnav">25.2.7 Modifizierer und die Klasse »Modifier« *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_002.htm#mj04b2a72dbd3a393bc006c673524f83f3" class="navnav">25.2.8 Die Arbeit auf dem Feld *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjdcf36b03d66b224f70db70883063e30b" class="navh">25.3 Attribute, Methoden und Konstruktoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjaf2fc804a04b0a9605e6ec61ad101b2d" class="navh">25.3.1 Reflections &#8211; Gespür für Attribute einer Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja146160d83c4a4db68437c73bca7751d" class="navh">25.3.2 Methoden einer Klasse erfragen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj8e71fa5b8ac8cd9c415a9010d64d3a2d" class="navh">25.3.3 Properties einer Bean erfragen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj697f2a7998bfed8740ab0d7c8811267d" class="navh">25.3.4 Konstruktoren einer Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb90edd9e2256dd8950c5b3d8a38f05ab" class="navh">25.3.5 Annotationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_25_004.htm#mj8470eefe9558d2ea22830eebb54d3895" class="navnav">25.4 Objekte erzeugen und manipulieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_004.htm#mj41602c234dfdbd610ac24bb06ae70de4" class="navnav">25.4.1 Objekte erzeugen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_004.htm#mjdf779c908881a0b5c5bf32e8d86f743d" class="navnav">25.4.2 Die Belegung der Variablen erfragen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_004.htm#mj30f0dba6dc37ccee0118d7eb0294d137" class="navnav">25.4.3 Eine generische eigene toString()-Methode *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_004.htm#mj9aa10e65b00af04545359f2f77450651" class="navnav">25.4.4 Variablen setzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_004.htm#mje9b0769f149edb46e2121d84d5471acb" class="navnav">25.4.5 Bean-Zustände kopieren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_004.htm#mj2b2f793581f0133d58222cafdaf7d7f1" class="navnav">25.4.6 Private Attribute ändern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_25_005.htm#mjefb1bc55a562666a08a70715595d26ba" class="navnav">25.5 Methoden aufrufen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_005.htm#mjdb4ca121d3d40f6489ba59ca88ec7818" class="navnav">25.5.1 Statische Methoden aufrufen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_25_006.htm#mj633b70502b735c98bdc3cd6b7f0b1390" class="navnav">25.6 Eigene Annotationstypen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mj8ee5e422cd1e266400f74d0dd2f6c02a" class="navnav">25.6.1 Annotationen zum Laden von Ressourcen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mj60e296b60a6dc2097ae7cac3434583ff" class="navnav">25.6.2 Neue Annotationen deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mj052733c31d36a27bd3dc6aad17941a4a" class="navnav">25.6.3 Annotationen mit genau einem Attribut</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mja0eeecc785b7efb2f25f7b1932680e04" class="navnav">25.6.4 Element-Werte-Paare (Attribute) hinzufügen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mj4460b6f67f4881b62b0b3c63358d99f1" class="navnav">25.6.5 Annotationsattribute vom Typ einer Aufzählung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mjd9458ce9a06e7d41f2949ed430624809" class="navnav">25.6.6 Felder von Annotationsattributen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mjf04378e5ff87249012651cf607682580" class="navnav">25.6.7 Vorbelegte Attribute</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mj6dc62903d2743fc2d8a27fd497950dcd" class="navnav">25.6.8 Annotieren von Annotationstypen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mj60aea92bba1e0a0f9f928ac360d8e86f" class="navnav">25.6.9 Deklarationen für unsere Ressourcen-Annotationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mjd93de34d21000e81fee2f0f533171473" class="navnav">25.6.10 Annotierte Elemente auslesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mjbd900d811b3ff68ed9fa7a1dcaa3f261" class="navnav">25.6.11 Auf die Annotationsattribute zugreifen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mj01b681e8b50436cb7046411e70e21119" class="navnav">25.6.12 Komplettbeispiel zum Initialisieren von Ressourcen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_25_006.htm#mj7ef44c5695fc82f66dff1ba5ac1c9f1c" class="navnav">25.6.13 Mögliche Nachteile von Annotationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_25_007.htm#mj24125bb544ec1fc07a6ac90fb6bdd8ef" class="navnav">25.7 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjdcf36b03d66b224f70db70883063e30b" name="mjdcf36b03d66b224f70db70883063e30b"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">25.3</span> Attribute, Methoden und Konstruktoren  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Ein <span class="clisting">Class</span>-Objekt bietet nicht nur Zugriff auf Oberklassen, Sichtbarkeiten, Modifizierer und Schnittstellen, sondern natürlich auch auf die Variablen, Methoden und Konstruktoren einer Klasse oder Schnittstelle. Daher kooperiert <span class="clisting">Class</span> mit fünf weiteren Typen:</p>
<ul class="gp">
<li><span class="clisting">Constructor</span>: Steht für die Konstruktoren einer Klasse. Es gibt zum Beispiel <span class="clisting">getConstructors()</span> ein Feld von Konstruktoren zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Field</span>: Ermöglicht Zugriff auf die Objekt- und Klassenvariablen, um später Belegungen lesen und Werte verändern zu können.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Method</span>: Steht für die Methoden einer Klasse beziehungsweise Operationen der Schnittstellen. Es liefert <span class="clisting">getDeclaredMethods()</span> die Methoden, die dann später mit <span class="clisting">invoke()</span> aufgerufen werden können.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Annotation</span>: Repräsentiert die Annotationen, die an der Klasse/Schnittstelle festgemacht sind. So liefert zum Beispiel die <span class="clisting">Class</span>-Methode <span class="clisting">getAnnotations()</span> die festgemachten Annotationen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Package</span>: Es liefert <span class="clisting">getPackage()</span> ein <span class="clisting">Package</span>-Objekt für die Klasse, die eine Versionsnummer beinhaltet, wenn diese im Manifest gesetzt wurde.</li>
</ul>
<p>Weiterhin gibt es folgende allgemeine Implementierungsbeziehungen:</p>
<ul class="gp">
<li>Die Klassen <span class="clisting">Class</span>, <span class="clisting">Method</span>, <span class="clisting">Field</span> und <span class="clisting">Constructor</span> implementieren eine Schnittstelle <span class="clisting">Member</span>, um etwa den Namen, die Modifizierer oder die deklarierende Klasse zu erfragen.</li>
</ul>
<ul class="gp">
<li>Die Klassen <span class="clisting">Class</span>, <span class="clisting">Constructor</span> und <span class="clisting">Method</span> implementieren die Schnittstelle <span class="clisting">GenericDeclaration</span>, da sie generische Typvariablen deklarieren können.</li>
</ul>
<ul class="gp">
<li>Die Klassen <span class="clisting">Constructor</span>, <span class="clisting">Field</span> und <span class="clisting">Method</span> implementieren <span class="clisting">AccessibleObject</span>, um die Sichtbarkeit auszuschalten.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Class</span>, <span class="clisting">Constructor</span>, <span class="clisting">Field</span>, <span class="clisting">Method</span> und <span class="clisting">Package</span> implementieren <span class="clisting">AnnotatedElement</span>, weil sie Annotationen tragen können.</li>
</ul>
<h4 class="t4">Reflections-Exceptions und ReflectiveOperationException</h4>
<p>Ist etwas so dynamisch wie Reflection, kann eine Menge schiefgehen. Nahezu alle Methoden zum Zugriff auf Laufzeitinformationen lösen daher die eine oder andere Ausnahme aus. An dieser Stelle sollen die zentralen Ausnahmen kurz vorgestellt werden. Alle stammen aus dem Paket <span class="clisting">java.lang</span>:</p>
<ul class="gp">
<li><span class="clisting">NoSuchFieldException</span> und <span class="clisting">NoSuchMethodException</span>: Das Attribut oder die Methode wird erfragt, aber existiert nicht.</li>
</ul>
<ul class="gp">
<li><span class="clisting">ClassNotFoundException</span>: Der Klassenlader versucht, die Klasse zu laden, konnte sie aber nicht bekommen. Wird ausgelöst etwa von <span class="clisting">Class.forName(String)</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">InstantiationException</span>: Der Versuch, ein Exemplar aufzubauen, scheitert, etwa wenn versucht wird, eine abstrakte Klasse zu instanziieren oder den Standardkonstruktor aufzurufen, die Klasse aber nur parametrisierte Konstruktoren deklariert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">IllegalAccessException</span>: Die Sichtbarkeit ist zum Beispiel <span class="clisting">private</span>, sodass von außen ein Attribut nicht erfragt, eine Methode nicht aufgerufen oder ein Exemplar nicht aufgebaut werden kann.</li>
</ul>
<ul class="gp">
<li><span class="clisting">InvocationTargetException</span>: Eine Methode oder ein Konstruktor können eine Exception auslösen. Die <span class="clisting">InvocationTargetException</span> packt diese Exception ein.</li>
</ul>
<p>Einige Methoden lösen weniger Ausnahmen im Fehlerfall aus, einige mehr. <span class="clisting">newInstance()</span> führt gleich vier Ausnahmen am <span class="clisting">throws</span> auf. Oftmals führt das zu großen <span class="clisting">catch</span>-Blöcken mit dupliziertem Code. Ab Java 7 gibt es daher für die sechs Ausnahmen eine Oberklasse <span class="clisting">ReflectiveOperationException</span>, sodass bei identischer Behandlung alles vom Typ <span class="clisting">ReflectiveOperationException</span> gecatcht werden kann:</p>
<ul class="gp">
<li><span class="clisting">ClassNotFoundException extends ReflectiveOperationException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">IllegalAccessException extends ReflectiveOperationException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">InstantiationException extends ReflectiveOperationException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">InvocationTargetException extends ReflectiveOperationException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">NoSuchFieldException extends ReflectiveOperationException</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">NoSuchMethodException extends ReflectiveOperationException</span></li>
</ul>
<p><span class="clisting">ReflectiveOperationException</span> selbst ist eine Unterklasse von <span class="clisting">Exception</span> und nicht von <span class="clisting">RuntimeException</span>. Sie muss daher behandelt werden.</p><a id="mjaf2fc804a04b0a9605e6ec61ad101b2d" name="mjaf2fc804a04b0a9605e6ec61ad101b2d"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">25.3.1</span> Reflections &#8211; Gespür für Attribute einer Klasse  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Besonders bei Klassen-Browsern oder GUI-Buildern ist es interessant, auf die Variablen eines Objekts zuzugreifen, das heißt, ihre Werte auszulesen und zu verändern. Damit wir an beschreibende Objekte für die in einer Klasse deklarierten beziehungsweise aus Oberklassen geerbten Variablen gelangen, rufen wir die Methode <span class="clisting">getFields()</span> für das <span class="clisting">Class</span>-Objekt der interessierenden Klasse auf. Als Ergebnis erhalten wir ein Array von <span class="clisting">Field</span>-Objekten. Jeder Array-Eintrag beschreibt eine Objekt- oder Klassenvariable, auf die wir zugreifen dürfen. Nur auf öffentliche, also <span class="clisting">public</span>-Elemente, haben wir per (gewöhnlicher) Reflection Zugriff (auf eine privilegierte Reflection gehen wir hier nicht ein). Schnittstellen deklarieren ja bekanntlich nur Konstanten. Somit ist der schreibende Zugriff, den wir später näher betrachten wollen, nur auf in Klassen deklarierte Variablen beschränkt. Lesen ist natürlich bei Konstanten und Variablen gleichermaßen erlaubt. Beim Zugriff auf die Attribute mittels <span class="clisting">getFields()</span> müssen wir aufpassen, dass wir uns keine <span class="clisting">SecurityException</span> einfangen. Das kann uns aber bei vielen Methoden passieren, und weil <span class="clisting">SecurityException</span> eine <span class="clisting">RuntimeException</span> ist, muss sie auch nicht extra aufgefangen werden. In der Dokumentation ist sie daher nicht angegeben.</p>
<p>Um für <span class="clisting">SimpleDateFormat</span> alle Objekt- und Klassenvariablen mit ihren Datentypen herauszufinden, lassen wir eine Schleife über das <span class="clisting">Field</span>-Array laufen. Die Namen der Variablen finden sich leicht mit <span class="clisting">getName()</span>. Wir haben aber den zugehörigen Datentyp noch nicht. Dazu müssen wir erst mit <span class="clisting">getType()</span> ein <span class="clisting">Class</span>-Objekt für den Typ ermitteln, und dann liefert uns <span class="clisting">getName()</span> eine String-Repräsentation des Typs:</p>
<p class="tabunter"><strong>Listing 25.7    </strong>com/tutego/insel/meta/ShowFields.java, main()</p>
<div class="listing"><pre class="prettyprint">Class&lt;?&gt; c = java.text.SimpleDateFormat.class;
System.out.println( "class " + c.getName() + " {" );
for ( Field publicField :<span class="cfett"> c.getFields()</span> ) {
  String fieldName = publicField.<span class="cfett">getName()</span>;
  String fieldType = publicField.<span class="cfett">getType()</span>.getName();
  System.out.printf( "  %s %s;%n", fieldType, fieldName );
}
System.out.println( "}" );</pre></div>
<p>Dies ergibt die (gekürzte) Ausgabe:</p>
<div class="listing"><pre class="prettyprint">class java.text.SimpleDateFormat {
  int ERA_FIELD;
  int YEAR_FIELD;
  ...
  int SHORT;
  int DEFAULT;
}</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.<span class="cfett">Class</span>&lt;T&gt;
implements Serializable, GenericDeclaration, Type, AnnotatedElement</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Field[] getFields()</span>
Liefert ein Array mit <span class="clisting">Field</span>-Objekten. Die Einträge sind unsortiert. Das Array hat die Länge 0, wenn die Klasse beziehungsweise Schnittstelle keine öffentlichen Variablen deklariert oder erbt. <span class="clisting">getFields()</span> liefert automatisch auch Einträge für die aus Oberklassen beziehungsweise Schnittstellen geerbten öffentlichen Variablen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Field getField( String name ) throws NoSuchFieldException</span>
Erfragt ein bestimmtes Feld.</li>
</ul>
<p>Die Klasse <span class="clisting">Field</span> implementiert im Übrigen das Interface <span class="clisting">Member</span> und ist eine Erweiterung von <span class="clisting">AccessibleObject</span>. <span class="clisting">AccessibleObject</span> ist die Basisklasse für <span class="clisting">Field</span>-, <span class="clisting">Method</span>- und <span class="clisting">Constructor</span>-Objekte. Auch <span class="clisting">Method</span> und <span class="clisting">Constructor</span> implementieren das Interface <span class="clisting">Member</span>, das zur Identifikation über <span class="clisting">getName()</span> oder <span class="clisting">getModifiers()</span> dient. Zusätzlich liefert <span class="clisting">getDeclaringClass()</span> das <span class="clisting">Class</span>-Objekt, das tatsächlich eine Variable oder Methode deklariert. Da geerbte Elemente in der Aufzählung mit auftauchen, ist dies der einzige Weg, um die Position der Deklaration in der Vererbungshierarchie exakt zu bestimmen.</p>
<p>Das <span class="clisting">Field</span>-Objekt lässt sich vieles fragen: nach dem Namen des Attributs, nach dem Datentyp und auch wieder nach den deklarierten Modifizierern. Werfen wir einen Blick auf die <span class="clisting">toString()</span>-Methode der Klasse <span class="clisting">Field</span>:</p>
<div class="listing"><pre class="prettyprint">public String toString() {
  int mod = getModifiers();
  return (((mod == 0) ? "" : (Modifier.toString(mod) + " "))
      + getTypeName(getType()) + " "
      + getTypeName(getDeclaringClass()) + "."
      + getName());
}</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext" rowspan="2">
<p class="BStandard"><span class="cfett">Beispiel   </span>Für die Schleife über die <span class="clisting">Field</span>-Objekte von <span class="clisting">SimpleDateFormat</span> und einem Aufruf von <span class="clisting">toString()</span> liefern die Zeilen</p>
<div class="listing"><pre class="prettyprint">for ( Field publicField : c.getFields() )
  System.out.println( "  " + publicFields );</pre></div>
<p class="BStandard">dann:</p>
<div class="listing"><pre class="prettyprint">class java.text.SimpleDateFormat {
  public static final int java.text.DateFormat.ERA_FIELD
  public static final int java.text.DateFormat.YEAR_FIELD
  ...
  public static final int java.text.DateFormat.SHORT
  public static final int java.text.DateFormat.DEFAULT
}</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.reflect.<span class="cfett">Field</span>
extends AccessibleObject
implements Member</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Class&lt;?&gt; getDeclaringClass()</span>
Liefert das <span class="clisting">Class</span>-Exemplar für die Klasse oder die Schnittstelle, in der die Variable deklariert wurde. Diese Methode ist Teil der Schnittstelle <span class="clisting">Member</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getModifiers()</span>
Liefert die deklarierten Modifizierer für die Variable.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getName()</span>
Liefert den Namen der Variable. Diese Methode ist Teil der Schnittstelle <span class="clisting">Member</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Class&lt;?&gt; getType()</span>
Liefert ein <span class="clisting">Class</span>-Objekt, das dem Datentyp der Variable entspricht.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String toString()</span>
Liefert eine <span class="clisting">String</span>-Repräsentation. Am Anfang stehen die Sichtbarkeitsmodifizierer (<span class="clisting">public</span>, <span class="clisting">protected</span> oder <span class="clisting">private</span>), und es folgen die weiteren Modifizierer (<span class="clisting">static</span>, <span class="clisting">final</span>, <span class="clisting">transient</span>, <span class="clisting">volatile</span>). Dann kommt der Datentyp, gefolgt vom voll qualifizierten Namen der deklarierenden Klasse und schließlich der Name der Variable.</li>
</ul>
<div class="bildbox">
<p><a name="IDAE2YD"></a><a onClick="OpenWin('bilder/memberandsubclassesuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinmemberandsubclassesuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><a id="mja146160d83c4a4db68437c73bca7751d" name="mja146160d83c4a4db68437c73bca7751d"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">25.3.2</span> Methoden einer Klasse erfragen  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um herauszufinden, über welche Methoden eine Klasse verfügt, wenden wir eine ähnliche Vorgehensweise an wie bei den Variablen: <span class="clisting">getMethods()</span>. Diese Methode liefert ein Array mit <span class="clisting">Method</span>-Objekten. Über ein <span class="clisting">Method</span>-Objekt lassen sich Methodenname, Ergebnistyp, Parametertypen, Modifizierer und eventuell resultierende Exceptions erfragen. Wir werden später sehen, dass sich die durch ein <span class="clisting">Method</span>-Exemplar repräsentierte Methode über <span class="clisting">invoke()</span> aufrufen lässt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Auch wenn zwei Klassen die gleiche Methode besitzen, muss doch ein <span class="clisting">Method</span>-Objekt immer für jede Klasse erfragt werden. <span class="clisting">Method</span>-Objekte sind immer mit dem <span class="clisting">Class</span>-Objekt verbunden.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.<span class="cfett">Class</span>&lt;T&gt;
implements Serializable, GenericDeclaration, Type, AnnotatedElement</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Method[] getMethods()</span>
Gibt ein Array von <span class="clisting">Method</span>-Objekten zurück, die alle öffentlichen Methoden der Klasse/Schnittstelle beschreiben. Geerbte Methoden werden mit in die Liste übernommen. Die Elemente sind nicht sortiert, und die Länge des Arrays ist <span class="clisting">null</span>, wenn es keine öffentlichen Methoden gibt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Method getMethod( String name, Class... parameterTypes )</span>
<span class="clisting"> throws NoSuchMethodException</span>
Liefert zu einem Methodennamen und einer Parameterliste das passende <span class="clisting">Method</span>-Objekt oder löst eine <span class="clisting">NoSuchMethodException</span> aus. Besitzt die Methode keine Parameter &#8211; wie eine übliche <span class="clisting">getXXX()</span>-Methode &#8211;, ist das Argument <span class="clisting">null</span> und wird wegen der Varargs auf <span class="clisting">Class[]</span> angepasst.</li>
</ul>
<p>Nachdem wir nun mittels <span class="clisting">getMethods()</span> ein Array von <span class="clisting">Method</span>-Objekten erhalten haben, lassen die <span class="clisting">Method</span>-Objekte verschiedene Abfragen zu. So liefert <span class="clisting">getName()</span> den Namen der Methode, <span class="clisting">getReturnType()</span> den Ergebnistyp, und <span class="clisting">getParameterTypes()</span> erzeugt ein Array von <span class="clisting">Class</span>-Objekten, das die Typen der Methodenparameter widerspiegelt. Wir kennen dies schon von den Attributen.</p>
<p>Wir wollen nun ein Programm angeben, das alle Methoden und ihre Parametertypen sowie Ausnahmen ausgibt:</p>
<p class="tabunter"><strong>Listing 25.8    </strong>com/tutego/insel/meta/ShowMethods.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.meta;

import java.lang.reflect.*;

class ShowMethods
{
  public static void main( String[] args )
  {
    showMethods( java.awt.Color.BLACK );
  }

  static void showMethods( Object o )
  {
    for ( Method method : o.getClass().getMethods() )
    {
      String returnString = method.getReturnType().getName();
      System.out.print( returnString + " " + method.getName() + "(" );

      Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();

      for ( int k = 0; k &lt; parameterTypes.length; k++ ) {
        String parameterString = parameterTypes[k].getName();
        System.out.print( " " + parameterString );

        if ( k &lt; parameterTypes.length &#8211; 1 )
          System.out.print( ", " );
      }
      System.out.print( " )" );

      Class&lt;?&gt;[] exceptions = method.getExceptionTypes();

      if ( exceptions.length &gt; 0 ) {
        System.out.print( " throws " );
        for ( int k = 0; k &lt; exceptions.length; k++ ) {
          System.out.print( exceptions[k].getName() );
          if ( k &lt; exceptions.length &#8211; 1 )
            System.out.print( ", " );
        }
      }

      System.out.println();
    }
  }
}</pre></div>
<p>Die Ausgabe sieht gekürzt so aus:</p>
<div class="listing"><pre class="prettyprint">int hashCode( )
boolean equals( java.lang.Object )
java.lang.String toString( )
...
[F getRGBColorComponents( [F )
...
void wait( long ) throws java.lang.InterruptedException
void notify( )
void notifyAll( )</pre></div>
<p>Wir bemerken an einigen Stellen eine kryptische Notation, wie etwa »[F«. Dies ist aber lediglich wieder die schon erwähnte Kodierung für Array-Typen. So gibt <span class="clisting">getRGB-Components()</span> ein <span class="clisting">float</span>-Array zurück und erwartet ein <span class="clisting">float</span>-Array als Argument.</p>
<div class="bildbox">
<p><a name="IDASCZD"></a><a onClick="OpenWin('bilder/memberandsubclassesuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinmemberandsubclassesuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.reflect.<span class="cfett">Method</span>
extends AccessibleObject
implements GenericDeclaration, Member</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Class&lt;?&gt; getDeclaringClass()</span>
Liefert das <span class="clisting">Class</span>-Exemplar für die Klasse oder die Schnittstelle, in der die Methode deklariert wurde. Diese Methode ist Teil der Schnittstelle <span class="clisting">Member</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getName()</span>
Liefert den Namen der Methode. Diese Methode ist Teil der Schnittstelle <span class="clisting">Member</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">int getModifiers()</span>
Liefert die Modifizierer. Diese Methode ist Teil der Schnittstelle <span class="clisting">Member</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Class&lt;?&gt; getReturnType()</span>
Gibt ein <span class="clisting">Class</span>-Objekt zurück, das den Ergebnistyp beschreibt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Class&lt;?&gt;[] getParameterTypes()</span>
Liefert ein Array von <span class="clisting">Class</span>-Objekten, die die Typen der Parameter beschreiben. Die Reihenfolge entspricht der deklarierten Parameterliste. Das Array hat die Länge <span class="clisting">null</span>, wenn die Methode keine Parameter erwartet.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Class&lt;?&gt;[] getExceptionTypes()</span>
Liefert ein Array von <span class="clisting">Class</span>-Objekten, die mögliche Exceptions beschreiben. Das Array hat die Länge <span class="clisting">null</span>, wenn die Methode keine solchen Exceptions mittels <span class="clisting">throws</span> deklariert. Das Feld spiegelt nur die <span class="clisting">throws</span>-Klausel wider. Sie kann prinzipiell auch zu viele Exceptions enthalten, bei einer Methode <span class="clisting">foo() throws RuntimeException, NullPointerException</span> etwa genau die beiden Ausnahmen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String toString()</span>
Liefert eine String-Repräsentation der Methode, ähnlich dem Methodenkopf in einer Deklaration.</li>
</ul><a id="mj8e71fa5b8ac8cd9c415a9010d64d3a2d" name="mj8e71fa5b8ac8cd9c415a9010d64d3a2d"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">25.3.3</span> Properties einer Bean erfragen  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine Bean besitzt Properties (Eigenschaften), die in Java (bisher) durch Setter und Getter ausgedrückt werden, also Methoden, die einer festen Namenskonvention folgen. Gibt es Interesse an den Properties, lässt sich natürlich <span class="clisting">getMethods()</span> auf dem <span class="clisting">Class</span>-Objekt aufrufen und nach den Methoden filtern, die der Namenskonvention entsprechen. Die Java-Bibliothek bietet aber im Paket <span class="clisting">java.beans</span> eine einfachere Lösung für Beans: einen <span class="clisting">PropertyDescriptor</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext" rowspan="2">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gib alle Properties von <span class="clisting">Color</span> aus (es gibt nur lesbare):</p>
<p class="tabunter"><strong>Listing 25.9    </strong>com/tutego/insel/meta/PropertyDescriptors.java, main()</p>
<div class="listing"><pre class="prettyprint">BeanInfo beanInfo = Introspector.getBeanInfo( Color.class );
for ( PropertyDescriptor pd : beanInfo.getPropertyDescriptors() )
  System.out.println( pd.getDisplayName() + " : " +
                      pd.getPropertyType().getName() );</pre></div>
<p class="BStandard">Die Ausgabe:</p>
<div class="listing"><pre class="prettyprint">RGB : int
alpha : int
blue : int
class : java.lang.Class
colorSpace : java.awt.color.ColorSpace
green : int
red : int
transparency : int</pre></div>
</td>
</tr>
</table><br><p>Interessanter sind vom <span class="clisting">PropertyDescriptor</span> die Methoden <span class="clisting">getReadMethod()</span> und <span class="clisting">getWriteMethod()</span>, die beide ein <span class="clisting">Method</span>-Objekt liefern &#8211; sofern es verfügbar ist &#8211;, um so die Methode gleich aufrufen zu können.</p>
<p><span class="clisting">BeanInfo</span> liefert mit <span class="clisting">getPropertyDescriptors()</span> zwar die Properties, kann jedoch über <span class="clisting">getMethodDescriptors()</span> auch alle anderen Methoden liefern.</p><a id="mj697f2a7998bfed8740ab0d7c8811267d" name="mj697f2a7998bfed8740ab0d7c8811267d"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">25.3.4</span> Konstruktoren einer Klasse  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Konstruktoren und Methoden haben einige Gemeinsamkeiten, unterscheiden sich aber insofern, als Konstruktoren keinen Rückgabewert haben. Die Ähnlichkeit zeigt sich auch in der Methode <span class="clisting">getConstructors()</span>, die ein Array von <span class="clisting">Constructor</span>-Objekten zurückgibt. Über dieses Array lassen sich dann wieder Name, Modifizierer, Parameter und Exceptions der Konstruktoren einer Klasse erfragen. Wie wir in Abschnitt 25.4.1, »Objekte erzeugen«, sehen werden, lassen sich auch über die Methode <span class="clisting">newInstance()</span> neue Objekte erzeugen. Wegen der weitgehenden Ähnlichkeit der Klassen <span class="clisting">Constructor</span> und <span class="clisting">Method</span> sind die folgenden Methoden hier nicht näher beschrieben.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zeige alle Konstruktoren der <span class="clisting">Color</span>-Klasse:</p>
<p class="tabunter"><strong>Listing 25.10    </strong>com/tutego/insel/meta/ShowConstructors.java, main()</p>
<div class="listing"><pre class="prettyprint">for ( Constructor&lt;?&gt; c : java.awt.Color.class.<span class="cfett">getConstructors()</span> )
  System.out.println( c );</pre></div>
<p class="BStandard">Wegen der Ähnlichkeit zu <span class="clisting">getMethods()</span> gibt die auskunftsfreudige Methode <span class="clisting">toString()</span> die Signatur aus. Nach dem Aufruf erhalten wir:</p>
<div class="listing"><pre class="prettyprint">public java.awt.Color(float,float,float,float)
public java.awt.Color(int)
public java.awt.Color(int,int,int)
public java.awt.Color(int,int,int,int)
public java.awt.Color(java.awt.color.ColorSpace,float[],float)
public java.awt.Color(int,boolean)
public java.awt.Color(float,float,float)</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.<span class="cfett">Class</span>&lt;T&gt;
implements Serializable, GenericDeclaration, Type, AnnotatedElement</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Constructor[] getConstructors()</span>
Liefert ein Feld mit <span class="clisting">Constructor</span>-Objekten.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Constructor&lt;T&gt; getConstructor( Class... parameterTypes )</span>
  <span class="clisting">throws NoSuchMethodException</span>
Liefert ein ausgewähltes <span class="clisting">Constructor</span>-Objekt.</li>
</ul>
<div class="bildbox">
<p><a name="IDAZJZD"></a><a onClick="OpenWin('bilder/memberandsubclassesuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinmemberandsubclassesuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">final class java.lang.reflect.<span class="cfett">Constructor</span>&lt;T&gt;
extends AccessibleObject
implements GenericDeclaration, Member</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Class&lt;T&gt; getDeclaringClass()</span>
Eine ziemlich langweilige Methode, da Konstruktoren nicht vererbt werden. Sie gibt immer nur jene Klasse aus, von der das <span class="clisting">Class</span>-Objekt kommt. Das ist ein wichtiger Unterschied zwischen Methoden und Konstruktoren, der bei dieser Methode deutlich auffällt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Class[] getExceptionTypes()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">int getModifiers()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">String getName()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">Class[] getParameterTypes()</span></li>
</ul><a id="mjb90edd9e2256dd8950c5b3d8a38f05ab" name="mjb90edd9e2256dd8950c5b3d8a38f05ab"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">25.3.5</span> Annotationen  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Annotationen erfragen Methoden der Schnittstelle <span class="clisting">AnnotatedElement</span>, die unter anderem <span class="clisting">Class</span>, <span class="clisting">Constructor</span>, <span class="clisting">Field</span>, <span class="clisting">Method</span>, <span class="clisting">Package</span> implementieren. Ein Blick in <span class="clisting">AnnotatedElement</span> verrät, wie an die Annotationen heranzukommen ist:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">interface java.lang.reflect.<span class="cfett">AnnotatedElement</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">Annotation[] getAnnotations()</span>
Liefert alle an diesem Element assoziierten Annotationen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">Annotation[] getDeclaredAnnotations()</span>
Liefert alle an diesem Element deklarierten Annotationen. Vererbte Annotationen werden ignoriert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isAnnotationPresent( Class&lt;? extends Annotation&gt; annotationType )</span>
Erfragt, ob das Element eine bestimmte Annotation besitzt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">&lt;T extends Annotation&gt; T getAnnotation( Class&lt;T&gt; annotationType )</span>
Liefert die Annotationen eines gewünschten Typs.</li>
</ul>
<p>In Abschnitt 25.6, »Eigene Annotationstypen«, kommen wir auf Annotationen zurück.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="25.3 Attribute, Methoden und Konstruktoren"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_25_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_25_004.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
