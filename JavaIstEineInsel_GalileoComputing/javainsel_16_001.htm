<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 16 Dateien, Verzeichnisse und Dateizugriffe</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 16 Dateien, Verzeichnisse und Dateizugriffe">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 16 Dateien, Verzeichnisse und Dateizugriffe">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navh" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_15_008.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_16_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="#mj78bd405fb0de0cff099c06255fe36853" class="navh">16 Dateien, Verzeichnisse und Dateizugriffe</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjd6008557aa9be9bf1209e47489cff0d2" class="navh">16.1 Datei und Verzeichnis</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj0b9011e2b23f362c0152f88eb136a174" class="navh">16.1.1 Dateien und Verzeichnisse mit der Klasse »File«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj02644f11527598bc2a7360994d7d47f4" class="navh">16.1.2 Verzeichnis oder Datei? Existiert es?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjcf65f538320d14909c81468ec08de088" class="navh">16.1.3 Verzeichnis- und Dateieigenschaften/-attribute</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj3284ca1fad8ede2e3aa520ccb88cdbcc" class="navh">16.1.4 Umbenennen und Verzeichnisse anlegen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb254a6ef4e0728db75482e89242d8788" class="navh">16.1.5 Verzeichnisse listen und Dateien filtern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja5f5b5f1143b0eed225e00a7a301e9d4" class="navh">16.1.6 Dateien berühren, neue Dateien anlegen, temporäre Dateien</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj886c661425d18af833f8d5d0f1cc8384" class="navh">16.1.7 Dateien und Verzeichnisse löschen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj244d4be704c79bc7d4051abaf86e85d2" class="navh">16.1.8 Verzeichnisse nach Dateien iterativ durchsuchen *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjd52658ef0bb1fb7b401cea3e0343c864" class="navh">16.1.9 Wurzelverzeichnis, Laufwerksnamen, Plattenspeicher *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj5d5da76dfd1ee3363dd666f798d282f0" class="navh">16.1.10 URL- und URI-Objekte aus einem File-Objekt ableiten *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc95249f916b790ee66ce28de5d1978e2" class="navh">16.1.11 Mit Locking Dateien sperren *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_16_002.htm#mj3f2982f7e7e4e572ca2fe2629f44de89" class="navnav">16.2 Dateien mit wahlfreiem Zugriff</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_16_002.htm#mjcdde7623b23768f467423d8f40e3e0e6" class="navnav">16.2.1 Ein »RandomAccessFile« zum Lesen und Schreiben öffnen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_16_002.htm#mj546239fd6f92a053eec33898f401db90" class="navnav">16.2.2 Aus dem »RandomAccessFile« lesen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_16_002.htm#mj0462b8a9edeb91400409bc1a918a2780" class="navnav">16.2.3 Schreiben mit »RandomAccessFile«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_16_002.htm#mjf3d9881212e666d2d5f250b9fcf79e16" class="navnav">16.2.4 Die Länge des »RandomAccessFile«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_16_002.htm#mj55f695d2348f9c33b438b486827153d1" class="navnav">16.2.5 Hin und her in der Datei</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_16_003.htm#mj325ce728d5d8837ced017cfde43738a6" class="navnav">16.3 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main">
<p class="anleser"><em>»Schlagersänger sind junge Männer,
die bei Stromausfall keine Sänger mehr sind.«
&#8211; Danny Kaye (1913&#8211;1987)</em></p><a id="mj78bd405fb0de0cff099c06255fe36853" name="mj78bd405fb0de0cff099c06255fe36853"></a><h1 class="t1"><span class="cfett">16</span> Dateien, Verzeichnisse und Dateizugriffe</h1>
<p>Computer sind für uns so nützlich, weil sie Daten bearbeiten. Der Bearbeitungszyklus beginnt mit dem Einlesen der Daten, umfasst das Verarbeiten und endet mit der Datenausgabe. In der deutschsprachigen Informatikliteratur wird deswegen auch vom EVA [EVA ist ein Akronym für »Eingabe, Verarbeitung, Ausgabe«. Diese Reihenfolge entspricht dem Arbeitsweg. Zunächst werden die Eingaben von einem Eingabegerät gelesen, dann durch den Computer verarbeitet und anschließend ausgegeben (in welcher Form auch immer).
] -Prinzip der Datenverarbeitungsanlagen gesprochen. In frühen EDV-Zeiten wurde die Eingabe vom Systemoperator auf Lochkarten gestanzt. Glücklicherweise sind diese Zeiten vorbei. Heutzutage speichern wir unsere Daten in Dateien (engl. <span class="ckursiv">files [</span>Das englische Wort »file« geht auf das lateinische Wort »filum« zurück. Dies bezeichnete früher eine auf Draht aufgereihte Sammlung von Schriftstücken.
] ) und Datenbanken ab. Es ist wichtig, zu bemerken, dass eine Datei nur in ihrem Kontext interessant ist, andernfalls beinhaltet sie für uns keine Information &#8211; die Sichtweise auf eine Datei ist demnach wichtig. Auch ein Programm besteht aus Daten und wird oft in Form einer Datei repräsentiert.</p>
<p>Um an die Information einer Datei zu gelangen, müssen wir den Inhalt auslesen können. Zudem müssen wir in der Lage sein, Dateien anzulegen, zu löschen, umzubenennen und sie in Verzeichnissen zu strukturieren. Java bietet uns eine Vielzahl von Zugriffsmöglichkeiten auf Dateien. Ein wichtiges Schlagwort in diesem Zusammenhang ist der <span class="ckursiv">Datenstrom</span> (engl. <span class="ckursiv">stream</span>). Dieser entsteht beim Fluss der Daten von der Eingabe über die Verarbeitung hin zur Ausgabe. Mittels Datenströmen können Daten sehr elegant bewegt werden; ein Programm ohne Datenfluss ist eigentlich undenkbar. Die Eingabeströme (engl. <span class="ckursiv">input streams</span>) sind zum Beispiel Daten der Tastatur oder vom Netzwerk; über die Ausgabeströme (engl. <span class="ckursiv">output streams</span>) fließen die Daten in ein Ausgabemedium, beispielsweise in den Drucker oder in eine Datei. Die Kommunikation der Threads erfolgt über Pipes.</p>
<p>In Java sind über dreißig Klassen zur Verarbeitung der Datenströme vorgesehen. Da die Datenströme an kein spezielles Ein- oder Ausgabeobjekt gebunden sind, können sie beliebig miteinander gemischt werden. Dies ist mit dem elektrischen Strom vergleichbar: Es gibt mehrere Stromlieferanten (Solarkraftwerke, Nutzung geothermischer Energie, Umwandlung von Meereswärmeenergie [OTEC]) und mehrere Verbraucher (Wärmedecke, Mikrowelle), die die Energie wieder umsetzen.</p><a id="mjd6008557aa9be9bf1209e47489cff0d2" name="mjd6008557aa9be9bf1209e47489cff0d2"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">16.1</span> Datei und Verzeichnis  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Da durch Datenströme keine Dateien gelöscht oder umbenannt werden können, liefert uns ein <span class="clisting">File</span>-Objekt Informationen über Dateien und Verzeichnisse. Dieses Objekt wurde eingeführt, um Dateioperationen plattformunabhängig durchzuführen, was aber leider auch eine Einschränkung darstellt, denn wie sollen Rechte vergeben werden, wenn dies etwa der Macintosh mit Mac OS 9 oder ein Palm-Pilot nicht unterstützen? Auch Unix und Windows haben zwei völlig verschiedene Ansätze zur Rechteverwaltung.</p><a id="mj0b9011e2b23f362c0152f88eb136a174" name="mj0b9011e2b23f362c0152f88eb136a174"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">16.1.1</span> Dateien und Verzeichnisse mit der Klasse »File«  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ein <span class="clisting">File</span>-Objekt repräsentiert einen Datei- oder Verzeichnisnamen im Dateisystem. Die Datei oder das Verzeichnis, das das <span class="clisting">File</span>-Objekt beschreibt, muss nicht physikalisch existieren. Der Verweis wird durch einen Pfadnamen spezifiziert. Dieser kann absolut oder relativ zum aktuellen Verzeichnis angegeben werden.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Erzeuge ein <span class="clisting">File</span>-Objekt für das Laufwerk C:/:</p>
<div class="listing"><pre class="prettyprint">File f = <span class="cfett">new File( "C:/" )</span>;
System.out.println( f );   // C:\</pre></div>
</td>
</tr>
</table><br><p>Folgende Konstruktoren erzeugen ein <span class="clisting">File</span>-Objekt:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">File( String pathname )</span>
Erzeugt ein <span class="clisting">File</span>-Objekt aus einem Dateinamen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">File( String parent, String child )
File( File parent, String child )</span>
Setzt ein neues <span class="clisting">File</span>-Objekt aus einem Basisverzeichnis und einem weiteren Teil zusammen, der auch wieder ein Verzeichnis oder ein Dateiname sein kann.</li>
</ul>
<ul class="gp">
<li><span class="clisting">File( URI uri )</span>
Fragt von <span class="clisting">uri</span> den Pfadnamen (<span class="clisting">uri.getPath()</span>) und erzeugt ein neues <span class="clisting">File</span>-Objekt. Ist <span class="clisting">uri</span> gleich <span class="clisting">null</span>, folgt eine <span class="clisting">NullPointerException</span>. Ist die URI falsch formuliert, gibt es eine <span class="clisting">IllegalArgumentException</span>.</li>
</ul>
<p>Die Pfadangabe kann in allen Fällen absolut sein, muss es aber nicht.</p>
<h4 class="t4">Pfadtrenner</h4>
<p>Die Angabe des Pfades ist wegen der Pfadtrenner plattformabhängig. Auf Windows-Rechnern trennt ein Backslash »\« die Pfade, auf Unix-Maschinen ein normaler Slash »/« und unter dem älteren MAC OS 9 ein Doppelpunkt.</p>
<p>Glücklicherweise speichert die Klasse <span class="clisting">File</span> den Pfadtrenner in zwei öffentlichen Konstanten: <span class="clisting">File.separatorChar</span> [Eigentlich sollte der Variablenname großgeschrieben werden, da die Variable als <span class="clisting">public static final char</span> eine Konstante ist.
]  ist ein <span class="clisting">char</span>, und <span class="clisting">File.separator</span> stellt den Pfadtrenner als String bereit (dies ist wiederum auf <span class="clisting">System.getProperty("file.separator")</span> zurückzuführen).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Wie bei den Dateitrennern gibt es einen Unterschied bei der Darstellung des Wurzelverzeichnisses. Unter Unix ist dies ein einzelnes Divis »/«, und unter Windows steht die Laufwerksbezeichnung vor dem Doppelpunkt und dem Backslash-Zeichen (»Z:\«).</p>
</td>
</tr>
</table><br><div class="bildbox">
<p><a name="IDAYH2B"></a><a onClick="OpenWin('bilder/fileuml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinfileuml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 16.1    </strong>Namen erfragen und auflösen</p>
<p>Mit einem <span class="clisting">File</span>-Objekt erfragen ganz unterschiedliche Methoden den Dateinamen, den kompletten Pfad, das vorangehende Verzeichnis und ob eine Angabe absolut oder relativ ist. Bei einigen Methoden lässt sich wählen, ob die Rückgabe ein <span class="clisting">String</span>-Objekt mit dem Dateinamen sein soll oder ein <span class="clisting">File</span>-Objekt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Liefere einen Dateinamen, bei dem die relativen Bezüge aufgelöst sind:</p>
<div class="listing"><pre class="prettyprint">try
{
  File file = new File("C:/./WasNDas//..\\Programme/").<span class="cfett">getCanonicalFile()</span>;
  System.out.println( file );                          // C:\Programme
}
catch ( IOException e ) { e.printStackTrace(); }</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String getName()</span>
Gibt den Dateinamen zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getPath()</span>
Gibt den Pfadnamen zurück.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getAbsolutePath()</span>, <span class="clisting">File getAbsoluteFile()</span>
Liefert den absoluten Pfad. Ist das Objekt kein absoluter Pfadname, so wird ein Objekt aus aktuellem Verzeichnis, Separator-Zeichen und Dateinamen aufgebaut.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getCanonicalPath</span> <span class="clisting">() throws IOException
File getCanonicalFile() throws IOException</span>
Gibt den Pfadnamen des Dateiobjekts zurück, der keine relativen Pfadangaben mehr enthält. Kann im Gegensatz zu den anderen Pfadmethoden eine <span class="clisting">IOException</span> aufrufen, da mitunter verbotene Dateizugriffe erfolgen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">String getParent()</span>, <span class="clisting">File getParentFile()</span>
Gibt den Pfad des Vorgängers als <span class="clisting">String</span>- oder <span class="clisting">File</span>-Objekt zurück. Die Rückgabe ist <span class="clisting">null</span>, wenn es keinen Vater gibt, etwa beim Wurzelverzeichnis.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isAbsolute()</span>
Liefert <span class="clisting">true</span>, wenn der Pfad in der systemabhängigen Notation absolut ist.</li>
</ul><a id="mj02644f11527598bc2a7360994d7d47f4" name="mj02644f11527598bc2a7360994d7d47f4"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">16.1.2</span> Verzeichnis oder Datei? Existiert es?  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Das <span class="clisting">File</span>-Objekt muss nicht unbedingt eine existierende Datei oder ein existierendes Verzeichnis repräsentieren. Für Dateioperationen mit <span class="clisting">File</span>-Objekten und nachfolgendem Zugriff testet <span class="clisting">exists()</span>, ob die Datei oder das Verzeichnis tatsächlich vorhanden sind. Da nun aber ein <span class="clisting">File</span>-Objekt Dateien sowie Verzeichnisse gleichzeitig repräsentiert, ermöglichen <span class="clisting">isDirectory()</span> und <span class="clisting">isFile()</span> eine genauere Aussage über den <span class="clisting">File</span>-Typ. Es kann gut sein, dass für eine <span class="clisting">File</span> weder <span class="clisting">isDirectory()</span> noch <span class="clisting">isFile()</span> die Rückgabe <span class="clisting">true</span> liefern (in Java können nur normale Dateien erzeugt werden).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean exists()</span>
Liefert <span class="clisting">true</span>, wenn das <span class="clisting">File</span>-Objekt eine existierende Datei oder einen existierenden Ordner repräsentiert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isDirectory()</span>
Gibt <span class="clisting">true</span> zurück, wenn es sich um ein Verzeichnis handelt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isFile()</span>
Liefert <span class="clisting">true</span>, wenn es sich um eine »normale« Datei handelt (kein Verzeichnis und keine Datei, die vom zugrundeliegenden Betriebssystem als besonders markiert wird, keine Blockdateien, Links unter Unix).</li>
</ul><a id="mjcf65f538320d14909c81468ec08de088" name="mjcf65f538320d14909c81468ec08de088"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">16.1.3</span> Verzeichnis- und Dateieigenschaften/-attribute  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine Datei oder ein Verzeichnis besitzt zahlreiche Eigenschaften, die sich mit Anfragemethoden auslesen lassen. In einigen wenigen Fällen lassen sich die Attribute auch ändern.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean canExecute()</span>, <span class="clisting">canRead()</span>, <span class="clisting">canWrite()</span>
Liefert <span class="clisting">true</span>, wenn die Ausführungsrechte/Leserechte/Schreibrechte gesetzt sind.</li>
</ul>
<ul class="gp">
<li><span class="clisting">long length()</span>
Gibt die Länge der Datei in Byte zurück oder <span class="clisting">0L</span>, wenn die Datei nicht existiert oder es sich um ein Verzeichnis handelt.</li>
</ul>
<h4 class="t4">Änderungsdatum einer Datei</h4>
<p>Eine Datei verfügt unter jedem Dateisystem nicht nur über Attribute wie Größe und Rechte, sondern verwaltet auch das Datum der letzten Änderung. Letzteres nennt sich <span class="ckursiv">Zeitstempel</span>. Die <span class="clisting">File</span>-Klasse verfügt zum Abfragen dieser Zeit über die Methode <span class="clisting">lastModified()</span> und zum Setzen über <span class="clisting">setLastModified()</span>.</p>
<p>Die Methode <span class="clisting">setLastModified()</span> ändert &#8211; wenn möglich &#8211; den Zeitstempel, und ein anschließender Aufruf von <span class="clisting">lastModified()</span> liefert die gesetzte Zeit &#8211; womöglich gerundet &#8211; zurück. Die Methode ist von vielfachem Nutzen, aber sicherheitsbedenklich, denn ein Programm kann den Dateiinhalt einschließlich des Zeitstempels ändern. Auf den ersten Blick ist nicht mehr erkennbar, dass eine Veränderung der Datei vorgenommen wurde. Doch die Methode ist von größerem Nutzen bei der Programmerstellung, wo Quellcodedateien etwa mit Objektdateien verbunden sind. Nur über einen Zeitstempel ist eine einigermaßen intelligente Projektdateiverwaltung möglich.</p>
<p>Dabei bleibt es verwunderlich, warum <span class="clisting">lastModified()</span> nicht als veraltet ausgezeichnet ist und zu <span class="clisting">getLastModified()</span> wurde, wo doch nun die passende Methode zum Setzen der Namensgebung genügt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">long lastModified()</span>
Liefert den Zeitpunkt, zu dem die Datei zum letzten Mal geändert wurde. Die Zeit wird in Millisekunden ab dem 1. Januar 1970, 00:00:00 UTC, gemessen. Die Methode liefert 0, wenn die Datei nicht existiert oder ein Ein-/Ausgabefehler auftritt.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean setLastModified( long time )</span>
Setzt die Zeit (wann die Datei zuletzt geändert wurde). Die Zeit ist wiederum in Millisekunden seit dem 1. Januar 1970 angegeben. Ist das Argument negativ, dann wird eine <span class="clisting">IllegalArgumentException</span> ausgelöst.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Zwar lässt Java die Ermittlung der Zeit der letzten Änderung zu, doch gilt dies nicht für die Erzeugungszeit. Das Standard-Dateisystem von Unix-Systemen speichert diese Zeit nicht. Windows speichert sie hingegen schon, sodass hier grundsätzlich der Zugriff, etwa über JNI, möglich wäre. Legt ein Java-Programm die Dateien an, deren Anlegezeiten später wichtig sind, müssen die Zeiten beim Anlegen gemessen und gespeichert werden. Falls die Datei nicht verändert wird, stimmt <span class="clisting">lastModified()</span> mit der Anlegezeit überein.</p>
</td>
</tr>
</table><br><h4 class="t4">Dateiattribute verändern</h4>
<p>Zu den Anfragemethoden <span class="clisting">canXXX()</span> kann ein <span class="clisting">File</span>-Objekt auch Dateiattribute verändern, wobei viele Methoden seit Java 6 neu sind.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Lege eine neue temporäre Datei an, und teste das Lesen und Verändern des Lese-Schreib-Attributs. Nach dem Test lösche die Datei wieder:</p>
<p class="tabunter"><strong>Listing 16.1    </strong>com/tutego/insel/io/file/PermissionDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">File f = File.createTempFile( "bla", "blub" );
System.out.printf( "readable=%s, writable=%s%n", f.canRead(), f.canWrite() );
f.setReadOnly();
System.out.printf( "readable=%s, writable=%s%n", f.canRead(), f.canWrite() );
f.setWritable( true );
System.out.printf( "readable=%s, writable=%s%n", f.canRead(), f.canWrite() );
f.deleteOnExit();</pre></div>
<p class="BStandard">Die Ausgabe ist:</p>
<div class="listing"><pre class="prettyprint">readable=true, writable=true
readable=true, writable=false
readable=true, writable=true</pre></div>
</td>
</tr>
</table><br><p>Es gibt Methoden wie <span class="clisting">setLastModified()</span>, die auf dem Datei-Objekt wirklich eine Änderung ausführen. Insofern muss die Aussage in der API-Dokumentation genau genommen werden: »Instances of the <span class="clisting">File</span> class are immutable; that is, once created, the abstract pathname represented by a <span class="clisting">File</span> object will never change.« Nur der Dateiname ist immutable, aber nicht die Zustände.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean setReadOnly()</span>
Setzt die Datei auf nur-lesen. Liefert »wahr«, wenn die Änderung möglich war.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean setExecutable( boolean executable, boolean ownerOnly )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean setReadable( boolean readable, boolean ownerOnly )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean setWritable( boolean writable, boolean ownerOnly )</span>
Setzt das Recht zum Ausführen/Lesen/Schreiben der Datei. Ist <span class="clisting">ownerOnly</span> true, gilt das Recht nur für den Benutzer, sonst für alle.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean setExecutable( boolean executable )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean setReadable( boolean readable )</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean setWritable( boolean writable )</span>
Leitet weiter an die mit zwei Parametern deklarierte Methode <span class="clisting">setXXXable(boolean, bool-ean)</span>, und das zweite Argument ist <span class="clisting">true</span>.</li>
</ul>
<p>Die <span class="clisting">setXXX()</span>-Methoden melden über die Rückgabe, ob die Veränderung möglich war.</p>
<h4 class="t4">Ist eine Datei eine Verknüpfung? *</h4>
<p>Wer nicht Java 7 nutzen kann, muss die Frage nach der Dateiverknüpfung über eine interne <span class="clisting">sun.awt.shell.ShellFolder</span> beantworten lassen. Die Klasse liefert bei <span class="ckursiv">.lnk</span>-Dateien unter Windows mit <span class="clisting">isLink()</span> ein klares <span class="clisting">true</span>/<span class="clisting">false</span>, gibt die Zieladresse mit <span class="clisting">getLinkLocation()</span> und auf Anfrage mit <span class="clisting">getIcon()</span> das assoziierte Datei-Icon als <span class="clisting">Image</span> dazu:</p>
<p class="tabunter"><strong>Listing 16.2    </strong>ShellFolderDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">String s = "C:\\Dokumente und Einstellungen\\All Users\\Startmenü\\<img src="common/umbruch.gif" border="0" alt="Umbruch">
Programmzugriff und -standards.lnk";
ShellFolder folder = ShellFolder.getShellFolder( new File( s ) );
System.out.println( folder.getFolderType() );     // Verknüpfung
if ( folder.isLink() )
  System.out.println( folder.getLinkLocation() ); // C:\WINDOWS\system32\control.exe</pre></div><a id="mj3284ca1fad8ede2e3aa520ccb88cdbcc" name="mj3284ca1fad8ede2e3aa520ccb88cdbcc"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">16.1.4</span> Umbenennen und Verzeichnisse anlegen  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mit <span class="clisting">mkdir()</span> lassen sich Verzeichnisse anlegen und mit <span class="clisting">renameTo()</span> Dateien oder Verzeichnisse umbenennen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean mkdir()</span>
Legt das Unterverzeichnis an.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean mkdirs()</span>
Legt das Unterverzeichnis inklusive weiterer Verzeichnisse an.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean renameTo( File d )</span>
Benennt die Datei in den Namen um, der durch das <span class="clisting">File</span>-Objekt <span class="clisting">d</span> gegeben ist. Ging alles gut, wird <span class="clisting">true</span> zurückgegeben. Bei zwei Dateinamen <span class="clisting">alt</span> und <span class="clisting">neu</span> benennt <span class="clisting">new File-(alt).renameTo(new File(neu));</span> die Datei um. Die Methode muss vom Betriebssystem nicht atomar ausgeführt werden, und die tatsächliche Implementierung ist von der JVM und vom Betriebssystem abhängig.</li>
</ul>
<p>Über <span class="clisting">renameTo()</span> sollte noch ein Wort verloren werden: <span class="clisting">File</span>-Objekte sind immutable, stehen also immer nur für genau eine Datei. Ändert sich der Dateiname, ist das <span class="clisting">File</span>-Objekt ungültig, und es ist kein Zugriff mehr über dieses <span class="clisting">File</span>-Objekt erlaubt. Auch wenn eine Laufzeitumgebung keine Exception auslöst, sind alle folgenden Ergebnisse von Anfragen unsinnig.</p><a id="mjb254a6ef4e0728db75482e89242d8788" name="mjb254a6ef4e0728db75482e89242d8788"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">16.1.5</span> Verzeichnisse listen und Dateien filtern  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um eine Verzeichnisanzeige oder einen Dateiauswahldialog zu programmieren, benötigen wir eine Liste von Dateien, die in einem Verzeichnis liegen. Ein Verzeichnis kann reine Dateien oder auch wieder Unterverzeichnisse besitzen. Die <span class="clisting">list()</span>- und <span class="clisting">listFiles()</span>-Methoden der Klasse <span class="clisting">File</span> geben ein Feld von Zeichenketten mit Dateien und Verzeichnissen beziehungsweise ein Feld von <span class="clisting">File</span>-Objekten mit den enthaltenen Elementen zurück.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">File[] listFiles()</span></li>
</ul>
<ul class="gp">
<li><span class="clisting">String[] list()</span>
Gibt eine Liste der Dateien in einem Verzeichnis als <span class="clisting">File</span>-Array oder <span class="clisting">String</span>-Array zurück. Das Feld enthält weder ».« noch »..«.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Ein einfacher Directory-Befehl ist leicht mittels einiger Zeilen programmiert:</p>
<div class="listing"><pre class="prettyprint">String[] entries = new File( "." ).list();
System.out.println( Arrays.toString(entries) );</pre></div>
</td>
</tr>
</table><br><p>Die einfache Methode <span class="clisting">list()</span> liefert dabei nur relative Pfade, also einfach den Dateinamen oder den Verzeichnisnamen. Den absoluten Namen zu einer Dateiquelle müssen wir also erst zusammensetzen. Praktischer ist da schon die Methode <span class="clisting">listFiles()</span>, da wir hier komplette <span class="clisting">File</span>-Objekte bekommen, die ihre ganze Pfadangabe schon kennen. Wir können den Pfad mit <span class="clisting">getName()</span> erfragen.</p>
<h4 class="t4">Dateien mit »FilenameFilter« und »FileFilter« nach Kriterien filtern</h4>
<p>Ein Filter filtert aus den Dateinamen diejenigen heraus, die einem gesetzten Kriterium genügen. Eine Möglichkeit ist, nach den Endungen zu separieren. Doch auch komplexere Selektionen sind denkbar; so kann in die Datei hineingesehen werden, ob sie beispielsweise bestimmte Informationen am Dateianfang enthält. Besonders für Macintosh-Benutzer ist dies wichtig zu wissen, denn dort sind die Dateien nicht nach Endungen sortiert. Die Information liegt in den Dateien selbst. Windows versucht uns auch diese Dateitypen vorzuenthalten, von dieser Kennung hängt jedoch alles ab. Wer die Endung einer Grafikdatei schon einmal umbenannt hat, der weiß, warum Grafikprogramme aufgerufen werden. Von den Endungen hängt also sehr viel ab.</p>
<p>Sollen aus einer Liste von Dateien einige mit besonderen Eigenschaften herausgenommen werden, so müssen wir dies nicht selbst programmieren. Schlüssel hierzu ist die Schnittstelle <span class="clisting">FilenameFilter</span> und <span class="clisting">FileFilter</span>. Wenn wir etwas später den grafischen Dateiauswahldialog kennenlernen, so können wir dort auch den <span class="clisting">FilenameFilter</span> einsetzen. [Leider hatte der Fehlerteufel seine Finger im Spiel, und der <span class="clisting">FilenameFilter</span> funktioniert nicht, weil der <span class="clisting">FileSelector</span> fehlerhaft ist. Obwohl die Funktionalität dokumentiert ist, findet sich unter der Bug-Nummer 4031440 kurz: <span class="ckursiv">»The main issue is that support for FilenameFilter in the FileDialog class was never implemented on any platform  its not that theres a bug which needs to be fixed, but that theres no code to run nor was the design ever evaluated to see if it *could* be implemented on our target platforms.«</span>
]  Eine Filter-Klasse implementiert die Operation <span class="clisting">accept()</span> so, dass alle von <span class="clisting">accept()</span> angenommenen Dateien den Rückgabewert <span class="clisting">true</span> liefern.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">interface java.io.<span class="cfett">FileFilter</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean accept( File pathname )</span>
Muss <span class="clisting">true</span> liefern, wenn die Datei <span class="clisting">pathname</span> in die Ergebnisliste aufgenommen werden soll.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint"><span class="clisting">interface java.io.</span><span class="cfett">FilenameFilter</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean accept( File dir, String name )</span>
Muss <span class="clisting">true</span> liefern, wenn die Datei mit dem Namennamen <span class="clisting">name</span> im Verzeichnis <span class="clisting">dir</span> in die Ergebnisliste soll.</li>
</ul>
<p>Beim <span class="clisting">FilenameFilter</span> empfängt <span class="clisting">accept()</span> zwei Argumente, nämlich das Verzeichnis <span class="clisting">dir</span>, in dem die Datei <span class="clisting">name</span> liegt; und beim <span class="clisting">FileFilter</span> enthält <span class="clisting">pathname</span> die voll qualifizierte Datei schon direkt als <span class="clisting">File</span>-Objekt. (Was für Dateien in einem Verzeichnis gilt, gilt ebenso für Unterverzeichnisse.) Im Fall von <span class="clisting">FileFilter</span> liefert also <span class="clisting">pathname.getName()</span> den Dateinamen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Wollen wir nur auf Textdateien reagieren, so geben wir ein <span class="clisting">true</span> bei allen Dateien mit der Endung <span class="ckursiv">.txt</span> zurück. Die anderen werden mit <span class="clisting">false</span> abgelehnt.</p>
<p class="tabunter"><strong>Listing 16.3    </strong>com/tutego/insel/io/file/TxtFilenameFilter.java, TxtFilenameFilter</p>
<div class="listing"><pre class="prettyprint">public class TxtFilenameFilter<span class="cfett"> implements FilenameFilter</span> {
  @Override public<span class="cfett"> boolean accept( File f, String s )</span> {
    return new File(f, s).isFile() &amp;&amp;
           s.toLowerCase().endsWith( ".txt" );
  }
}</pre></div>
</td>
</tr>
</table><br><div class="bildbox">
<p><a name="IDAVC3B"></a><a onClick="OpenWin('bilder/filefilteruml.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleinfilefilteruml.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Exemplare der implementierenden Klassen werden der Methode <span class="clisting">list()</span> bzw. <span class="clisting">listFiles()</span> als Argument übergeben.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">String[] list( FilenameFilter filter )</span>
Wie <span class="clisting">list()</span>, nur filtert ein spezielles <span class="clisting">FilenameFilter</span>-Objekt Objekte heraus.</li>
</ul>
<ul class="gp">
<li><span class="clisting">File[] listFiles( FilenameFilter filter )</span>
Wie <span class="clisting">listFiles()</span>, nur filtert ein spezielles <span class="clisting">FilenameFilter</span>-Objekt Objekte heraus.</li>
</ul>
<ul class="gp">
<li><span class="clisting">File[] listFiles( FileFilter filter )</span>
Wie <span class="clisting">list()</span>, nur filtert ein spezielles <span class="clisting">FileFilter</span>-Objekt bestimmte Objekte heraus.</li>
</ul>
<p>Nun können <span class="clisting">list()</span> mit dem <span class="clisting">FilenameFilter</span> und <span class="clisting">listFiles()</span> mit dem <span class="clisting">FileFilter</span> bzw. <span class="clisting">FilenameFilter</span> aufgerufen werden. Die Methode erfragt zuerst alle Dateien und Unterverzeichnisse und ruft dann für jeden Eintrag die <span class="clisting">accept()</span>-Methode auf. Bei der Rückgabe <span class="clisting">true</span> nimmt die Auflist-Methode den Eintrag in eine interne Liste auf, die dann später als Feld zurückgegeben wird.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zur Implementierung von <span class="clisting">FilenameFilter</span> und <span class="clisting">FileFilter</span> bieten sich innere Klassen an. In einem Beispiel soll <span class="clisting">listFiles()</span> nur Unterverzeichnisse von <span class="clisting">dir</span> zurückliefern:</p>
<p class="tabunter"><strong>Listing 16.4    </strong>com/tutego/insel/io/file/SubDir.java, main() Ausschnitt</p>
<div class="listing"><pre class="prettyprint">File[] subDirs = dir.listFiles( new FileFilter() {
  @Override public boolean accept( File d ) {
    return d.isDirectory();
  } } );</pre></div>
</td>
</tr>
</table><br><h4 class="t4">Dateien aus dem aktuellen Verzeichnis filtern</h4>
<p>Wir können somit ein einfaches Verzeichnisprogramm programmieren, indem wir die Möglichkeiten von <span class="clisting">getProperty()</span> und <span class="clisting">list()</span> zu einem Beispiel zusammenfügen. Zusätzlich wollen wir nur Dateien mit der Endung <span class="ckursiv">.txt</span> angezeigt bekommen:</p>
<p class="tabunter"><strong>Listing 16.5    </strong>com/tutego/insel/io/file/Dir.java, main()</p>
<div class="listing"><pre class="prettyprint">File userdir = new File(<span class="cfett"> System.getProperty("user.dir")</span> );
System.out.println( userdir );

for ( File file : userdir.listFiles(new TxtFilenameFilter()) )
  System.out.println( file );</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die zusätzliche Java-Bibliothek Apache Commons IO (http://jakarta.apache.org/commons/io/) bietet über das Paket <span class="clisting">org.apache.commons.io.filefilter</span> vielfältige Datei-Filter, wie <span class="clisting">SuffixFileFilter</span> oder <span class="clisting">WildcardFilter</span>.</p>
</td>
</tr>
</table><br><a id="mja5f5b5f1143b0eed225e00a7a301e9d4" name="mja5f5b5f1143b0eed225e00a7a301e9d4"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">16.1.6</span> Dateien berühren, neue Dateien anlegen, temporäre Dateien  <a href="#t2t38"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Unter dem Unix-System gibt es das Shell-Kommando <span class="ckursiv">touch</span>, das wir in einer einfachen Variante in Java umsetzen wollen. Das Programm berührt (engl. touch) eine Datei, indem der Zeitstempel auf das aktuelle Datum gesetzt wird. Wie beim Kommando <span class="ckursiv">touch</span> soll unser Java-Programm über alle auf der Kommandozeile übergebenen Dateien gehen und sie berühren. Falls eine Datei nicht existiert, soll sie kurzerhand angelegt werden:</p>
<p class="tabunter"><strong>Listing 16.6    </strong>com/tutego/insel/io/file/Touch.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.file;

import java.io.*;

public class Touch
{
  public static void main( String[] args )
  {
    for ( String s : args )
    {
      File f = new File( s );

      if ( f.exists() )
      {
        if ( f.setLastModified( System.currentTimeMillis() ) )
          System.out.println( "Berührte " + s );
        else
          System.out.println( "Konnte nicht berühren " + s );
      }
      else
      {
        try
        {
          f.createNewFile();
          System.out.println( "Legte neue Datei an " + s );
        } catch ( IOException e ) { e.printStackTrace(); }
      }
    }
  }
}</pre></div>
<p>Gibt <span class="clisting">setLastModified()</span> den Wahrheitswert <span class="clisting">false</span> zurück, so wissen wir, dass die Operation fehlschlug, und geben eine Informationsmeldung aus.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean createNewFile() throws IOException</span>
Legt atomar eine neue, leere Datei mit dem im <span class="clisting">File</span>-Objekt gespeicherten Namen an, wenn eine Datei mit diesem Namen noch nicht existiert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static File createTempFile( String prefix, String suffix ) throws IOException</span>
Legt eine neue Datei im temporären Verzeichnis an. Das Verzeichnis findet sich häufig unter einem Standard-Unix <span class="ckursiv">/tmp</span> oder unter Windows <span class="ckursiv">C:\Dokumente und Einstellungen\     Benutzername\Lokale Einstellungen\Temp</span>. Der Dateiname setzt sich aus einem benutzerdefinierten Präfix, einer Zufallsfolge und einem Suffix zusammen.</li>
</ul>
<ul class="gp">
<li><span class="clisting">static File createTempFile( String prefix, String suffix, File directory )</span>
  <span class="clisting">throws IOException</span>
Legt eine neue Datei im gewünschten Verzeichnis an. Der Dateiname setzt sich aus einem benutzerdefinierten Präfix, einer Zufallsfolge und einem Suffix zusammen.</li>
</ul><a id="mj886c661425d18af833f8d5d0f1cc8384" name="mj886c661425d18af833f8d5d0f1cc8384"></a><a name="t37"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t38"></a><h3 class="t3"><span class="cfett">16.1.7</span> Dateien und Verzeichnisse löschen  <a href="#t2t39"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t37"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mithilfe der Methode <span class="clisting">delete()</span> auf einem <span class="clisting">File</span>-Objekt lässt sich eine Datei oder ein Verzeichnis entfernen. Diese Methode löscht wirklich! Sie ist nicht so zu verstehen, dass sie <span class="clisting">true</span> liefert, falls die Datei potenziell gelöscht werden kann. Konnte die Laufzeitumgebung <span class="clisting">delete()</span> nicht ausführen, so sollte die Rückgabe <span class="clisting">false</span> sein. Ein zu löschendes Verzeichnis muss leer sein, andernfalls kann das Verzeichnis nicht gelöscht werden. Unsere unten stehende Implementierung geht dieses Problem so an, dass sie rekursiv die Unterverzeichnisse löscht.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">boolean delete()</span>
Löscht die Datei oder das leere Verzeichnis. Falls die Datei nicht gelöscht werden konnte, gibt es keine Ausnahme, sondern den Rückgabewert <span class="clisting">false</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">void deleteOnExit()</span>
Löscht die Datei/das Verzeichnis, wenn die virtuelle Maschine korrekt beendet wird. Einmal vorgeschlagen, kann das Löschen nicht mehr rückgängig gemacht werden. Falls die JVM vorzeitig die Grätsche macht &#8211; Reinigungsfachkraft stolpert über Kabel &#8211;, kann natürlich die Datei möglicherweise noch immer nicht gelöscht sein, was insbesondere für temporäre Dateien, die über <span class="clisting">createTempFile()</span> angelegt wurden, eventuell lästig wäre.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Auf manchen Systemen liefert <span class="clisting">delete()</span> die Rückgabe <span class="clisting">true</span>, die Datei ist aber nicht gelöscht. Der Grund kann eine noch geöffnete Datei sein, mit der zum Beispiel ein Eingabestrom verbunden ist und die dadurch gelockt ist.</p>
</td>
</tr>
</table><br><h4 class="t4">Rekursiv Verzeichnisse löschen</h4>
<p>Die <span class="clisting">delete()</span>-Methode operiert auf <span class="clisting">File</span>-Objekten, die Dateien und auch Verzeichnisse repräsentieren. Doch wenn Verzeichnisse nicht leer sind, wird <span class="clisting">delete()</span> nicht auch noch alle Dateien in diesem Verzeichnis inklusive aller Unterverzeichnisse löschen. Das muss von Hand erledigt werden, lässt sich aber in wenigen Programmcodezeilen rekursiv umsetzen. Eine eigene statische Methode <span class="clisting">deleteTree()</span> soll einen Baum inklusive Unterverzeichnisse löschen. <span class="clisting">list()</span> liefert ein Feld aller Elemente in dem Unterverzeichnis, und falls ein Element wiederum ein Verzeichnis ist, wird wieder <span class="clisting">deleteTree()</span> auf diesem aufgerufen:</p>
<p class="tabunter"><strong>Listing 16.7    </strong>com/tutego/insel/io/file/DeleteTree.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.file;

import java.io.File;

public class DeleteTree
{
  public static void deleteTree( File path )
  {
    for ( File file : path.listFiles() )
    {
      if ( file.isDirectory() )
        deleteTree( file );
      else
        if ( ! file.delete() )
          System.err.println( file + " could not be deleted!" );
    }

    if ( ! path.delete() )
      System.err.println( path + " could not be deleted!" );
  }

  public static void main( String[] args )
  {
    deleteTree( new File("c:/ati/") );
  }
}</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Das Beispiel beachtet den Rückgabetyp von <span class="clisting">delete()</span> und meldet einen Fehler, wenn das Verzeichnis oder die Datei nicht gelöscht werden konnte. Das sollte jedes Programm machen, da <span class="clisting">delete()</span> keine Ausnahme auslöst, wenn es schief ging.</p>
</td>
</tr>
</table><br><a id="mj244d4be704c79bc7d4051abaf86e85d2" name="mj244d4be704c79bc7d4051abaf86e85d2"></a><a name="t38"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t39"></a><h3 class="t3"><span class="cfett">16.1.8</span> Verzeichnisse nach Dateien iterativ durchsuchen *  <a href="#t2t310"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t38"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>In Kapitel 13, »Datenstrukturen und Algorithmen«, haben wir die Datenstrukturen <span class="clisting">List</span> und <span class="clisting">Stack</span> kennengelernt, die uns jetzt helfen sollen, ein Verzeichnis inklusive aller Unterverzeichnisse weiter nach unten zu gehen. Dabei sollen Dateien gefunden werden, deren Dateinamen auf regulären Ausdrücken »matchen«. Ein <span class="clisting">List</span>-Objekt speichert bereits gefundene Dateien, und ein <span class="clisting">Stack</span>-Objekt merkt sich via Tiefensuche das aktuelle Verzeichnis, in dem der Algorithmus gerade steht. Anders als bei <span class="clisting">DeleteTree</span> nutzt diese Implementierung keine rekursiven Methodenaufrufe:</p>
<p class="tabunter"><strong>Listing 16.8    </strong>com/tutego/insel/io/file/FileFinder.java</p>
<div class="listing"><pre class="prettyprint">package com.tutego.insel.io.file;

import java.io.*;
import java.util.*;
import java.util.regex.Pattern;

public class FileFinder
{
  public static List&lt;File&gt; find( String start, String extensionPattern )
  {
    List&lt;File&gt; files = new ArrayList&lt;File&gt;( 1024 );
    Stack&lt;File&gt; dirs = new Stack&lt;File&gt;();
    File startdir = new File( start );
    Pattern p = Pattern.compile( extensionPattern, Pattern.CASE_INSENSITIVE );

    if ( startdir.isDirectory() )
      dirs.push( startdir );

    while ( dirs.size() &gt; 0 )
      for ( File file : dirs.pop().listFiles() )
        if ( file.isDirectory() )
          dirs.push( file );
        else
          if ( p.matcher(file.getName()).matches() )
            files.add( file );

    return files;
  }
}</pre></div>
<p>Eine Nutzung der Utility-Methode ist einfach, wie etwa die folgenden Zeilen zeigen, um Dokumente mit den Dateiendungen <span class="ckursiv">.gif</span> und <span class="ckursiv">.jpg</span> zu finden:</p>
<p class="tabunter"><strong>Listing 16.9    </strong>com/tutego/insel/io/file/FileFinderDemo.java, main()</p>
<div class="listing"><pre class="prettyprint">String path = new File( System.getProperty("user.dir") ).getParent();

System.out.println( "Suche im Pfad: " + path );
<span class="cfett">
List&lt;File&gt; files = FileFinder.find( path, "(.*\\.gif$)|(.*\\.jpg$)" );
</span><span class="clisting">
System.out.printf( "Fand %d Datei%s.%n",
                   files.size(), files.size() == 1 ? "" : "en" );

for ( File f : files )
  System.out.println( f.getAbsolutePath() );</span></pre></div><a id="mjd52658ef0bb1fb7b401cea3e0343c864" name="mjd52658ef0bb1fb7b401cea3e0343c864"></a><a name="t39"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t310"></a><h3 class="t3"><span class="cfett">16.1.9</span> Wurzelverzeichnis, Laufwerksnamen, Plattenspeicher *  <a href="#t2t311"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t39"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die statische Methode <span class="clisting">listRoots()</span> gibt ein Feld von <span class="clisting">File</span>-Objekten zurück. Jeder Eintrag des Feldes repräsentiert eine Wurzel (engl. <span class="ckursiv">root</span>) des Dateisystems. Dies macht es einfach, Programme zu schreiben, die etwa über dem Dateisystem eine Suche ausführen. Da es unter Unix nur eine Wurzel gibt, ist der Rückgabewert von <span class="clisting">File.listRoots()</span> immer »/« &#8211; ein anderes Root gibt es nicht. Unter Windows wird es aber zu einem richtigen Feld, da es mehrere Wurzeln für die Partitionen oder logischen Laufwerke gibt. Die Wurzeln tragen Namen wie »A:« oder »Z:«. Dynamisch eingebundene Laufwerke, die etwa unter Unix mit <span class="ckursiv">mount</span> integriert werden, oder Wechselfestplatten werden mit berücksichtigt. Die Liste wird immer dann aufgebaut, wenn <span class="clisting">listRoots()</span> aufgerufen wird. Komplizierter ist es, wenn entfernte Dateibäume mittels NFS oder SMB eingebunden sind, weil es dann nicht darauf ankommt, ob das zuständige Programm eine Verbindung noch aktiv hält oder nicht. Denn nach einer abgelaufenen Zeit ohne Zugriff wird das Verzeichnis wieder aus der Liste genommen. Dies ist aber wieder sehr plattformabhängig.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gewünscht ist eine Liste der verfügbaren Wurzeln mit der Angabe, ob auf das Gerät eine Zugriffsmöglichkeit besteht. Ist unter Windows etwa ein Diskettenlaufwerk eingebunden, befindet sich aber keine Diskette im Schacht, dann ist das Gerät nicht bereit. Ein Diskettenlaufwerk taucht in der Liste auf, aber <span class="clisting">exists()</span> liefert <span class="clisting">false</span>.</p>
<p class="tabunter"><strong>Listing 16.10    </strong>com/tutego/insel/io/file/ListRoot.java. main()</p>
<div class="listing"><pre class="prettyprint">for ( File root : File.listRoots() )
  System.out.println( root.getPath() + " ist " +
                      (root.exists() ? "" : "nicht ") + "bereit" );</pre></div>
<p class="BStandard">Bei der Ausgabe mit <span class="clisting">System.out.println()</span> entspricht <span class="clisting">root.getPath()</span> einem <span class="clisting">root.to-String()</span>. Da aber nicht unbedingt klar ist, dass <span class="clisting">toString()</span> auf <span class="clisting">getPath()</span> verweist, schreiben wir <span class="clisting">getPath()</span> direkt.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static File[] listRoots()</span>
Liefert die verfügbaren Wurzeln der Dateisysteme oder <span class="clisting">null</span>, falls keine Wurzeln festgestellt werden können. Jedes <span class="clisting">File</span>-Objekt beschreibt eine Dateiwurzel. Es ist gewährleistet, dass alle kanonischen Pfadnamen mit einer der Wurzeln beginnen. Wurzeln, für die der <span class="clisting">SecurityManager</span> den Zugriff verweigert, werden nicht aufgeführt. Das Feld ist leer aber nicht <span class="clisting">null</span>, falls es keine Dateisystem-Wurzeln gibt.</li>
</ul>
<h4 class="t4">Namen der Laufwerke</h4>
<p>Die Namen der Laufwerksbuchstaben sind ein wenig versteckt, denn eine Methode zum Erfragen ist nicht bei der Klasse <span class="clisting">File</span> zu finden. Zwar liefert <span class="clisting">listRoots()</span> schon einen passenden Anfang, um unter Windows die Laufwerke preiszugeben, aber die Namen liefert erst <span class="clisting">getSystemDisplayName()</span> des <span class="clisting">FileSystemView</span>-Objekts. Die Klasse gehört zu Swing und dort zum Dateiauswahldialog.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zeige alle Laufwerksbuchstaben:</p>
<p class="tabunter"><strong>Listing 16.11    </strong>com/tutego/insel/io/file/SystemDisplayName.java. main()</p>
<div class="listing"><pre class="prettyprint">FileSystemView view = FileSystemView.getFileSystemView();
for ( File f : File.listRoots() )
  System.out.println( view.getSystemDisplayName(f) );</pre></div>
<p class="BStandard">Die Ausgabe ist bei mir:</p>
<div class="listing"><pre class="prettyprint">WINDOWS (C:)
Daten (D:)
Share (S:)</pre></div>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">abstract class javax.swing.filechooser.<span class="cfett">FileSystemView</span></pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">static FileSystemView getFileSystemView()</span>
Statische Fabrikmethode, die ein Exemplar von <span class="clisting">FileSystemView</span> liefert.</li>
</ul>
<ul class="gp">
<li><span class="clisting">boolean isDrive( File dir )
boolean isFloppyDrive( File dir )
boolean isComputerNode( File dir )</span>
Ist <span class="clisting">dir</span> ein Laufwerk/Wechsellaufwerk/Netzwerk-Knoten?</li>
</ul>
<p><span class="clisting">FileSystemView</span> hält noch andere gute Methoden bereit, wie <span class="clisting">getHomeDirectory()</span> oder <span class="clisting">isTraversable(File f)</span>.</p>
<h4 class="t4">Freier Plattenspeicher</h4>
<p>In Java 6 sind die Methoden <span class="clisting">getFreeSpace()</span>, <span class="clisting">getUsableSpace()</span> und <span class="clisting">getTotalSpace()</span> zum Ermitteln des freien Plattenspeichers hinzugekommen:</p>
<p class="tabunter"><strong>Listing 16.12    </strong>com/tutego/insel/io/file/DiscSpace.java. main()</p>
<div class="listing"><pre class="prettyprint">System.out.println( "Laufwerk  Total        Frei    Nutzbar" );
System.out.println( "--------------------------------------" );

for ( File dir : File.listRoots() )
  System.out.printf( "%s   %6d MB   %6d MB  %6d MB%n", dir,
                   <span class="cfett"> dir.getTotalSpace()</span> / (1024*1024),
                   <span class="cfett"> dir.getFreeSpace()</span> / (1024*1024),
                   <span class="cfett"> dir.getUsableSpace()</span> / (1024*1024) );</pre></div>
<p>Die Ausgabe ist bei mir:</p>
<div class="listing"><pre class="prettyprint">Drive    Total       Free    Usable
-----------------------------------
C:\   10001 MB    1467 MB   1467 MB
D:\   66283 MB   63477 MB  63477 MB
S:\   32145 MB    3194 MB   3194 MB</pre></div><a id="mj5d5da76dfd1ee3363dd666f798d282f0" name="mj5d5da76dfd1ee3363dd666f798d282f0"></a><a name="t310"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t311"></a><h3 class="t3"><span class="cfett">16.1.10</span> URL- und URI-Objekte aus einem File-Objekt ableiten *  <a href="#t2t312"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t310"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Da es bei <span class="clisting">URL</span>-Objekten recht häufig vorkommt, dass eine Datei die Basis ist, wurde die Methode <span class="clisting">toURI()</span> in die Klasse <span class="clisting">File</span> aufgenommen, über die sich mit <span class="clisting">toURL()</span> ein <span class="clisting">URL</span>-Objekt aufbauen lässt (eine Methode <span class="clisting">toURL()</span> gibt es auch, nur ist diese in Java 6 veraltet).</p>
<div class="listing"><pre class="prettyprint">File f = new File( "C:/Dokumente und Einstellungen/" );
URL u = f.toURL();        // veraltet!
System.out.println( u );  // file:/C:/Dokumente und Einstellungen/
u = f.toURI().toURL();
System.out.println( u );  // file:/C:/Dokumente%20und%20Einstellungen/</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">class java.io.<span class="cfett">File</span>
implements Serializable, Comparable&lt;File&gt;</pre></div>
</td>
</tr>
</table><br><ul class="gp">
<li><span class="clisting">URI toURI()</span>
Liefert ein <span class="clisting">URI</span>-Objekt vom <span class="clisting">File</span>-Objekt, über das <span class="clisting">toURL()</span> ein <span class="clisting">URL</span>-Objekt generiert.</li>
</ul><a id="mjc95249f916b790ee66ce28de5d1978e2" name="mjc95249f916b790ee66ce28de5d1978e2"></a><a name="t311"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t312"></a><h3 class="t3"><span class="cfett">16.1.11</span> Mit Locking Dateien sperren *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t311"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Damit eine Datei gegen konkurrierenden parallelen Zugriff geschützt ist, lässt sie sich über <span class="ckursiv">Locking</span> absichern. Um einen Lock zu erwerben, ist die Klasse <span class="clisting">FileChannel</span> und deren Methode <span class="clisting">lock()</span> zu nutzen. Um zu testen, ob eine gegebene Datei gelockt ist, lässt sich <span class="clisting">tryLock()</span> verwenden &#8211; etwa in folgender statischen Hilfsmethode:</p>
<p class="tabunter"><strong>Listing 16.13    </strong>com/tutego/insel/io/file/FileUtils.java, isLocked()</p>
<div class="listing"><pre class="prettyprint">public static boolean isLocked( String filename )
{
  try
  {
    FileLock lock = new RandomAccessFile( filename, "r" ).getChannel().tryLock();
    lock.release(); // ignore ClosedChannelException
  }
  catch( IOException e ) {
     return false;
  }
  return true;
}</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Unter Unix-Systemen gibt es kein eindeutig vorgeschriebenes Verfahren zum File-Locking [Zum Beispiel mit dem Alleskönner <span class="clisting">fcntl()</span> aus dem POSIX-Standard oder <span class="clisting">flock()</span> von 4.2 BSD.], sodass Oracle das Sperren bisher nur so umsetzt, dass zwei Java-Programme sich gegenseitig nicht in die Quere kommen, es aber sein kann, dass ein anderes Unix-Programm diesen Lock nicht respektiert. So kann unter Unix eine Datei von mehreren Seiten gelesen werden, selbst wenn ein Java-Programm sie aktuell beschreibt. Auch kann eine Datei auf dem Dateisystem gelöscht werden, selbst wenn das Java-Programm sie noch offen hält. Das Windows-Betriebssystem unterstützt hingegen Locks. Wenn ein Prozess keinen Lock auf die Datei besitzt, kann der Prozess die Datei auch nicht lesen.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="16 Dateien, Verzeichnisse und Dateizugriffe"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_15_008.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_16_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
