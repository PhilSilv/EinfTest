<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: Java ist auch eine Insel – 2.7 Schleifen</title>
<meta name="title" content="Galileo Computing :: Java ist auch eine Insel - 2.7 Schleifen">
<meta name="author" content="Christian Ullenboom ">
<meta name="publisher" content="Galileo Press 2011">
<meta name="copyright" content="Galileo Press 2011">
<meta name="Description" content="Java ist auch eine Insel - Das umfassende Handbuch – 2.7 Schleifen">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href=".htm">
<link rel="next" href=".htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opjiVIV"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opjiVIV"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_00_001.htm#mj58b119301920569a446c9c510503f310">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_01_001.htm#mja8fc5b7ad19fc7332bc66b09a8fda26e">1 Java ist auch eine Sprache</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj313f67c98dc9ecaddfa2d8b80f057fd2">2 Sprachbeschreibung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_03_001.htm#mjcd3b5720e8605484942e3476a1075bdf">3 Klassen und Objekte</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_04_001.htm#mj71fbc84ad33a281b9352b0b19fae2fb2">4 Der Umgang mit Zeichenketten</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_05_001.htm#mj005cd8e604aefc3ae72b92880fcee5c6">5 Eigene Klassen schreiben</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_06_001.htm#mj6f6b47453043c38837bfc32154a97968">6 Exceptions</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_07_001.htm#mjc4a1f6f3499a02fb64fe89046739edca">7 Generics&lt;T&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_08_001.htm#mj46e914488628367f5dfc0a62c3a78a53">8 Äußere.innere Klassen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_09_001.htm#mj94af2b90e8a2dad6c1ef67255f89a137">9 Besondere Klassen der Java SE</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_10_001.htm#mjcae20f50ffbc015d0b66861e7087af9b">10 Architektur, Design und angewandte Objektorientierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_11_001.htm#mj60bc6a007ae9b8657949f3e91d96df3d">11 Die Klassenbibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_12_001.htm#mj0ce00eb41aae2b084534019cf6edc3b6">12 Bits und Bytes und Mathematisches</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_13_001.htm#mj245f5f8d5a858b46462d64e9b9c0786b">13 Datenstrukturen und Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_14_001.htm#mj8c6f381221d805dd6fbe480731ac0c58">14 Threads und nebenläufige Programmierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_15_001.htm#mjbe3ed0989722396930966f95deeb2497">15 Raum und Zeit</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_16_001.htm#mj78bd405fb0de0cff099c06255fe36853">16 Dateien, Verzeichnisse und Dateizugriffe</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_17_001.htm#mjb420b02f4ccf65226f7271e48cefa05d">17 Datenströme</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_18_001.htm#mjedab16f1a9cc168eda4a24416359e0b9">18 Die eXtensible Markup Language (XML)</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_19_001.htm#mjc8f47f7f51ac3795c46c4544f391b02e">19 Grafische Oberflächen mit Swing</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_20_001.htm#mj25cc7d47e476b8b1a183a10ee741dbaa">20 Grafikprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_21_001.htm#mjea7bcdd596c8bd25b078a00221a01a75">21 Netzwerkprogrammierung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_22_001.htm#mjde622db61608a627262a27ecb377d675">22 Verteilte Programmierung mit RMI</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_23_001.htm#mj23bf599d65364bcd05d06a34cb5593bf">23 JavaServer Pages und Servlets</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_24_001.htm#mja621f3b4a74c7fa576b4a58b1614041e">24 Datenbankmanagement mit JDBC</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_25_001.htm#mja2e217bf5724cc65eba184a2af8b79cf">25 Reflection und Annotationen</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_26_001.htm#mjb47dd6e0a309b7e78cad68f6b5de9319">26 Dienstprogramme für die Java-Umgebung</a></td>
</tr>
<tr>
<td><a class="navnav" href="javainsel_27_001.htm#mjf59db36d9280a70e0d3d196e9bf160f5">A Die Begleit-DVD</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download2.galileo-press.de/openbook/galileocomputing_javainsel9.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 20,5 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_02_006.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opjiVIV" class="navnav">Galileo Computing /</a><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opjiVIV" class="navnav"> &lt;openbook&gt; /</a><a href="index.htm" class="navnav"> Java-Insel</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_02_008.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="buchtitel">Java ist auch eine Insel</a><span class="autor"> von Christian Ullenboom </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV" class="navnav"><img src="common/9783836215060.gif" border="0" alt="Buch: Java ist auch eine Insel" title="Buch: Java ist auch eine Insel"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV"><span class="autor"><strong>Java ist auch eine Insel</strong><br>geb., mit DVD<br>1482 S., 49,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1506-0</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="javainsel_02_001.htm#mj313f67c98dc9ecaddfa2d8b80f057fd2" class="navnav">2 Sprachbeschreibung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_001.htm#mj4c39ccec48a76ae30226f3f932121636" class="navnav">2.1 Elemente der Programmiersprache Java</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mj5b64c72b27b5a6ab0a66c5e72bb198cf" class="navnav">2.1.1 Token</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mjecb61a9b6f9af4b3942699e5e3bd68d1" class="navnav">2.1.2 Textkodierung durch Unicode-Zeichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mjc69b2ac175f46ac3528ed4a2a25453bc" class="navnav">2.1.3 Literale</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mjea18182a41b645e6fbe90ee51045338f" class="navnav">2.1.4 Bezeichner</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mj6c435823530664f454748e31c7501bf7" class="navnav">2.1.5 Reservierte Schlüsselwörter</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mj5a0b15f1dc322e8b94e434a98bb500b4" class="navnav">2.1.6 Zusammenfassung der lexikalischen Analyse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_001.htm#mj60051b94eb75aff76b77b34080d60b4c" class="navnav">2.1.7 Kommentare</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_002.htm#mje6cf7db9d2efcd52e5d81fc832f8b139" class="navnav">2.2 Anweisungen formen Programme</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj41f7748a6816ed4f9e4936292f838c48" class="navnav">2.2.1 Was sind Anweisungen?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mjf3869f794db9bf16bbaf9a79668c17d3" class="navnav">2.2.2 Klassendeklaration</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mjd13c9e060033d31199f1482b71660888" class="navnav">2.2.3 Die Reise beginnt am main()</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mjb81c2e28c2fe110a0b7a2ef9da7d10a4" class="navnav">2.2.4 Der erste Methodenaufruf: println()</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj17be0d5f85aa24f9db2bee70ea355e9c" class="navnav">2.2.5 Atomare Anweisungen und Anweisungssequenzen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mje4439fc88c3da817f3de3838c4d83baa" class="navnav">2.2.6 Mehr zu print(), println() und printf() für Bildschirmausgaben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj31d33be82ee48d560fea2597234eb467" class="navnav">2.2.7 Die API-Dokumentation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj2d3ffeacbc5d2d61393972d4204f73c4" class="navnav">2.2.8 Ausdrucksanweisung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj641d7792a19c51b88ef2fe06bf079712" class="navnav">2.2.9 Erste Idee der Objektorientierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_002.htm#mj5892f57ef257e41d40b817935ca8595f" class="navnav">2.2.10 Modifizierer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_003.htm#mjfa63996892f690e96d6bdc12b0045e24" class="navnav">2.3 Datentypen, Typisierung, Variablen und Zuweisungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mj2a9abd617099b9fd801bd838feae09cc" class="navnav">2.3.1 Primitive Datentypen im Überblick</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mj2eae18508a8cdb7b415dcb04a19eba9f" class="navnav">2.3.2 Variablendeklarationen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mje0a1a7aa587e4ef38dc8a8d84cfcd506" class="navnav">2.3.3 Variablendeklaration mit Wertinitialisierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mjb5488e9f0c7c9d35049e1d883a370c30" class="navnav">2.3.4 Zuweisungsoperator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mjf64878f5c2fa2b31ae20a20c7ef2d2e2" class="navnav">2.3.5 Wahrheitswerte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mjc11164cdd5eedb52b21ddd19b16f0385" class="navnav">2.3.6 Ganzzahlige Datentypen und Literale</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mjbd61f831aaea6b174b7a007af1a67476" class="navnav">2.3.7 Das binäre (Basis 2), oktale (Basis 8), hexadezimale (Basis 16) Stellenwertsystem *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mjaed1f301e088df504ed1f24dae0d0caf" class="navnav">2.3.8 Die Fließkommazahlen »float« und »double«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mj45c99ccfafcac85ec9c0e87222047c6f" class="navnav">2.3.9 Alphanumerische Zeichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_003.htm#mj76f1b77014dafca1b945790800d9aedd" class="navnav">2.3.10 Gute Namen, schlechte Namen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_004.htm#mjb044d5eb156360a6192e0bde3eeaceb0" class="navnav">2.4 Blöcke, Initialisierung und Sichtbarkeit</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_004.htm#mj266d7a655884ea92d24ba0aa380f56f3" class="navnav">2.4.1 Gruppieren von Anweisungen mit Blöcken</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_004.htm#mjeb2ef4723a3c26e8c0a6ae1eec3a5626" class="navnav">2.4.2 Initialisierung von lokalen Variablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_004.htm#mj47f0fa7692df8df688cd6a8a6cf9fefd" class="navnav">2.4.3 Sichtbarkeit und Gültigkeitsbereich</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_005.htm#mj727e5a27eac7c9b15b5799f50c4a2895" class="navnav">2.5 Ausdrücke, Operanden und Operatoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj9a3af0f9509c60c1a268346af4c9aedb" class="navnav">2.5.1 Ausdrücke</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj998e5fa30c9c8bd8a0d12f9b09f3f71d" class="navnav">2.5.2 Arithmetische Operatoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj03da32a2fe369215529830de87a204d1" class="navnav">2.5.3 Unäres Minus und Plus</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj63bbbb7a2e0d9190bab41140a3bb33c2" class="navnav">2.5.4 Zuweisung mit Operation</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj54700b6f99a3a2cf4f2a38465dc17289" class="navnav">2.5.5 Präfix- oder Postfix-Inkrement und -Dekrement</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mjb37eafd775d803d67baf4aae75ee97d7" class="navnav">2.5.6 Die relationalen Operatoren und die Gleichheitsoperatoren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mje27fd167a2ddda300630b8d5c405d763" class="navnav">2.5.7 Logische Operatoren: Nicht, Und,Oder, Xor</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj001aa1d35c1746f2106c8a28aff843e8" class="navnav">2.5.8 Der Rang der Operatoren in der Auswertungsreihenfolge</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj714856e56857d03d2d050f84d418981d" class="navnav">2.5.9 Die Typanpassung (das Casting)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj93a46c1206bdba6ff4c9adf47674d2a7" class="navnav">2.5.10 Überladenes Plus für Strings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_005.htm#mj9431e0ffd2d053ce73e865c35801f571" class="navnav">2.5.11 Operator vermisst *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_006.htm#mj3530d43fab0c366ff75b1414feef64e3" class="navnav">2.6 Bedingte Anweisungen oder Fallunterscheidungen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_006.htm#mj5c02f22dd3cf727da8cf465e7a3ec9a0" class="navnav">2.6.1 Die if-Anweisung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_006.htm#mjb94647aaf953d4eac34b42a303575c94" class="navnav">2.6.2 Die Alternative mit einer if-else-Anweisung wählen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_006.htm#mj0ed4e5c52acd8f230d31a246ccd268c6" class="navnav">2.6.3 Der Bedingungsoperator</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_006.htm#mj448e6960f284a4beda96b23e994ebd5e" class="navnav">2.6.4 Die switch-Anweisung bietet die Alternative</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjb517285509ecebe1bb38c15fc43eb4c2" class="navh">2.7 Schleifen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja1bc0775bbd3451450d183be28eeb3eb" class="navh">2.7.1 Die while-Schleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj6e1455d87e650c79a9c4af1df370cf26" class="navh">2.7.2 Die do-while-Schleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjdcbb2e90942d428b2c033d90ed115f3b" class="navh">2.7.3 Die for-Schleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj0a12edb4c2de73996536d2a0cfa93253" class="navh">2.7.4 Schleifenbedingungen und Vergleiche mit ==</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj86b3106463107c046e4f10288be23d6f" class="navh">2.7.5 Ausbruch planen mit break und Wiedereinstieg mit »continue«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjb66a4e86916302730701a5ea728c4602" class="navh">2.7.6 »break« und »continue« mit Marken *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_008.htm#mjc2d5868bd7bba72c8f470a1eff29b8f8" class="navnav">2.8 Methoden einer Klasse</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj03b21193a0b840663819e08cdcf6aa9a" class="navnav">2.8.1 Bestandteil einer Methode</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj6cd639c6b783b1a61957698d1c4d5428" class="navnav">2.8.2 Signatur-Beschreibung in der Java-API</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mje562fc58793dd3e128a981b070731e31" class="navnav">2.8.3 Aufruf einer Methode</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mjd30f308b95326a708d51f03f631ca749" class="navnav">2.8.4 Methoden ohne Parameter deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj2836d5713aaa7620f0e534af0f44159c" class="navnav">2.8.5 Statische Methoden (Klassenmethoden)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj9b0d4e5b321975f9fc5fd010a7b19af8" class="navnav">2.8.6 Parameter, Argument und Wertübergabe</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mje82aa3de4956da1e1f98332c14f73c54" class="navnav">2.8.7 Methoden vorzeitig mit return beenden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj8f915a85179c256c6ea97f1a4c2c6640" class="navnav">2.8.8 Nicht erreichbarer Quellcode bei Methoden</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mjd33fee2b0c0e1f589dc7bed1badb5329" class="navnav">2.8.9 Rückgabewerte</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj021ec31631b9b7c44011343c7fbe8def" class="navnav">2.8.10 Methoden überladen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mjf8e7549c7c3a573dcfba78077f9cf7e1" class="navnav">2.8.11 Vorgegebener Wert für nicht aufgeführte Argumente *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mj93af18e3273e580bb7a4395eeec2f1f8" class="navnav">2.8.12 Finale lokale Variablen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mje1fd0b8e4f3262cd2aa633ff59abaab5" class="navnav">2.8.13 Rekursive Methoden *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="javainsel_02_008.htm#mja99d7594870ad07a0d98217193f32790" class="navnav">2.8.14 Die Türme von Hanoi *</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="javainsel_02_009.htm#mj5080aed8bdb6bf2ecab222e8a24e2514" class="navnav">2.9 Zum Weiterlesen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjb517285509ecebe1bb38c15fc43eb4c2" name="mjb517285509ecebe1bb38c15fc43eb4c2"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">2.7</span> Schleifen  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Schleifen dienen dazu, bestimmte Anweisungen immer wieder abzuarbeiten. Zu einer Schleife gehören die Schleifenbedingung und der Rumpf. Die Schleifenbedingung, ein boolescher Ausdruck, entscheidet darüber, unter welcher Bedingung die Wiederholung ausgeführt wird. In Abhängigkeit von der Schleifenbedingung kann der Rumpf mehrmals ausgeführt werden. Dazu wird bei jedem Schleifendurchgang die Schleifenbedingung geprüft. Das Ergebnis entscheidet, ob der Rumpf ein weiteres Mal durchlaufen (<span class="clisting">true</span>) oder die Schleife beendet wird (<span class="clisting">false</span>). Java bietet vier Typen von Schleifen:</p>
<ul class="gp">
<li><span class="clisting">while</span>-Schleife</li>
</ul>
<ul class="gp">
<li><span class="clisting">do</span>-<span class="clisting">while</span>-Schleife</li>
</ul>
<ul class="gp">
<li>einfache <span class="clisting">for</span>-Schleife</li>
</ul>
<ul class="gp">
<li>erweiterte <span class="clisting">for</span>-Schleife (auch <span class="ckursiv">For-Each Loop</span> genannt)</li>
</ul>
<p>Die ersten drei Schleifentypen erklären die folgenden Abschnitte, während die erweiterte <span class="clisting">for</span>-Schleife nur bei Sammlungen nötig ist und daher später bei Feldern (Kapitel 3, »Klassen und Objekte«) und dynamischen Datenstrukturen (Kapitel 13, »Datenstrukturen und Algorithmen«) Erwähnung findet.</p><a id="mja1bc0775bbd3451450d183be28eeb3eb" name="mja1bc0775bbd3451450d183be28eeb3eb"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">2.7.1</span> Die while-Schleife  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die <span class="clisting">while</span>-Schleife ist eine abweisende Schleife, die vor jedem Schleifeneintritt die Schleifenbedingung prüft. Ist die Bedingung wahr, führt sie den Rumpf aus, andernfalls beendet sie die Schleife. Wie bei <span class="clisting">if</span> muss auch bei den Schleifen der Typ der Bedingungen <span class="clisting">boolean</span> sein. [Wir hatten das Thema bei <span class="clisting">if</span> schon angesprochen: In C(++) ließe sich <span class="clisting">while ( i )</span> schreiben, was in Java <span class="clisting">while ( i != 0 )</span> wäre.
] </p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Zähle von 100 bis 40 in Zehnerschritten herunter:</p>
<p class="tabunter"><strong>Listing 2.16    </strong>WhileLoop.java, main()</p>
<div class="listing"><pre class="prettyprint">int <span class="cfett">cnt = 100</span>;
while ( <span class="cfett">cnt &gt;= 40</span> )
{
  System.out.printf( "Ich erblickte das Licht der Welt " +
                     "in Form einer <span class="cfett">%d</span>-Watt-Glühbirne.%n", <span class="cfett">cnt</span> );
  <span class="cfett">cnt -= 10</span>;
}</pre></div>
</td>
</tr>
</table><br><p>Vor jedem Schleifendurchgang wird der Ausdruck neu ausgewertet, und ist das Ergebnis <span class="clisting">true</span>, so wird der Rumpf ausgeführt. Die Schleife ist beendet, wenn das Ergebnis <span class="clisting">false</span> ist. Ist die Bedingung schon vor dem ersten Eintritt in den Rumpf nicht wahr, so wird der Rumpf erst gar nicht durchlaufen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Wird innerhalb des Schleifenkopfs schon alles Interessante erledigt, so muss trotzdem eine Anweisung folgen. Dies ist der passende Einsatz für die leere Anweisung:</p>
<p class="tabunter"><strong>Listing 2.17    </strong>WhileExit.java, main()</p>
<div class="listing"><pre class="prettyprint">while ( ! new Scanner(System.in).next().equalsIgnoreCase("quit") )
  <span class="cfett">;</span>                              // Rumpf ist leer</pre></div>
<p class="BStandard">Nur wenn auf der Kommandozeile quit eingegeben wird, läutet dies das Ende der Schleife ein; andernfalls gibt es eine neue Eingabeaufforderung.</p>
</td>
</tr>
</table><br><h4 class="t4">Endlosschleifen</h4>
<p>Ist die Bedingung einer <span class="clisting">while</span>-Schleife immer wahr, dann handelt es sich um eine Endlosschleife. Die Konsequenz ist, dass die Schleife endlos wiederholt wird:</p>
<div class="listing"><pre class="prettyprint">while ( true )
{
  // immer wieder und immer wieder
}</pre></div>
<p>Endlosschleifen bedeuten normalerweise das Aus für jedes Programm. Doch es gibt Hilfe! Aus dieser Endlosschleife können wir mittels <span class="clisting">break</span> entkommen. Genau genommen beenden aber auch nicht aufgefangene Exceptions oder auch <span class="clisting">System.exit()</span> die Programme.</p>
<div class="bildbox">
<p><a name="IDAXYAC"></a><a onClick="OpenWin('bilder/eclipse_terminate.gif','Abbildung',800,800)"><img border="0" src="bilderklein/kleineclipse_terminate.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>In Eclipse lassen sich Programme von außen beenden. Dazu bietet die Ansicht <span class="kapitalchen">Console</span> eine rote Schaltfläche in Form eines Quadrats, die nach der Aktivierung im Fall eines laufenden Programms die JVM mit den laufenden Programmen beendet.</p><a id="mj6e1455d87e650c79a9c4af1df370cf26" name="mj6e1455d87e650c79a9c4af1df370cf26"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">2.7.2</span> Die do-while-Schleife  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Dieser Schleifentyp ist eine annehmende Schleife, da <span class="clisting">do</span>-<span class="clisting">while</span> die Schleifenbedingung erst nach jedem Schleifendurchgang prüft. Bevor es zum ersten Test kommt, ist der Rumpf also schon einmal durchlaufen worden:</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Graf Zahl zählt mit <span class="clisting">do-while</span> von 1 bis 10:</p>
<p class="tabunter"><strong>Listing 2.18    </strong>DoWhileLoop.java, main()</p>
<div class="listing"><pre class="prettyprint">int pos = 1;
do
{
  System.out.println( pos );
  pos++;
} while ( pos &lt;= 10 );                // Bemerke das Semikolon</pre></div>
</td>
</tr>
</table><br><p>Es ist wichtig, auf das Semikolon hinter der <span class="clisting">while</span>-Anweisung zu achten. Liefert die Bedingung ein <span class="clisting">true</span>, so wird der Rumpf erneut ausgeführt. [Das ist in Pascal und Delphi anders. Hier läuft eine Schleife der Bauart <span class="clisting">repeat ... until Bedingung </span>(das Gegenstrück zu Javas <span class="clisting">do-while</span>) so lange, bis die Bedingung wahr wird, und bricht dann ab &#8211; ist sie falsch, geht es weiter mit einer Wiederholung. Ist in Java die Bedingung erfüllt, bedeutet es das Ende der Schleifendurchläufe; das ist also genau das Gegenteil. Die Schleife vom Typ <span class="clisting">while Bedingung ... do</span> in Pascal und Delphi entspricht aber genau der <span class="clisting">while</span>-Schleife in Java.
]  Andernfalls wird die Schleife beendet, und das Programm wird mit der nächsten Anweisung nach der Schleife fortgesetzt.</p>
<h4 class="t4">Äquivalenz einer while- und einer do-while-Schleife *</h4>
<p>Die <span class="clisting">do</span>-Schleife wird seltener gebraucht als die <span class="clisting">while</span>-Schleife. Dennoch lassen sich beide ineinander überführen. Zunächst der erste Fall: Wir ersetzen eine <span class="clisting">while</span>-Schleife durch eine <span class="clisting">do</span>-<span class="clisting">while</span>-Schleife:</p>
<div class="listing"><pre class="prettyprint">while ( Ausdruck )
  Anweisung</pre></div>
<p>Führen wir uns noch einmal vor Augen, was hier passiert. In Abhängigkeit vom Ausdruck wird der Rumpf ausgeführt. Da zunächst ein Test kommt, wäre die <span class="clisting">do</span>-<span class="clisting">while</span>-Schleife schon eine Blockausführung weiter. So fragen wir in einem ersten Schritt mit einer <span class="clisting">if</span>-Anweisung ab, ob die Bedingung wahr ist oder nicht. Wenn ja, dann lassen wir den Programmcode in einer <span class="clisting">do</span>-<span class="clisting">while</span>-Schleife abarbeiten.</p>
<p>Die äquivalente <span class="clisting">do</span>-<span class="clisting">while</span>-Schleife sieht also wie folgt aus:</p>
<div class="listing"><pre class="prettyprint">if ( Ausdruck )
  do
    Anweisung
  while ( Ausdruck ) ;</pre></div>
<p>Nun der zweite Fall: Wir ersetzen die <span class="clisting">do</span>-<span class="clisting">while</span>-Schleife durch eine <span class="clisting">while</span>-Schleife:</p>
<div class="listing"><pre class="prettyprint">do
  Anweisung
while ( Ausdruck ) ;</pre></div>
<p>Da zunächst die Anweisungen ausgeführt werden und anschließend der Test, schreiben wir für die <span class="clisting">while</span>-Variante die Ausdrücke einfach vor den Test. So ist sichergestellt, dass diese zumindest einmal abgearbeitet werden:</p>
<div class="listing"><pre class="prettyprint">Anweisung
while ( Ausdruck )
  Anweisung</pre></div><a id="mjdcbb2e90942d428b2c033d90ed115f3b" name="mjdcbb2e90942d428b2c033d90ed115f3b"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">2.7.3</span> Die for-Schleife  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die <span class="clisting">for</span>-Schleife ist eine spezielle Variante einer <span class="clisting">while</span>-Schleife und wird typischerweise zum Zählen benutzt. Genauso wie <span class="clisting">while</span>-Schleifen sind <span class="clisting">for</span>-Schleifen abweisend, der Rumpf wird also erst dann ausgeführt, wenn die Bedingung wahr ist.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gib die Zahlen von 1 bis 10 auf dem Bildschirm aus:</p>
<p class="tabunter"><strong>Listing 2.19    </strong>ForLoop.java, main()</p>
<div class="listing"><pre class="prettyprint">for ( int i = 1; i &lt;= 10; i++ )            // i ist Schleifenzähler
  System.out.println( i );</pre></div>
</td>
</tr>
</table><br><p>Eine genauere Betrachtung der Schleife zeigt die unterschiedlichen Segmente:</p>
<ul class="gp">
<li><span class="ckursiv">Initialisierung der Schleife.</span> Der erste Teil der <span class="clisting">for</span>-Schleife ist ein Ausdruck wie <span class="clisting">i = 1</span>, der vor der Durchführung der Schleife genau einmal ausgeführt wird. Dann wird das Ergebnis verworfen. Tritt in der Auswertung ein Fehler auf, so wird die Abarbeitung unterbrochen, und die Schleife kann nicht vollständig ausgeführt werden. Der erste Teil kann lokale Variablen deklarieren und initialisieren. Diese Zählvariable ist dann außerhalb des Blocks nicht mehr gültig. [Im Gegensatz zu C++ ist das Verhalten klar definiert, und es gibt kein Hin und Her. In C++ implementierten Compilerbauer die Variante einmal so, dass die Variable nur im Block galt, andere interpretierten die Sprachspezifikation so, dass diese auch außerhalb gültig blieb. Die aktuelle C++-Definition schreibt nun vor, dass die Variable außerhalb des Blocks nicht mehr gültig ist. Da es jedoch noch alten Programmcode gibt, haben viele Compilerbauer eine Option eingebaut, mit der das Verhalten der lokalen Variablen bestimmt werden kann.
]  Es darf noch keine lokale Variable mit dem gleichen Namen geben.</li>
</ul>
<ul class="gp">
<li><span class="ckursiv">Schleifentest</span><span class="ckursiv">/Schleifenbedingung.</span> Der mittlere Teil, wie <span class="clisting">i &lt;= 10</span>, wird vor dem Durchlaufen des Schleifenrumpfs &#8211; also vor jedem Schleifeneintritt &#8211; getestet. Ergibt der Ausdruck <span class="clisting">false</span>, wird die Schleife nicht durchlaufen und beendet. Das Ergebnis muss, wie bei einer <span class="clisting">while</span>-Schleife, vom Typ <span class="clisting">boolean</span> sein. Ist kein Test angegeben, so ist das Ergebnis automatisch <span class="clisting">true</span>.</li>
</ul>
<ul class="gp">
<li><span class="ckursiv">Schleifen-Inkrement</span> <span class="ckursiv">durch einen Fortschaltausdruck.</span> Der letzte Teil, wie <span class="clisting">i++</span>, wird immer am Ende jedes Schleifendurchlaufs, aber noch vor dem nächsten Schleifeneintritt ausgeführt. Das Ergebnis wird nicht weiter verwendet. Ergibt die Bedingung des Tests <span class="clisting">true</span>, dann befindet sich beim nächsten Betreten des Rumpfs der veränderte Wert im Rumpf.</li>
</ul>
<p>Betrachten wir das Beispiel, so ist die Auswertungsreihenfolge folgender Art:</p>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>1.</strong></td>
<td valign="top" width="100%" align="left"> Initialisiere i mit 1.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>2.</strong></td>
<td valign="top" width="100%" align="left"> Teste, ob i &lt;= 10 gilt.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>3.</strong></td>
<td valign="top" width="100%" align="left"> Ergibt sich true, dann führe den Block aus, sonst ist es das Ende der Schleife.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>4.</strong></td>
<td valign="top" width="100%" align="left"> Erhöhe i um 1.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="top" width="10"><strong>5.</strong></td>
<td valign="top" width="100%" align="left"> Gehe zu Schritt 2.</td>
</tr>
<tr>
<td valign="baseline" width="16">     </td>
<td valign="top" width="100%" align="left">     </td>
</tr>
</table>
<h4 class="t4">Schleifenzähler</h4>
<p>Wird die <span class="clisting">for</span>-Schleife zum Durchlaufen einer Variablen genutzt, so heißt der <span class="ckursiv">Schleifenzähler</span> entweder <span class="ckursiv">Zählvariable</span> oder <span class="ckursiv">Laufvariable</span>.</p>
<p>Wichtig sind die Initialisierung und die korrekte Abfrage am Ende. Schnell läuft die Schleife einmal zu oft durch und führt so zu falschen Ergebnissen. Die Fehler bei der Abfrage werden auch »off-by-one error« genannt, wenn zum Beispiel statt <span class="clisting">&lt;=</span> der Operator <span class="clisting">&lt;</span> steht. Dann nämlich läuft die Schleife nur bis 9. Ein anderer Name für den Schleifenfehler lautet »fencepost error«. Es geht um die Frage, wie viele Pfähle für einen 100 m langen Zaun nötig sind, sodass alle Pfähle einen Abstand von 10 m haben: 9, 10, 11?</p>
<h4 class="t4">Wann »for« und wann »while«?</h4>
<p>Da sich die <span class="clisting">while</span>- und <span class="clisting">for</span>-Schleife sehr ähnlich sind, ist die Frage berechtigt, wann die eine und wann die andere zu nutzen ist. Leider verführt die kompakte <span class="clisting">for</span>-Schleife sehr schnell zu einer Überladung. Manche Programmierer packen gerne alles in den Schleifenkopf hinein, und der Rumpf besteht nur aus einer leeren Anweisung. Dies ist ein schlechter Stil und sollte vermieden werden.</p>
<p><span class="clisting">for</span>-Schleifen sollten immer dann benutzt werden, wenn eine Variable um eine konstante Größe erhöht wird. Tritt in der Schleife keine Schleifenvariable auf, die inkrementiert oder dekrementiert wird, sollte eine <span class="clisting">while</span>-Schleife genutzt werden. Eine <span class="clisting">do</span>-<span class="clisting">while</span>-Schleife sollte dann eingesetzt werden, wenn die Abbruchbedingung erst am Ende eines Schleifendurchlaufs ausgewertet werden kann. Auch sollte die <span class="clisting">for</span>-Schleife dort eingesetzt werden, wo sich alle drei Ausdrücke im Schleifenkopf auf dieselbe Variable beziehen. Vermieden werden sollten unzusammenhängende Ausdrücke im Schleifenkopf. Der schreibende Zugriff auf die Schleifenvariable im Rumpf ist eine schlechte Idee, wenn sie auch gleichzeitig im Kopf modifiziert wird &#8211; das ist schwer zu durchschauen und kann leicht zu Endlosschleifen führen.</p>
<h4 class="t4">Eine Endlosschleife mit »for«</h4>
<p>Da alle drei Ausdrücke im Kopf der Schleife optional sind, können sie weggelassen werden, und es ergibt sich eine Endlosschleife. Diese Schreibweise ist somit mit <span class="clisting">while(true)</span> semantisch äquivalent:</p>
<div class="listing"><pre class="prettyprint">for ( ; ; )
  ;</pre></div>
<p>Die trennenden Semikola dürfen nicht verschwinden. Falls demnach keine Schleifenbedingung angegeben ist, ist der Ausdruck immer wahr. Es folgt keine Initialisierung und keine Auswertung des Fortschaltausdrucks.</p>
<h4 class="t4">Geschachtelte Schleifen</h4>
<p>Schleifen, und das gilt insbesondere für <span class="clisting">for</span>-Schleifen, können verschachtelt werden. Syntaktisch ist das auch logisch, da sich innerhalb des Schleifenrumpfs beliebige Anweisungen aufhalten dürfen. Um fünf Zeilen von Sternchen auszugeben, wobei in jeder Zeile immer ein Stern mehr erscheinen soll, schreiben wir:</p>
<div class="listing"><pre class="prettyprint">for ( int i = 1; i &lt;= 5; i++ )
{
  for ( int j = 1; j &lt;= i; j++ )
    System.out.print( "*" );
  System.out.println();
}</pre></div>
<p>Als besonderes Element ist die Abhängigkeit des Schleifenzählers <span class="clisting">j</span> von <span class="clisting">i</span> zu werten. Es folgt die Ausgabe:</p>
<div class="listing"><pre class="prettyprint">*
**
***
****
*****</pre></div>
<p>Die übergeordnete Schleife nennt sich <span class="ckursiv">äußere Schleife</span>, die untergeordnete <span class="ckursiv">innere Schleife</span>. In unserem Beispiel wird die äußere Schleife die Zeilen zählen und die innere die Sternchen in eine Zeile ausgeben, also für die Spalte verantwortlich sein.</p>
<p>Da Schleifen beliebig tief geschachtelt werden können, muss besonderes Augenmerk auf die Laufzeit gelegt werden. Die inneren Schleifen werden immer so oft ausgeführt, wie die äußere Schleife durchlaufen wird.</p>
<h4 class="t4">for-Schleifen und ihr Komma-Operator *</h4>
<p>Im ersten und letzten Teil einer <span class="clisting">for</span>-Schleife lässt sich ein Komma einsetzen. Damit lassen sich entweder mehrere Variablen gleichen Typs deklarieren &#8211; wie wir es schon kennen &#8211; oder mehrere Ausdrücke nebeneinander schreiben. [Wenn Java eine ausdrucksorientierte Sprache wäre, könnten wir hier beliebige Programme hineinlegen.
]  Mit den Variablen <span class="clisting">i</span> und <span class="clisting">j</span> können wir so eine kleine Multiplikationstabelle aufbauen:</p>
<div class="listing"><pre class="prettyprint">for ( int i = 1<span class="cfett">,</span> j = 9; i &lt;= j; i++<span class="cfett">,</span> j-- )
  System.out.printf( "%d * %d = %d%n", i, j, i*j );</pre></div>
<p>Dann ist die Ausgabe:</p>
<div class="listing"><pre class="prettyprint">1 * 9 = 9
2 * 8 = 16
3 * 7 = 21
4 * 6 = 24
5 * 5 = 25</pre></div>
<p>Ein weiteres Beispiel mit komplexerer Bedingung wäre das folgende, das vor dem Schleifendurchlauf den Startwert für die Variablen <span class="clisting">x</span> und <span class="clisting">y</span> initialisiert, dann <span class="clisting">x</span> und <span class="clisting">y</span> heraufsetzt und die Schleife so lange ausführt, bis <span class="clisting">x</span> und <span class="clisting">y</span> beide 10 sind:</p>
<div class="listing"><pre class="prettyprint">int x, y;
for ( x = initX()<span class="cfett">,</span> y = initY()<span class="cfett">,</span> x++<span class="cfett">,</span> y++;
      ! (x == 10 &amp;&amp; y == 10);
      x += xinc(), y += yinc() )
{
  // ...
}</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Tipp   </span>Komplizierte <span class="clisting">for</span>-Schleifen sind lesbarer, wenn die drei <span class="clisting">for</span>-Teile in getrennten Zeilen stehen.</p>
</td>
</tr>
</table><br><a id="mj0a12edb4c2de73996536d2a0cfa93253" name="mj0a12edb4c2de73996536d2a0cfa93253"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">2.7.4</span> Schleifenbedingungen und Vergleiche mit ==  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Eine Schleifenabbruchbedingung kann ganz unterschiedlich aussehen. Beim Zählen ist es häufig der Vergleich auf einen Endwert. Oft steckt an dieser Stelle ein absoluter Vergleich mit <span class="clisting">==</span>, der aus zwei Gründen problematisch werden kann.</p>
<p>Sehen wir uns das erste Problem anhand einiger Programmzeilen an:</p>
<div class="listing"><pre class="prettyprint">int i = ...;
while ( i<span class="cfett"> !</span>= 9 )
  i++;</pre></div>
<p>Ist der Wert der Variablen <span class="clisting">i</span> kleiner als 9, so haben wir beim Zählen kein Problem, denn dann ist anschließend spätestens bei 9 Schluss. Ist der Wert allerdings echt größer als 9, so ist die Bedingung ebenso wahr, und der Schleifenrumpf wird ziemlich lange durchlaufen &#8211; genau genommen so weit, bis wir durch einen Überlauf wieder bei 0 beginnen und dann auch bei 9 landen. Die Absicht ist sicherlich eine andere gewesen. Die Schleife sollte nur so lange zählen, wie <span class="clisting">i</span> kleiner 9 ist, und sonst nicht. Daher passt Folgendes besser:</p>
<div class="listing"><pre class="prettyprint">int i = ...;
while ( i &lt; 9 )
  i++;</pre></div>
<p>Jetzt rennt der Interpreter bei Zahlen größer 9 nicht endlos weiter, sondern stoppt die Schleife sofort.</p>
<h4 class="t4">Rechenungenauigkeiten</h4>
<p>Das zweite Problem ergibt sich bei Fließkommazahlen. Es ist sehr problematisch, echte Vergleiche zu fordern:</p>
<div class="listing"><pre class="prettyprint">double d = 0.0;
while ( d != 1.0 )               // Achtung! Problematischer Vergleich!
{
  d += 0.1;
  System.out.println( d );
}</pre></div>
<p>Lassen wir das Programmsegment laufen, so sehen wir, dass die Schleife hurtig über das Ziel hinausschießt:</p>
<div class="listing"><pre class="prettyprint">0.1
0.2
0.30000000000000004
0.4
0.5
0.6
0.7
0.7999999999999999
0.8999999999999999
0.9999999999999999
1.0999999999999999
1.2
1.3</pre></div>
<p>Und das so lange, bis das Auge müde wird ...</p>
<p>Bei Fließkommawerten bietet es sich daher immer an, mit den relationalen Operatoren <span class="clisting">&lt;</span> oder <span class="clisting">&gt;</span> zu arbeiten.</p>
<p>Eine zweite Möglichkeit neben dem echten Kleiner-/Größer-Vergleich ist, eine erlaubte Abweichung (Delta) zu definieren. Mathematiker bezeichnen die Abweichung von zwei Werten mit dem griechischen Kleinbuchstaben Epsilon. Wenn wir einen Vergleich von zwei Fließkommazahlen anstreben und bei einem Gleichheitsvergleich eine Toleranz mit betrachten wollen, so schreiben wir einfach:</p>
<div class="listing"><pre class="prettyprint">if ( Math.abs(x &#8211; y) &lt;= epsilon )
  ...</pre></div>
<p>Epsilon ist die erlaubte Abweichung. <span class="clisting">Math.abs(x)</span> berechnet von einer Zahl <span class="clisting">x</span> den Absolutwert.</p>
<h4 class="t4">Wie Bereichsangaben schreiben? *</h4>
<p>Für Bereichsangaben der Form <span class="clisting">a &gt;= 23 &amp;&amp; a &lt;= 42</span> empfiehlt es sich, den unteren Wert in den Vergleich einzubeziehen, den Wert für die obere Grenze jedoch nicht (inklusive untere Grenzen und exklusive obere Grenzen). Für unser Beispiel, in dem <span class="clisting">a</span> im Intervall bleiben soll, ist Folgendes besser: <span class="clisting">a &gt;= 23 &amp;&amp; a &lt; 43</span>. Die Begründung dafür ist einleuchtend:</p>
<ul class="gp">
<li>Die Größe des Intervalls ist die Differenz aus den Grenzen.</li>
</ul>
<ul class="gp">
<li>Ist das Intervall leer, so sind die Intervallgrenzen gleich.</li>
</ul>
<ul class="gp">
<li>Die untere Grenze ist nie größer als die obere Grenze.</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Die Standardbibliothek verwendet diese Konvention auch durchgängig, etwa im Fall von <span class="clisting">substring()</span> bei String-Objekten oder <span class="clisting">subList()</span> bei Listen oder bei der Angabe von Array-Indexwerten.</p>
</td>
</tr>
</table><br><p>Die Vorschläge können für normale Schleifen mit Vergleichen übernommen werden. So ist eine Schleife mit zehn Durchgängen besser in der Form</p>
<div class="listing"><pre class="prettyprint">for ( i = 0; i &lt; 10; i++ )</pre></div>
<p>formuliert als in der semantisch äquivalenten Form:</p>
<div class="listing"><pre class="prettyprint">for ( i = 0; i &lt;= 9; i++ )</pre></div><a id="mj86b3106463107c046e4f10288be23d6f" name="mj86b3106463107c046e4f10288be23d6f"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">2.7.5</span> Ausbruch planen mit break und Wiedereinstieg mit »continue«  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Wird innerhalb einer <span class="clisting">for</span>-, <span class="clisting">while</span>- oder <span class="clisting">do</span>-<span class="clisting">while</span>-Schleife eine <span class="clisting">break</span>-Anweisung eingesetzt, so wird der Schleifendurchlauf beendet und die Abarbeitung bei der ersten Anweisung nach der Schleife fortgeführt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Führe die Schleife so lange durch, bis <span class="clisting">i</span> den Wert 0 hat:</p>
<div class="listing"><pre class="prettyprint">int i = 10;

while ( true )
  if ( i-- == 0 )
    <span class="cfett">break;</span></pre></div>
</td>
</tr>
</table><br><p>Die Anweisung ist nützlich, um im Programmblock festzustellen, ob die Schleife noch einmal durchlaufen werden soll. Sie entlastet den Schleifenkopf, der sonst die Bedingung testen würde. Da ein kleines <span class="clisting">break</span> jedoch im Programmtext verschwinden könnte, seine Bedeutung aber groß ist, sollte ein kleiner Hinweis auf diese Anweisung gesetzt werden.</p>
<p><span class="clisting">break</span> lässt sich gut verwenden, um aus einer Schleife vorzeitig auszubrechen, ohne Flags zu benutzen. Dazu ein Beispiel, was vermieden werden sollte:</p>
<div class="listing"><pre class="prettyprint">boolean endFlag = false;
do
{
  if ( condition )
  {
    // Code ohne Ende
    endFlag = true;
  }
} while ( anotherCondition &amp;&amp; ! endFlag );</pre></div>
<p>Stattdessen schreiben wir:</p>
<div class="listing"><pre class="prettyprint">do
{
  if ( condition )
  {
    // Code wieder ohne Ende
    break;
  }
} while ( anotherCondition );</pre></div>
<p>Die alternative Lösung stellt natürlich einen Unterschied dar, wenn nach dem <span class="clisting">if</span> noch Anweisungen in der Schleife stehen.</p>
<p>Innerhalb einer <span class="clisting">for</span>-, <span class="clisting">while</span>- oder <span class="clisting">do</span>-<span class="clisting">while</span>-Schleife lässt sich eine <span class="clisting">continue</span>-Anweisung einsetzen, die nicht wie <span class="clisting">break</span> die Schleife beendet, sondern zum Schleifenkopf zurückgeht. Nach dem Auswerten des Fortschaltausdrucks wird im nächsten Schritt erneut geprüft, ob die Schleife weiter durchlaufen werden soll. Ein häufiges Einsatzfeld sind Schleifen, die im Rumpf immer wieder Werte so lange holen und testen, bis diese für die Weiterverarbeitung geeignet sind.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Beispiel   </span>Gib die positiven geraden Zahlen von 0 bis 10 aus:</p>
<div class="listing"><pre class="prettyprint">for ( int i = 0; i &lt;= 10; i++ )
{
  if ( i % 2 == 1 )
    <span class="cfett">continue;

  </span>System.out.println( i + " ist eine gerade Zahl" );
}</pre></div>
</td>
</tr>
</table><br><div class="bildbox">
<p><a name="IDAINBC"></a><a onClick="OpenWin('bilder/365_java_02_013.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein365_java_02_013.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p>Manche Programmstücke sind aber ohne <span class="clisting">continue</span> lesbarer. Ein <span class="clisting">continue</span> am Ende einer <span class="clisting">if</span>-Abfrage kann durch einen <span class="clisting">else</span>-Teil bedeutend klarer gefasst werden. Zunächst das schlechte Beispiel:</p>
<div class="listing"><pre class="prettyprint">while ( condition )       // Durch continue verzuckert
{
  if ( anotherCondition )
  {
    // Code,Code,Code
    continue;
  }
  // Weiterer schöner Code
}</pre></div>
<p>Viel deutlicher ist:</p>
<div class="listing"><pre class="prettyprint">while ( condition )
{
  if ( anotherCondition )
  {
    // Code, Code, Code
  }
  else
  {
    // Weiterer schöner Code
  }
}</pre></div><a id="mjb66a4e86916302730701a5ea728c4602" name="mjb66a4e86916302730701a5ea728c4602"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">2.7.6</span> »break« und »continue« mit Marken *  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Obwohl das Schlüsselwort <span class="clisting">goto</span> in der Liste der reservierten Wörter auftaucht, erlaubt Java keine beliebigen Sprünge, und <span class="clisting">goto</span> ist ohne Funktionalität. Allerdings lassen sich in Java Anweisungen &#8211; oder ein Block, der eine besondere Anweisung ist &#8211; markieren. Ein Grund für die Einführung von Markierungen ist der, dass <span class="clisting">break</span> bzw. <span class="clisting">continue</span> mehrdeutig ist:</p>
<ul class="gp">
<li>Wenn es zwei ineinander verschachtelte Schleifen gibt, würde ein <span class="clisting">break</span> in der inneren Schleife nur die innere abbrechen. Was ist jedoch, wenn die äußere Schleife beendet werden soll? Das Gleiche gilt für <span class="clisting">continue</span>, wenn die äußere Schleife weiter vorgesetzt werden soll und nicht die innere.</li>
</ul>
<ul class="gp">
<li>Nicht nur Schleifen nutzen das Schlüsselwort <span class="clisting">break</span>, sondern auch die <span class="clisting">switch</span>-Anweisung. Was ist, wenn eine Schleife eine <span class="clisting">switch</span>-Anweisung enthält, doch nicht der lokale <span class="clisting">case</span>-Zweig mit <span class="clisting">break</span> beendet werden soll, sondern die ganze Schleife mit <span class="clisting">break</span> abgebrochen werden soll?</li>
</ul>
<p>Die Sprachdesigner von Java haben sich dazu entschlossen, Markierungen einzuführen, sodass <span class="clisting">break</span> und <span class="clisting">continue</span> die markierte Anweisung entweder verlassen oder wieder durchlaufen können. Falsch eingesetzt, können sie natürlich zu Spaghetti-Code wie aus der Welt der unstrukturierten Programmiersprachen führen. Doch als verantwortungsvolle Java-Programmierer werden wir das Feature natürlich nicht missbrauchen.</p>
<h4 class="t4">»break« mit einer Marke für Schleifen</h4>
<p>Betrachten wir ein erstes Beispiel mit einer Marke (engl. label), in dem <span class="clisting">break</span> nicht nur aus der inneren Teufelsschleife ausbricht, sondern aus der äußeren gleich mit. Marken werden definiert, indem ein Bezeichner mit Doppelpunkt abgeschlossen und vor eine Anweisung gesetzt wird &#8211; die Anweisung wird damit markiert wie eine Schleife:</p>
<p class="tabunter"><strong>Listing 2.20    </strong>BreakAndContinueWithLabels.java, main()</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">heaven:</span>
while ( true )
{
 <span class="cfett"> hell:</span>
  while ( true )
  {
   <span class="cfett"> break /* continue */ heaven;</span>
  }
  // System.out.println( "hell" );
}
System.out.println( "heaven" );</pre></div>
<p>Ein <span class="clisting">break</span> ohne Marke in der inneren <span class="clisting">while</span>-Schleife beendet nur die innere Wiederholung, und ein <span class="clisting">continue</span> würde zur Fortführung dieser inneren <span class="clisting">while</span>-Schleife führen. Unser Beispiel zeigt die Anwendung einer Marke hinter den Schlüsselwörtern <span class="clisting">break</span> und <span class="clisting">continue</span>.</p>
<p>Das Beispiel benutzt die Marke <span class="clisting">hell</span> nicht, und die Zeile mit der Ausgabe »hell« ist bewusst ausgeklammert, denn sie ist nicht erreichbar und würde andernfalls zu einem Compilerfehler führen. Dass die Anweisung nicht erreichbar ist, ist klar, denn mit einem <span class="clisting">break heaven</span> kommt das Programm nie zur nächsten Anweisung hinter der inneren Schleife, und somit ist eine Konsolenausgabe nicht erreichbar.</p>
<p>Setzen wir statt <span class="clisting">break heaven</span> ein <span class="clisting">break hell</span> in die innere Schleife, ändert sich dies:</p>
<div class="listing"><pre class="prettyprint"><span class="cfett">heaven:</span>
while ( true )
{
 <span class="cfett"> hell:</span>
  while ( true )
  {
   <span class="cfett"> break /* continue */ hell;</span>
  }
  System.out.println( "hell" );
}
// System.out.println( "heaven" );</pre></div>
<p>In diesem Szenario ist die Ausgabe »heaven« nicht erreichbar und muss auskommentiert werden. Das <span class="clisting">break hell</span> in der inneren Schleife wirkt wie ein einfaches <span class="clisting">break</span> ohne Marke, und das ablaufende Programm führt laufend zu Bildschirmausgaben von »hell«.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Rätsel   </span>Warum übersetzt der Compiler Folgendes ohne Murren?</p>
<p class="tabunter"><strong>Listing 2.21    </strong>WithoutComplain.java</p>
<div class="listing"><pre class="prettyprint">class WithoutComplain
{
  static void main( String[] args )
  {
    http://www.tutego.de/
    System.out.print( "Da gibt's Java-Tipps und -Tricks." );
  }
}</pre></div>
</td>
</tr>
</table><br><h4 class="t4">Mit dem »break« und einer Marke aus dem »switch« aussteigen</h4>
<p>Da dem <span class="clisting">break</span> mehrere Funktionen in der Sprache Java zukommen, kommt es zu einer Mehrdeutigkeit, wenn im <span class="clisting">case</span>-Block einer <span class="clisting">switch</span>-Anweisung ein <span class="clisting">break</span> eingesetzt wird.</p>
<p>Im folgenden Beispiel läuft eine Schleife einen String ab. Der Zugriff auf ein Zeichen im String realisiert die <span class="clisting">String</span>-Objektmethode <span class="clisting">charAt()</span>; die Länge eines Strings liefert <span class="clisting">length()</span>. Als Zeichen im String sollen C, G, A, T erlaubt sein. Für eine Statistik über die Anzahl der einzelnen Buchstaben zählt eine <span class="clisting">switch</span>-Anweisung beim Treffer jeweils die richtige Variable <span class="clisting">c</span>, <span class="clisting">g</span>, <span class="clisting">a</span>, <span class="clisting">t</span> um <span class="clisting">1</span> hoch. Falls ein falsches Zeichen im String vorkommt, wird die Schleife beendet. Und genau hier bekommt die Markierung ihren Auftritt:</p>
<p class="tabunter"><strong>Listing 2.22    </strong>SwitchBreak.java, main()</p>
<div class="listing"><pre class="prettyprint">String dnaBases = "CGCAGTTCTTCGGXAC";
int a = 0, g = 0, c = 0, t = 0;
<span class="cfett">
loop:</span>
for ( int i = 0; i &lt; dnaBases.length(); i++ )
{
  switch ( dnaBases.charAt( i ) )
  {
    case 'A': case 'a':
      a++;
      break;
    case 'G': case 'g':
      g++;
      break;
    case 'C': case 'c':
      c++;
      break;
    case 'T': case 't':
      t++;
      break;
    default:
      System.err.println( "Unbekannte Nukleinbasen " + dnaBases.charAt( i ) );
     <span class="cfett"> break loop;</span>
  }
}

System.out.printf( "Anzahl: A=%d, G=%d, C=%d, T=%d%n", a, g, c, t );</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext">
<p class="BStandard"><span class="cfett">Hinweis   </span>Marken können vor allen Anweisungen (und Blöcke sind damit eingeschlossen) definiert werden; in unserem ersten Fall haben wir die Marke vor die <span class="clisting">while(true)</span>-Schleife gesetzt. Interessanterweise kann ein <span class="clisting">break</span> mit einer Marke nicht nur eine Schleife und <span class="clisting">case</span> verlassen, sondern auch einen ganz einfachen Block:</p>
<div class="listing"><pre class="prettyprint">label:
{

  break label;
  …
}</pre></div>
<p class="BStandard">Somit entspricht das <span class="clisting">break label</span> einem <span class="clisting">goto</span> zum Ende des Blocks.</p>
<p class="BStandard">Das <span class="clisting">break</span> kann nicht durch <span class="clisting">continue</span> ausgetauscht werden, da <span class="clisting">continue</span> in jedem Fall eine Schleife braucht. Und ein normales <span class="clisting">break</span> ohne Marke wäre im Übrigen nicht gültig und könnte nicht den Block verlassen.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext" rowspan="2">
<p class="BStandard"><span class="cfett">Rätsel   </span>Wenn Folgendes in der <span class="clisting">main()</span>-Methode stünde, würde es der Compiler übersetzen? Was wäre die Ausgabe? Achte genau auf die Leerzeichen!</p>
<div class="listing"><pre class="prettyprint">int val = 2;
switch ( val )
{
  case 1:
    System.out.println( 1 );
  case2:
    System.out.println( 2 );
  default:
    System.out.println( 3 );
}</pre></div>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="javainsel9/.htm"><input type="hidden" name="buchtitel" value="Java ist auch eine Insel"><input type="hidden" name="Kapitel" value="2.7 Schleifen"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="javainsel_02_006.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="javainsel_02_008.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">  </td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor">
<strong>Zum Katalog</strong></a>

</td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2254?GPP=opjiVIV">
<img src="common/9783836215060_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java ist auch eine Insel" title="Zum Katalog: Java ist auch eine Insel">
<br><br><br><br><br><br><strong>Java ist auch eine Insel</strong><br><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt bestellen</a><br /><br />
</td>
</tr>
</table>
</td>

</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Ihre Meinung?</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">

<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br><br></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>

<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
</td>
</tr>

<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opjiVIV" class="autor"><strong>Buchempfehlungen</strong></a></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2285?GPP=opjiVIV">
<img src="common/9783836215275_s.gif" width="102" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks" title="Zum Katalog: Computergeschichte(n) – nicht nur für Geeks"><br><br><br><br><br><br>&nbsp;Computergeschichte(n)<br>&nbsp;nicht nur für Geeks</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1949?GPP=opjiVIV">
<img src="common/9783836213080_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Java und XML" title="Zum Katalog: Java und XML"><br><br><br><br><br><br><br>&nbsp;Java und XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2346?GPP=opjiVIV">
<img src="common/9783836215688_s.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in Java" title="Zum Katalog: Einstieg in Java"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in Java</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2051?GPP=opjiVIV">

<img src="common/9783836213677_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in XML" title="Zum Katalog: Einstieg in XML"><br><br><br><br><br><br><br>&nbsp;Einstieg<br>&nbsp;in XML</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2322?GPP=opjiVIV">
<img src="common/9783836215527_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Visual C# 2010" title="Zum Katalog: Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2212?GPP=opjiVIV">
<img src="common/9783836214742_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Professionell entwickeln mit Visual C# 2010" title="Zum Katalog: Professionell entwickeln mit Visual C# 2010"><br><br><br><br><br><br><br>&nbsp;Professionell<br>&nbsp;entwickeln mit<br>&nbsp;Visual C# 2010</a><br><br></td>
</tr>

<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opjiVIV">
<img src="common/9783836214292_s.gif" width="108" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br><br><br><br><br><br><br>&nbsp;C++ von A bis Z</a><br><br></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></img></td>
</tr>

<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="start" height="20" colspan="2"><span class="autor"><strong>&nbsp;Shopping</strong></span></td>
</tr>
<tr>
<td valign="top" class="tbl4" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opjiVIV"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br><br></td>

</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2011</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
